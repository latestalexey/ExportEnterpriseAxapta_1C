//Рыбак Сергей от 15.05.2017
Перем ИмяСервераAxapta;
Перем ИмяБазыAxapta;
Перем ПарольБазыAxapta;
Перем ПользовательAxapta;
Перем ИмяСервераAxaptaCash;
Перем ИмяБазыAxaptaCash;
Перем ПользовательAxaptaCash;
Перем ПарольБазыAxaptaCash;
Перем Version;
Перем Message_ExchangePlan;
Перем Message_To;
Перем Message_From;
//Перем MessageNo;
Перем ReceivedNo;
Перем Connection;
Перем ConnectionCash;
Перем CmdList;
Перем adDate;
Перем adBoolean;
Перем adChar;
Перем adBSTR;
Перем adWChar;
Перем adCmdText;
Перем adCmdTable;
Перем adParamInput;
Перем adUseClient;
Перем adUseServer;
Перем adLockOptimistic;
Перем adLockBatchOptimistic;
Перем adLockReadOnly;
Перем adOpenKeyset;
Перем adOpenForwardOnly;
Перем adOpenStatic;
Перем ВалютаРуб;
Перем РозничныйПокупатель;
Перем СтатьяДДС_РозничнаяВыручка;
Перем БанкЭквайрер;
Перем Контрагент_Таможня;
Перем Контрагент_Таможня1;
Перем СтранаРоссия;
Перем ТипыЧековПродаж;
Перем ТипыЧековВозвратов;
Перем ТипыЧековУслуг;
Перем ТипыЧековПредоплат;

Функция СведенияОВнешнейОбработке() Экспорт

	Перем ПараметрыРегистрации;
	
	Если ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработкиКлиентСервер = ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиентСервер");
		
		ПараметрыРегистрации = МодульДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке("1.2.1.1");
		
		ПараметрыРегистрации.Вид = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		ПараметрыРегистрации.Версия = "2.2.1";
		ПараметрыРегистрации.БезопасныйРежим = Ложь;
		
		НоваяКоманда = ПараметрыРегистрации.Команды.Добавить();
		НоваяКоманда.Представление = НСтр("ru = 'Выгрузка данных из Axapta в Enterprise'");
		НоваяКоманда.Идентификатор = "ОткрытьГлобально";
		НоваяКоманда.Использование = МодульДополнительныеОтчетыИОбработкиКлиентСервер.ТипКомандыОткрытиеФормы();
		НоваяКоманда.ПоказыватьОповещение = Ложь;
	КонецЕсли;

	Возврат ПараметрыРегистрации;

КонецФункции

Функция ХэшMD5Простой(Текст) Экспорт
	ОбъектХеш = Новый ХешированиеДанных(ХешФункция.MD5);
	ОбъектХеш.Добавить(Текст);
	Хэш = НРег(СтрЗаменить(Строка(ОбъектХеш.ХешСумма), " ",""));
	Возврат Лев(Хэш, 8) + "-" + Сред(Хэш, 9, 4) + "-" + Сред(Хэш, 13, 4) + "-" + Сред(Хэш, 17, 4) + "-" + Сред(Хэш, 21);
КонецФункции

Функция ВыполнитьВыгрузку(ИмяФайлаВыгрузки) Экспорт
	Перем ТаблицаОРП, ТаблицаОплат;
	
	ФайлОбмена = Новый ЗаписьXML;
	ФайлОбмена.ОткрытьФайл(ИмяФайлаВыгрузки);
	ФайлОбмена.ЗаписатьОбъявлениеXML();
	
	// Записываем элемент <Message>
	ФайлОбмена.ЗаписатьНачалоЭлемента("Message");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("msg", "http://www.1c.ru/SSL/Exchange/Message");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	// Записываем элемент <Header>
	Header = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Header"));
	XMLСхема = ФорматОбмена(Version);
	Header.Format = XMLСхема;
	Header.CreationDate = ТекущаяДата();
	
	Confirmation = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Confirmation"));
	//Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Confirmation.ExchangePlan = "СинхронизацияДанныхЧерезУниверсальныйФормат";
		Confirmation.To = Message_To;
		Confirmation.From = Message_From;
		Confirmation.MessageNo = MessageNo;
		Confirmation.ReceivedNo = ReceivedNo;
	//КонецЕсли;
	Header.Confirmation = Confirmation;
		
	Header.AvailableVersion.Добавить(Version);
	
	ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, Header);
	
	// Записываем элемент <Body>
	ФайлОбмена.ЗаписатьНачалоЭлемента("Body");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("", XMLСхема);
	
	ВыгружаемыеОбъекты = Новый Соответствие;
	
	ADO_Connect();
	СтрСоответствиеОрганизаций = "SELECT
	|	LinkTable.MERJURIDICALPERSONID,
	|	CUSTTABLE.[ACCOUNTNUM],
	|   CUSTTABLE.[NAME] AS NAME,
	|	CASE WHEN LEN(JurPersOwn.[MERJURNAME_FORINVOICE]) > 50 THEN JurPersOwn.[MERJURIDICALPERSONNAME] ELSE JurPersOwn.[MERJURNAME_FORINVOICE] END AS FULLNAME,
	|	CUSTTABLE.CODE_INN_JUR AS INN,
	|	CUSTTABLE.KPP_RU AS KPP
	|INTO #OwnClientTable
	|FROM
	|	(SELECT
	|		JurPersOwn.MERJURIDICALPERSONID,
	|		MAX(CUSTTABLE.ACCOUNTNUM) AS ACCOUNTNUM
	|	FROM
	|		dbo.MERJURIDICALPERSON AS JurPersOwn
	|	INNER JOIN
	|		dbo.CUSTTABLE AS CUSTTABLE
	|		ON
	|		--(CUSTTABLE.MEROGRN_RU != '' AND CUSTTABLE.MEROGRN_RU = JurPersOwn.OGRN_RU) OR
	|		(JurPersOwn.CODE_INN_JUR = CUSTTABLE.CODE_INN_JUR + '/' + CUSTTABLE.KPP_RU) OR
	|		(JurPersOwn.[MERJURIDICALPERSONNAME] = CUSTTABLE.[NAME])
	|	GROUP BY
	|		JurPersOwn.MERJURIDICALPERSONID) AS LinkTable
	|INNER JOIN
	|	dbo.CUSTTABLE AS CUSTTABLE
	|	ON (LinkTable.ACCOUNTNUM = CUSTTABLE.ACCOUNTNUM)
	|INNER JOIN
	|	dbo.MERJURIDICALPERSON AS JurPersOwn
	|	ON (LinkTable.MERJURIDICALPERSONID = JurPersOwn.MERJURIDICALPERSONID)
	|ORDER BY
	|	JurPersOwn.MERJURIDICALPERSONID;
	|CREATE INDEX idx_ACCOUNTNUM ON #OwnClientTable(ACCOUNTNUM);
	|CREATE INDEX idx_MERJURIDICALPERSONID ON #OwnClientTable(MERJURIDICALPERSONID);";
	ВыполнитьЗапросADO(Connection,СтрСоответствиеОрганизаций);
	//Соответствия кодов товаров
	СписокДокументов = Новый Массив;
	Для Каждого СтрокаДок Из ТаблицаДокументов Цикл
		Если (СтрокаДок.DOC_TYPE = "ПостНекоммерция" ИЛИ
			 СтрокаДок.DOC_TYPE = "РеалНекоммерция" ИЛИ
			 СтрокаДок.DOC_TYPE = "ГТДНекоммерция") И
			 ЗначениеЗаполнено(СтрокаДок.ДокументСсылка) Тогда
			СписокДокументов.Добавить(СтрокаДок.ДокументСсылка);
		КонецЕсли;
	КонецЦикла;
	Если СписокДокументов.Количество() > 0 Тогда
		ЗапросТоваров = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочникНоменклатуры.Код КАК КодТовара
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК ТоварыРеализации
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|	ПО ТоварыРеализации.Номенклатура = СправочникНоменклатуры.Ссылка
		|ГДЕ
		|	ТоварыРеализации.Ссылка В (&СписокДокументов)
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочникНоменклатуры.Код КАК КодТовара
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг.Товары КАК ТоварыПоступления
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|	ПО ТоварыПоступления.Номенклатура = СправочникНоменклатуры.Ссылка
		|ГДЕ
		|	ТоварыПоступления.Ссылка В (&СписокДокументов)
		|ОБЪЕДИНИТЬ
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СправочникНоменклатуры.Код КАК КодТовара
		|ИЗ
		|	Документ.ГТДИмпорт.Товары КАК ТоварыПоступления
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
		|	ПО ТоварыПоступления.Номенклатура = СправочникНоменклатуры.Ссылка
		|ГДЕ
		|	ТоварыПоступления.Ссылка В (&СписокДокументов)");
		ЗапросТоваров.УстановитьПараметр("СписокДокументов", СписокДокументов);
		ВыборкаТоваров = ЗапросТоваров.Выполнить().Выбрать();
		
		//CmdCashLoad(ТаблицаОРП, ТаблицаОплат);
		
		ТабДанных = СформироватьТаблицуАртикулов(Connection, ВыборкаТоваров, ТаблицаЗакупокXLS);
	Иначе
		ТабДанных = Новый ТаблицаЗначений;
		ТабДанных.Колонки.Добавить("MEREXTERNALITEMID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
		ТабДанных.Колонки.Добавить("MEREXTERNALITEMIDSPECIFICATION", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
		ТабДанных.Колонки.Добавить("NAMEALIASID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
		ТабДанных.Колонки.Добавить("NAME", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
		ТабДанных.Колонки.Добавить("NameAliasLogist", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
		ТабДанных.Колонки.Добавить("GTD", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
		ТабДанных.Колонки.Добавить("TMName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
		ТабДанных.Колонки.Добавить("TMId", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(4)));
		ТабДанных.Колонки.Добавить("CountryId", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3)));
		ТабДанных.Колонки.Добавить("COUNTRY", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
		ТабДанных.Колонки.Добавить("COUNTRYNUMID_MRC", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3)));
	КонецЕсли;
	
	Попытка
		Для Каждого СтрокаДок Из ТаблицаДокументов Цикл
			Если СтрокаДок.DOC_TYPE = "Импорт" Тогда
				ВыгрузитьПоступлениеИмпорта(ФайлОбмена, XMLСхема, Connection, СтрокаДок.DOC_ID, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "Поступление" Тогда
				ВыгрузитьСчетФактуруНаПоступление(ФайлОбмена, XMLСхема, Connection, СтрокаДок.DOC_ID, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "Отгрузка" Тогда
				ВыгрузитьРеализацию(ФайлОбмена, XMLСхема, Connection, СтрокаДок.DOC_ID, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "ПродажаРозница" Или СтрокаДок.DOC_TYPE = "ВозвратРозница" Тогда
				ВыгрузитьРозничнуюПродажу(ФайлОбмена, XMLСхема, Connection, СтрокаДок.DOC_ID, ВыгружаемыеОбъекты);
			ИначеЕсли СтрокаДок.DOC_TYPE = "ПродажаДистриб" Или СтрокаДок.DOC_TYPE = "ВозвратДистриб" Тогда
				ВыгрузитьДистрибуцию(ФайлОбмена, XMLСхема, Connection, СтрокаДок.DOC_ID, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "ПостНекоммерция" Тогда
				ВыгрузитьПостНекоммерцию(ФайлОбмена, XMLСхема, Connection, СтрокаДок.ДокументСсылка, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "ГТДНекоммерция" Тогда
				ВыгрузитьГТДНекоммерцию(ФайлОбмена, XMLСхема, Connection, СтрокаДок.ДокументСсылка, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "ПостВнешнее" ИЛИ СтрокаДок.DOC_TYPE = "ОстПоступл" Тогда
				ВыгрузитьПостВнешнее(ФайлОбмена, XMLСхема, Connection, СтрокаДок.DOC_ID, СтрокаДок.DOC_DATE, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "РеалВнешняя" ИЛИ СтрокаДок.DOC_TYPE = "ОстРеализ" Тогда
				ВыгрузитьРеалВнешняя(ФайлОбмена, XMLСхема, Connection, СтрокаДок.DOC_ID, СтрокаДок.DOC_DATE, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "ОстОприход" Тогда
				ВыгрузитьОстаткиВнешнее(ФайлОбмена, XMLСхема, Connection, СтрокаДок.DOC_ID, СтрокаДок.DOC_DATE, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "РеалНекоммерция" Тогда
				ВыгрузитьРеалНекоммерцию(ФайлОбмена, XMLСхема, Connection, СтрокаДок.ДокументСсылка, ВыгружаемыеОбъекты, ТабДанных);
			ИначеЕсли СтрокаДок.DOC_TYPE = "ОтчётКомитенту" Тогда
				ВыгрузитьОтчетКомитенту(ФайлОбмена, XMLСхема, Connection, СтрокаДок.ДокументСсылка, ВыгружаемыеОбъекты, ТабДанных);
			КонецЕсли;
			
		КонецЦикла;
		Для Каждого ЭлементНоменклатуры Из ВыгружаемыеОбъекты Цикл
			ВыгрузитьОбъекты(ФайлОбмена, XMLСхема, ЭлементНоменклатуры.Значение);
		КонецЦикла;
		
	Исключение
		
		СтрОписаниеОшибки=ОписаниеОшибки();
		Если НЕ ПустаяСтрока(СтрОписаниеОшибки) Тогда
			Сообщить(СтрОписаниеОшибки);
		КонецЕсли;
		
		ADO_Disconnect();
		//ADO_DisconnectCash();
		Возврат Ложь;
		
	КонецПопытки;
	ФайлОбмена.ЗаписатьКонецЭлемента(); // Body
	ФайлОбмена.ЗаписатьКонецЭлемента(); // Message
	ФайлОбмена.Закрыть();
	MessageNo = MessageNo + 1;
	ADO_Disconnect();
	//ADO_DisconnectCash();
	Возврат Истина;
КонецФункции // ВыполнитьВыгрузку()

Функция ВыгрузитьРозничнуюПродажуOld(ФайлОбмена, XMLСхема, Соединение, КодДокумента, ВыгружаемыеОбъекты, ТабАртикулов)
	СтрЗапросаЧека = "
	|SELECT
	|	CashReports.RETAILCASHREPORTID AS DOC_ID,
	|	dateadd(second, CashReports.CREATEDTIME, CashReports.TRANSDATE) AS DOC_DATE,
	|	ISNULL(JURIDICALHISTORY.MERJURIDICALPERSONID, INVENTLOCATION.MERJURIDICALPERSONID) AS DOC_ORGID,
	|	JURIDICALPERSON.FULLNAME AS DOC_ORGNAME,
	|	JURIDICALPERSON.INN AS DOC_ORGINN,
	|	JURIDICALPERSON.KPP AS DOC_ORGKPP,
	|	'RUR' AS DOC_CUR,
	|	(CASE WHEN CashReports.MERRETAILCASHREPORTTYPE = 1 THEN 'ВозвратРозница' ELSE 'ПродажаРозница' END) AS DOC_TYPE, 
	|	CashReports.DESCRIPTION AS DOC_DESCR,
	|   CashReports.INVENTLOCATIONID AS DOC_STOCKID,
	|   INVENTLOCATION.NAME AS DOC_STOCKNAME,
	|   CashReports.INVENTLOCATIONID AS DOC_BRANCHID,
	|   INVENTLOCATION.NAME AS DOC_BRANCHNAME,
	|	CashReports.AMOUNTCUR AS DOC_SUM,
	|	CashReports.MERDOCREASONTYPE AS DOC_PARENTTYPE,
	|	CashReports.DOCREASONNUM AS DOC_PARENTID,
	|	dateadd(second, SalesTab.CREATEDTIME, SalesTab.TRANSDATE) AS DOC_PARENTDATE
	|FROM
	|	dbo.MERRETAILCASHREPORTTABLE AS CashReports
	|INNER JOIN
	|	dbo.INVENTLOCATION AS INVENTLOCATION ON CashReports.INVENTLOCATIONID = INVENTLOCATION.INVENTLOCATIONID
	|LEFT JOIN 
	|	dbo.MERRETAILCASHREPORTTABLE AS SalesTab ON CashReports.DOCREASONNUM = SalesTab.RETAILCASHREPORTID AND CashReports.MERRETAILCASHREPORTTYPE = 1 --AND SalesTab.MERRETAILCASHREPORTTYPE = 0
	|LEFT JOIN
	|	dbo.INVENTLOCATION_JURIDICALT50219 AS JURIDICALHISTORY
	|	ON CashReports.INVENTLOCATIONID = JURIDICALHISTORY.INVENTLOCATIONID AND
	|	(CashReports.TRANSDATE >= JURIDICALHISTORY.FROMDATE AND (CashReports.TRANSDATE <= JURIDICALHISTORY.TODATE OR JURIDICALHISTORY.TODATE = 0))
	|LEFT JOIN 
	|	#OwnClientTable AS JURIDICALPERSON ON ISNULL(JURIDICALHISTORY.MERJURIDICALPERSONID, INVENTLOCATION.MERJURIDICALPERSONID) = JURIDICALPERSON.MERJURIDICALPERSONID
	|WHERE
	|	CashReports.CANCEL = 0 AND
	|	CashReports.SalesIdBase <> '' AND
	|	CashReports.AMOUNTCUR <> 0 AND
	|	CashReports.RETAILCASHREPORTID = ?";
	
	СтрЗапросаЧекаТЧ = "SELECT
	|	CASE WHEN InventTables.ITEMNAME = '' THEN TM.NAME ELSE InventTables.ITEMNAME END AS NAME,
	|	CASE WHEN InventTables.NAMEALIAS = '' THEN InventTables.OUTID_1C ELSE InventTables.NAMEALIAS END AS NAMEALIASNAME,
	|	CASE WHEN InventTables.NAMEALIASID = '' THEN InventTables.ITEMID ELSE InventTables.NAMEALIASID END AS NAMEALIASID,
	|	InventTables.ITEMRANGEID,
	|	CashReportsLine.QTY,
	|	CashReportsLine.AMOUNTCUR,
	|	TM.NAME AS TMName
	|FROM
	|	dbo.MERRETAILCASHREPORTLINE AS CashReportsLine
	|LEFT JOIN
	|	dbo.INVENTTABLE AS InventTables
	|	ON CashReportsLine.ITEMID = InventTables.ITEMID
	|LEFT JOIN
	|	dbo.MERNAMEALIASTABLE AS AliasTables
	|	ON InventTables.NAMEALIASID = AliasTables.NAMEALIASID
	|LEFT OUTER JOIN
	|	dbo.INVENTITEMRANGE AS TM
	|	ON InventTables.ITEMRANGEID = TM.RANGEID
	|WHERE
	|	(CashReportsLine.RETAILCASHREPORTID = ?)";
	
	СтрЗапросаОплатЧека = "SELECT
	|	TabPays.MERCURRENCYID,
	|	SUM(TabPays.AMOUNT_RUR) AS AMOUNT_RUR,
	|	TabTypes.MERCURRENCYTYPE
	|FROM
	|	dbo.MERRETAILCASHREPORTTABLE AS CashReports
	|LEFT JOIN
	|	dbo.MERRETAILCASHREPORTTABLE AS CashReasonReports
	|	ON CashReasonReports.DOCREASONNUM = CashReports.RETAILCASHREPORTID
	|LEFT JOIN
	|	dbo.WEIGHOUTRESERVDOC AS WeighOutReservDoc
	|	ON CashReports.DOCREASONNUM = WeighOutReservDoc.WEIGHOUTTABLEID
	|LEFT JOIN
	|	dbo.MerTypePayDoc AS TabPays
	|	ON CashReports.RETAILCASHREPORTID = TabPays.INVENTTRANSREFID
	|	OR CashReports.DOCREASONNUM = TabPays.INVENTTRANSREFID
	|	OR WeighOutReservDoc.MERRESERVDOCID = TabPays.INVENTTRANSREFID
	|LEFT JOIN
	|	dbo.MerCurrency AS TabTypes
	|	ON TabPays.MERCURRENCYID = TabTypes.MERCURRENCYID
	|WHERE
	|	(CashReports.RETAILCASHREPORTID = ?)
	|GROUP BY
	|	TabPays.MERCURRENCYID,
	|	TabTypes.MERCURRENCYTYPE";
	
	XDTO_БанкЭквайрер = ВыгрузитьКлючПоСтруктуре(Неопределено, БанкЭквайрер, "КлючевыеСвойстваКонтрагент", XMLСхема);
	
	Recordset = ВыполнитьЗапросADO(Соединение, СтрЗапросаЧека, КодДокумента);
	Если Recordset.EOF() = Ложь Тогда
		ТипДокумента = RecordSet.Fields("DOC_TYPE").Value;
		Если ТипДокумента = "ПродажаРозница" Тогда
			XDTO_ОтчетОРозничныхПродажах = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ОтчетОРозничныхПродажах"));
			XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "КлючевыеСвойства");
			XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_ID").Value);
			XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства.Дата = Дата(RecordSet.Fields("DOC_DATE").Value);
			XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства.Номер = RecordSet.Fields("DOC_ID").Value;
			Организация = ВыгрузитьКлючОрганизацию(XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства, RecordSet);
			Валюта = ВыгрузитьКлючВалюты(XDTO_ОтчетОРозничныхПродажах, RecordSet);
			СуммаДокумента = RecordSet.Fields("DOC_SUM").Value;
			XDTO_ОтчетОРозничныхПродажах.Сумма = СуммаДокумента;
			XDTO_ОтчетОРозничныхПродажах.СуммаВключаетНДС = Истина;
			ВыгрузитьКлючПодразделения(XDTO_ОтчетОРозничныхПродажах, RecordSet.Fields("DOC_BRANCHID").Value, RecordSet.Fields("DOC_BRANCHNAME").Value);
			Склад = ВыгрузитьКлючСклада(XDTO_ОтчетОРозничныхПродажах, RecordSet, "Розничный");
			ВыгружаемыеОбъекты.Вставить("Склад_" + RecordSet.Fields("DOC_STOCKID").Value, Склад);
			XDTO_ОтчетОРозничныхПродажах.Налогообложение = "ПродажаОблагаетсяНДС";
			
			СтатьяДДС = ВыгрузитьКлючПоСтруктуре(XDTO_ОтчетОРозничныхПродажах, СтатьяДДС_РозничнаяВыручка, "СтатьяДДС", XMLСхема);
			
			XDTO_ОтчетОРозничныхПродажах.УчетВыручкиВОперационнойКассе = Ложь;
			XDTO_ОтчетОРозничныхПродажах.Комментарий = RecordSet.Fields("DOC_DESCR").Value;
			RecordsetTable = ВыполнитьЗапросADO(Соединение,СтрЗапросаЧекаТЧ, КодДокумента);
			XDTO_ОтчетОРозничныхПродажах.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "Товары");
			НомерСтрокиДокумента = 1;
			Пока RecordsetTable.EOF() = Ложь Цикл
				НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах.Товары, "Строка");
				НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
				НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("КодГруппы", RecordsetTable.Fields("ITEMRANGEID").Value);
				СтруктураПараметров.Вставить("НаименованиеГруппы", RecordsetTable.Fields("TMName").Value);
				
				Номенклатура = ВыгрузитьКлючНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, НоваяСтрока.ДанныеНоменклатуры, RecordsetTable, СтруктураПараметров);
				ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
				НоваяСтрока.Количество = RecordsetTable.Fields("qty").Value;
				НоваяСтрока.Сумма = RecordsetTable.Fields("AMOUNTCUR").Value;
				НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
				СтавкаНДС = 18;
				НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
				СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
				НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
				НоваяСтрока.ТипЗапасов = "СобственныеТовары";
				XDTO_ОтчетОРозничныхПродажах.Товары.Строка.Добавить(НоваяСтрока);
				RecordsetTable.MoveNext();
			КонецЦикла;
			СуммаОплатыНаличными = 0;
			СуммаОплатыБезналичными = 0;
			RecordsetTable = ВыполнитьЗапросADO(Соединение, СтрЗапросаОплатЧека, КодДокумента);
			Пока RecordsetTable.EOF() = Ложь Цикл
				Если RecordsetTable.Fields("MERCURRENCYTYPE").Value = 3 Тогда
					СуммаОплатыНаличными = СуммаОплатыНаличными + RecordsetTable.Fields("AMOUNT_RUR").Value;
				ИначеЕсли RecordsetTable.Fields("MERCURRENCYTYPE").Value = 1 Тогда
					Если XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами = Неопределено Тогда
						XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "ОплатаПлатежнымиКартами");
					КонецЕсли;
					НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами, "Строка");
					НоваяСтрока.СуммаОплаты = RecordsetTable.Fields("AMOUNT_RUR").Value;
					СуммаОплатыБезналичными = СуммаОплатыБезналичными + НоваяСтрока.СуммаОплаты;
					НоваяСтрока.ВидКарты = "Платежная карта";
					НоваяСтрока.НомерКарты = RecordsetTable.Fields("MERCURRENCYID").Value;
					НоваяСтрока.Эквайрер = XDTO_БанкЭквайрер;
					XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами.Строка.Добавить(НоваяСтрока);
				КонецЕсли;
				RecordsetTable.MoveNext();
			КонецЦикла;
			Если СуммаДокумента > СуммаОплатыНаличными + СуммаОплатыБезналичными Тогда
				Сообщить("По чеку № " + RecordSet.Fields("DOC_ID").Value + " оплата не полная. Оплачено " +
				Формат(СуммаОплатыНаличными + СуммаОплатыБезналичными, "ЧДЦ=2; ЧН=0; ЧГ=0") + " из " + Формат(СуммаДокумента, "ЧДЦ=2; ЧН=0; ЧГ=0"));
			КонецЕсли;
			// 4. Записываем ОбъектXDTO в XML-файл.
			ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ОтчетОРозничныхПродажах);
		ИначеЕсли ТипДокумента = "ВозвратРозница" Тогда
			XDTO_ВозвратТоваровОтПокупателя = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ВозвратТоваровОтПокупателя"));
			XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "КлючевыеСвойства");
			XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_ID").Value);
			XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Дата = Дата(RecordSet.Fields("DOC_DATE").Value);
			XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Номер = RecordSet.Fields("DOC_ID").Value;
			Организация = ВыгрузитьКлючОрганизацию(XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства, RecordSet);
			
			ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "ДанныеВходящегоДокумента");
			ДанныеВходящегоДокумента.НомерВходящегоДокумента = RecordSet.Fields("DOC_PARENTID").Value;
			ДанныеВходящегоДокумента.ДатаВходящегоДокумента = RecordSet.Fields("DOC_PARENTDATE").Value;
			ДанныеВходящегоДокумента.НаименованиеВходящегоДокумента = "Чек ККМ";
			XDTO_ВозвратТоваровОтПокупателя.ДанныеВходящегоДокумента = ДанныеВходящегоДокумента;
			
			XDTO_ВозвратТоваровОтПокупателя.ВидОперации = "ВозвратОтРозничногоПокупателя";
			Валюта = ВыгрузитьКлючВалюты(XDTO_ВозвратТоваровОтПокупателя, RecordSet);
			СуммаДокумента = RecordSet.Fields("DOC_SUM").Value;
			XDTO_ВозвратТоваровОтПокупателя.Сумма = СуммаДокумента;
			XDTO_ВозвратТоваровОтПокупателя.СуммаВключаетНДС = Истина;
			ВыгрузитьКлючПодразделения(XDTO_ВозвратТоваровОтПокупателя, RecordSet.Fields("DOC_BRANCHID").Value, RecordSet.Fields("DOC_BRANCHNAME").Value);
			Склад = ВыгрузитьКлючСклада(XDTO_ВозвратТоваровОтПокупателя, RecordSet, "Розничный");
			ВыгружаемыеОбъекты.Вставить("Склад_" + RecordSet.Fields("DOC_STOCKID").Value, Склад);
			
			СуммаОплатыНаличными = 0;
			СуммаОплатыБезналичными = 0;
			RecordsetTable = ВыполнитьЗапросADO(Соединение, СтрЗапросаОплатЧека, КодДокумента);
			Пока RecordsetTable.EOF() = Ложь Цикл
				Если RecordsetTable.Fields("MERCURRENCYTYPE").Value = 3 Тогда
					СуммаОплатыНаличными = СуммаОплатыНаличными + RecordsetTable.Fields("AMOUNT_RUR").Value;
				ИначеЕсли RecordsetTable.Fields("MERCURRENCYTYPE").Value = 1 Тогда
					Если XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами = Неопределено Тогда
						XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "ОплатаПлатежнымиКартами");
					КонецЕсли;
					НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами, "Строка");
					НоваяСтрока.СуммаОплаты = RecordsetTable.Fields("AMOUNT_RUR").Value;
					СуммаОплатыБезналичными = СуммаОплатыБезналичными + НоваяСтрока.СуммаОплаты;
					НоваяСтрока.ВидКарты = "Платежная карта";
					НоваяСтрока.НомерКарты = RecordsetTable.Fields("MERCURRENCYID").Value;
					НоваяСтрока.Эквайрер = XDTO_БанкЭквайрер;
					XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами.Строка.Добавить(НоваяСтрока);
				КонецЕсли;
				RecordsetTable.MoveNext();
			КонецЦикла;
			Если СуммаДокумента > СуммаОплатыНаличными + СуммаОплатыБезналичными Тогда
				Сообщить("По чеку № " + RecordSet.Fields("DOC_ID").Value + " оплата не полная. Оплачено " +
				Формат(СуммаОплатыНаличными + СуммаОплатыБезналичными, "ЧДЦ=2; ЧН=0; ЧГ=0") + " из " + Формат(СуммаДокумента, "ЧДЦ=2; ЧН=0; ЧГ=0"));
			КонецЕсли;
			Если СуммаОплатыБезналичными > 0 Тогда
				//Создаём возврат от покупателя с контрагентом БанкЭквайрер
				//Если наличные также были, то создаём РКО, где получатель БанкЭквайрер со счетами расчетов 57.03
			Иначе
				//Создаём возврат от покупателя с контрагентом ЧастноеЛицо
				//Создаём РКО, где получатель ЧастноеЛицо
			КонецЕсли;
			Контрагент = ВыгрузитьКлючПоСтруктуре(XDTO_ВозвратТоваровОтПокупателя, РозничныйПокупатель, "Контрагент", XMLСхема);
			
			ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "ДанныеВзаиморасчетов");
			СтруктураДоговора = Новый Структура;
			СтруктураДоговора.Вставить("Ссылка", "398442c9-3433-11e4-8afc-003084308a41");
			СтруктураДоговора.Вставить("ВидДоговора", "СПокупателем");
			СтруктураДоговора.Вставить("Организация", Организация);
			СтруктураДоговора.Вставить("Контрагент", Контрагент);
			СтруктураДоговора.Вставить("ВалютаВзаиморасчетов", Валюта);
			СтруктураДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
			СтруктураДоговора.Вставить("Наименование", "Основной договор");
			СтруктураДоговора.Вставить("Дата", Дата("20000101000000"));
			СтруктураДоговора.Вставить("Номер", "б/н");
			Договор = ВыгрузитьКлючПоСтруктуре(ДанныеВзаиморасчетов, СтруктураДоговора, "Договор", XMLСхема);
			ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
			ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
			ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
			ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
			XDTO_ВозвратТоваровОтПокупателя.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
			
			XDTO_ВозвратТоваровОтПокупателя.ДокументРеализации = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "ДокументРеализации");
			КлючевыеСвойстваОтчетОРозничныхПродажах = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "КлючевыеСвойстваОтчетОРозничныхПродажах"));
			КлючевыеСвойстваОтчетОРозничныхПродажах.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_PARENTID").Value);
			КлючевыеСвойстваОтчетОРозничныхПродажах.Дата = Дата(RecordSet.Fields("DOC_PARENTDATE").Value);
			КлючевыеСвойстваОтчетОРозничныхПродажах.Номер = RecordSet.Fields("DOC_PARENTID").Value;
			КлючевыеСвойстваОтчетОРозничныхПродажах.Организация = Организация;
			XDTO_ВозвратТоваровОтПокупателя.ДокументРеализации.ОтчетОРозничныхПродажахСсылка = КлючевыеСвойстваОтчетОРозничныхПродажах;
			
			XDTO_ВозвратТоваровОтПокупателя.ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
			XDTO_ВозвратТоваровОтПокупателя.Комментарий = RecordSet.Fields("DOC_DESCR").Value;
			XDTO_ВозвратТоваровОтПокупателя.Налогообложение = "ПродажаОблагаетсяНДС";
			
			RecordsetTable = ВыполнитьЗапросADO(Соединение,СтрЗапросаЧекаТЧ, КодДокумента);
			XDTO_ВозвратТоваровОтПокупателя.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "Товары");
			НомерСтрокиДокумента = 1;
			Пока RecordsetTable.EOF() = Ложь Цикл
				НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя.Товары, "Строка");
				НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
				НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("КодГруппы", RecordsetTable.Fields("ITEMRANGEID").Value);
				СтруктураПараметров.Вставить("НаименованиеГруппы", RecordsetTable.Fields("TMName").Value);
				
				Номенклатура = ВыгрузитьКлючНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, НоваяСтрока.ДанныеНоменклатуры, RecordsetTable, СтруктураПараметров);
				
				ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
				НоваяСтрока.Количество = -RecordsetTable.Fields("qty").Value;
				НоваяСтрока.Сумма = RecordsetTable.Fields("AMOUNTCUR").Value;
				НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
				СтавкаНДС = 18;
				НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
				СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
				НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
				НоваяСтрока.ТипЗапасов = "СобственныеТовары";
				XDTO_ВозвратТоваровОтПокупателя.Товары.Строка.Добавить(НоваяСтрока);
				RecordsetTable.MoveNext();
			КонецЦикла;
			XDTO_ВозвратТоваровОтПокупателя.СпособПогашенияЗадолженности = "Автоматически";
			// 4. Записываем ОбъектXDTO в XML-файл.
			ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ВозвратТоваровОтПокупателя);
		КонецЕсли;
	КонецЕсли;
	Recordset.Close();
	Возврат Истина;
КонецФункции

Функция ВыгрузитьРозничнуюПродажу(ФайлОбмена, XMLСхема, Соединение, КодДокумента, ВыгружаемыеОбъекты)
	
	ТабАртикулов = Неопределено;
	СтруктураПоиска = Новый Структура("DOC_ID, POSTED", КодДокумента, Истина);
	СтрокиОРП = ТаблицаЧеков.НайтиСтроки(СтруктураПоиска);
	
	XDTO_БанкЭквайрер = ВыгрузитьКлючПоСтруктуре(Неопределено, БанкЭквайрер, "КлючевыеСвойстваКонтрагент", XMLСхема);
	Если СтрокиОРП.Количество() > 0 Тогда
		ВыборкаДокумента = СтрокиОРП[0];
		
		ТипДокумента = ВыборкаДокумента.DOC_TYPE;
		Если ТипДокумента = "ПродажаРозница" Тогда
			XDTO_ОтчетОРозничныхПродажах = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ОтчетОРозничныхПродажах"));
			XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "КлючевыеСвойства");
			XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_ID);
			XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства.Дата = Дата(ВыборкаДокумента.DOC_DATE) + 22*60*60;
			XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства.Номер = ВыборкаДокумента.DOC_ID;
			
			Организация = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства, "Организация");
			//Организация.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_ORGID);
			Если Не ЗначениеЗаполнено(ВыборкаДокумента.DOC_ORGNAME) Тогда
				Возврат Ложь;
			КонецЕсли;
			Наименование = ВыборкаДокумента.DOC_ORGNAME;
			Организация.Наименование = Наименование;
			Организация.НаименованиеСокращенное = Наименование;
			Организация.НаименованиеПолное = Наименование;
			Организация.ИНН = ВыборкаДокумента.DOC_ORGINN;
			Организация.КПП = ВыборкаДокумента.DOC_ORGKPP;
			Организация.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
			XDTO_ОтчетОРозничныхПродажах.КлючевыеСвойства.Организация = Организация;
			ВыгружаемыеОбъекты.Вставить("Организация_" + Организация.Наименование, Организация);
			
			Валюта = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "Валюта");
			Валюта.Код = "643";
			Валюта.Наименование = "руб.";
			XDTO_ОтчетОРозничныхПродажах.Валюта = Валюта;
			
			СуммаДокумента = 0;
			НомерСтрокиДокумента = 1;
			//СуммаОплатыНаличными = 0;
			//СуммаОплатыБезналичными = 0;
			Товары = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "Товары");
			Услуги = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "Услуги");
			ПодарочныеСертификаты = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "ПодарочныеСертификаты");
			ОплатаСертификатами = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "ОплатаСертификатами");
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
			Для Каждого ВыборкаТовара Из СтрокиОРП Цикл
				СтруктураПараметров.Вставить("СписатьКоличество", ВыборкаТовара.Quantity);
				СуммаСтроки = ВыборкаТовара.TotalAmount;
				Цена = СуммаСтроки / СтруктураПараметров.СписатьКоличество;
				Пока СтруктураПараметров.СписатьКоличество > 0 Цикл
					Если ТипыЧековПродаж.Получить(ВыборкаТовара.DocType) <> Неопределено И
						 ТипыЧековУслуг.Получить(ВыборкаТовара.DocType) = Неопределено И
						 ТипыЧековПредоплат.Получить(ВыборкаТовара.DocType) = Неопределено Тогда
						НоваяСтрока = ОбъектXDTOПоИмениСвойства(Товары, "Строка");
						НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
						НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
						
						СтруктураПараметров.Вставить("ТоварСсылка", Неопределено);
						Если ТипВыгрузкиТовара = 0 Тогда
							СтруктураПараметров.Вставить("КодТовара", ВыборкаТовара.NAMEALIASID);
						ИначеЕсли ТипВыгрузкиТовара = 1 Тогда
							СтруктураПараметров.Вставить("КодТовара", ВыборкаТовара.MerExternalItemId);
						ИначеЕсли ТипВыгрузкиТовара = 2 Тогда
							СтруктураПараметров.Вставить("КодТовара", ВыборкаТовара.ItemId);
						КонецЕсли;
						СтруктураПараметров.Вставить("АльтКодТовара", "ITEM" + ВыборкаТовара.ItemId);
						СтруктураПараметров.Вставить("Наименование", ВыборкаТовара.NAME);
						СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовара.NAME+", артикул "+СокрЛП(ВыборкаТовара.NAMEALIASNAME)+", Производитель "+СокрЛП(ВыборкаТовара.TMName));
						СтруктураПараметров.Вставить("Артикул", ВыборкаТовара.NAMEALIASNAME);
						СтруктураПараметров.Вставить("АльтАртикул", ВыборкаТовара.OutId_1c);
						СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
						СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
						СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
						СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовара.ITEMRANGEROOT);
						СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовара.TMName);
						
						XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, СтруктураПараметров);
						НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
						ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
						НоваяСтрока.Количество = СтруктураПараметров.СписанноеКоличество;
						НоваяСтрока.Сумма = Цена * СтруктураПараметров.СписанноеКоличество;
						СуммаДокумента = СуммаДокумента + НоваяСтрока.Сумма;
						НоваяСтрока.Цена = Цена;
						СтавкаНДС = 18;
						НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
						СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
						НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
						НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
						Если ЗначениеЗаполнено(ВыборкаТовара.INVENTGTD) Тогда
							ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
							ДанныеГТД.НомерГТД = Лев(ВыборкаТовара.INVENTGTD, 30);
							СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеОбъекты, ДанныеГТД, ВыборкаТовара.COUNTRYOFORIGINID, ВыборкаТовара.COUNTRY, ВыборкаТовара.COUNTRYNUMID_MRC);
							НоваяСтрока.ДанныеГТД = ДанныеГТД;
						КонецЕсли;
						Товары.Строка.Добавить(НоваяСтрока);
						НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
					ИначеЕсли ТипыЧековПродаж.Получить(ВыборкаТовара.DocType) <> Неопределено И
						 ТипыЧековУслуг.Получить(ВыборкаТовара.DocType) = Неопределено И
						 ТипыЧековПредоплат.Получить(ВыборкаТовара.DocType) <> Неопределено Тогда
						НоваяСтрока = ОбъектXDTOПоИмениСвойства(ПодарочныеСертификаты, "Строка");
						НоваяСтрока.Сумма = СуммаСтроки;
						СтруктураПараметров.СписатьКоличество = 0;
						СуммаДокумента = СуммаДокумента + НоваяСтрока.Сумма;
						ПодарочныеСертификаты.Строка.Добавить(НоваяСтрока);
					ИначеЕсли ТипыЧековПродаж.Получить(ВыборкаТовара.DocType) <> Неопределено И
						 ТипыЧековУслуг.Получить(ВыборкаТовара.DocType) <> Неопределено И
						 ТипыЧековПредоплат.Получить(ВыборкаТовара.DocType) = Неопределено Тогда
						НоваяСтрока = ОбъектXDTOПоИмениСвойства(Услуги, "Строка");
						
						СтруктураПараметров.Вставить("ТоварСсылка", Неопределено);
						СтруктураПараметров.Вставить("КодТовара", "РЕМОНТ001");
						СтруктураПараметров.Вставить("Наименование", "Ремонт");
						СтруктураПараметров.Вставить("НаименованиеПолное", "Ремонт");
						СтруктураПараметров.Вставить("Артикул", "РЕМОНТ001");
						СтруктураПараметров.Вставить("ТипНоменклатуры", "Услуга");
						СтруктураПараметров.Вставить("ВидНоменклатуры", "Услуги");
						СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
						СтруктураПараметров.Вставить("КодГруппы", "Ремонт");
						СтруктураПараметров.Вставить("НаименованиеГруппы", "Ремонт");
						СтруктураПараметров.СписатьКоличество = 0;
						
						XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, СтруктураПараметров);
						НоваяСтрока.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
						НоваяСтрока.Количество = ВыборкаТовара.Quantity;
						НоваяСтрока.Сумма = ВыборкаТовара.TotalAmount;
						СуммаДокумента = СуммаДокумента + НоваяСтрока.Сумма;
						НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
						СтавкаНДС = 18;
						НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
						СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
						НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
						НоваяСтрока.Содержание = ВыборкаТовара.NAME + ", " + ВыборкаТовара.TMName;
						НоваяСтрока.ТипУслуги = "Агентские";
						Принципал = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "Принципал");
						//Принципал.Ссылка = Строка(КонтрагентПоУмолчанию.УникальныйИдентификатор());
						Принципал.Наименование = КонтрагентПоУмолчанию.Наименование;
						Принципал.НаименованиеПолное = КонтрагентПоУмолчанию.НаименованиеПолное;
						Принципал.ИНН = КонтрагентПоУмолчанию.ИНН;
						Принципал.КПП = КонтрагентПоУмолчанию.КПП;
						Принципал.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
						Принципал.СтранаРегистрации = ОбъектXDTOПоИмениСвойства(Принципал, "СтранаРегистрации");
						Принципал.СтранаРегистрации.Код = КонтрагентПоУмолчанию.СтранаРегистрации.Код;
						Принципал.СтранаРегистрации.Наименование = КонтрагентПоУмолчанию.СтранаРегистрации.Наименование;
						НоваяСтрока.Принципал = Принципал;
						ДоговорСПринципалом = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДоговорСПринципалом");
						ДоговорСПринципалом.ВидДоговора = "СКомитентом";
						ДоговорСПринципалом.Организация = Организация;
						ДоговорСПринципалом.Контрагент = Принципал;
						ДоговорСПринципалом.ВалютаВзаиморасчетов = Валюта;
						ДоговорСПринципалом.РасчетыВУсловныхЕдиницах = Ложь;
						ДоговорСПринципалом.Наименование = "Основной";
						ДоговорСПринципалом.Дата = Дата("20160101");
						ДоговорСПринципалом.Номер = "б/н";
						НоваяСтрока.ДоговорСПринципалом = ДоговорСПринципалом;
						Услуги.Строка.Добавить(НоваяСтрока);
					КонецЕсли;
					//СуммаЧекаОплатыНаличными = ВыборкаТовара.PAY_CASH;
					//СуммаЧекаОплатыБезналичными = ВыборкаТовара.PAY_CARD;
					//Если СуммаСтроки > СуммаЧекаОплатыНаличными + СуммаЧекаОплатыБезналичными Тогда
					//	Сообщить("По чеку № " + ВыборкаТовара.DocNumber + " от " + Формат(ВыборкаДокумента.DOC_DATE, "ДЛФ=D") + " оплата не полная. Оплачено " +
					//	Формат(СуммаЧекаОплатыНаличными + СуммаЧекаОплатыБезналичными, "ЧДЦ=2; ЧН=0; ЧГ=0") + " из " + Формат(СуммаСтроки, "ЧДЦ=2; ЧН=0; ЧГ=0"));
					//КонецЕсли;
					//СуммаОплатыНаличными = СуммаОплатыНаличными + СуммаЧекаОплатыНаличными;
					//СуммаОплатыБезналичными = СуммаОплатыБезналичными + СуммаЧекаОплатыБезналичными;
				КонецЦикла;
			КонецЦикла;
			
			XDTO_ОтчетОРозничныхПродажах.Сумма = СуммаДокумента;
			XDTO_ОтчетОРозничныхПродажах.СуммаВключаетНДС = Истина;
			XDTO_ОтчетОРозничныхПродажах.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "Подразделение");
			XDTO_ОтчетОРозничныхПродажах.Подразделение.Наименование = "Основное подразделение";
			XDTO_ОтчетОРозничныхПродажах.Склад = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "Склад");
			XDTO_ОтчетОРозничныхПродажах.Склад.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_STOCKID);
			XDTO_ОтчетОРозничныхПродажах.Склад.Наименование = ВыборкаДокумента.DOC_STOCKNAME;
			XDTO_ОтчетОРозничныхПродажах.Склад.ТипСклада = "Розничный";
			
			ВыгружаемыеОбъекты.Вставить("Склад_" + ВыборкаДокумента.DOC_STOCKID, XDTO_ОтчетОРозничныхПродажах.Склад);
			XDTO_ОтчетОРозничныхПродажах.Налогообложение = "ПродажаОблагаетсяНДС";
			
			СтатьяДДС = ВыгрузитьКлючПоСтруктуре(XDTO_ОтчетОРозничныхПродажах, СтатьяДДС_РозничнаяВыручка, "СтатьяДДС", XMLСхема);
			
			XDTO_ОтчетОРозничныхПродажах.УчетВыручкиВОперационнойКассе = Ложь;
			//XDTO_ОтчетОРозничныхПродажах.Комментарий = RecordSet.Fields("DOC_DESCR").Value;
			Если Товары.Строка.Количество() > 0 Тогда
				XDTO_ОтчетОРозничныхПродажах.Товары = Товары;
			КонецЕсли;
			Если Услуги.Строка.Количество() > 0 Тогда
				XDTO_ОтчетОРозничныхПродажах.Услуги = Услуги;
			КонецЕсли;
			СтруктураПоиска = Новый Структура("DOC_ID, POSTED", КодДокумента, Истина);
			СтрокиОплат = ТаблицаЧеков.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаОплаты Из СтрокиОплат Цикл
				Если СтрокаОплаты.PAY_CARD > 0 Тогда
					XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах, "ОплатаПлатежнымиКартами");
					НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами, "Строка");
					НоваяСтрока.СуммаОплаты = СтрокаОплаты.PAY_CARD;
					НоваяСтрока.ВидКарты = "Платежная карта";
					НоваяСтрока.НомерКарты = "1";
					НоваяСтрока.Эквайрер = XDTO_БанкЭквайрер;
					XDTO_ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами.Строка.Добавить(НоваяСтрока);
				КонецЕсли;
			КонецЦикла;
			ВыгружаемыеОбъекты.Вставить("Контрагент_" + XDTO_БанкЭквайрер.Наименование, XDTO_БанкЭквайрер);
			Если ПодарочныеСертификаты.Строка.Количество() > 0 Тогда
				XDTO_ОтчетОРозничныхПродажах.ПодарочныеСертификаты = ПодарочныеСертификаты;
			КонецЕсли;
			// 4. Записываем ОбъектXDTO в XML-файл.
			ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ОтчетОРозничныхПродажах);
		ИначеЕсли ТипДокумента = "ВозвратРозница" Тогда
			Если ТипыЧековПредоплат.Получить(ВыборкаДокумента.DocType) = Неопределено Тогда
				XDTO_ВозвратТоваровОтПокупателя = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ВозвратТоваровОтПокупателя"));
				XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "КлючевыеСвойства");
				XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_ID);
				XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Дата = Дата(ВыборкаДокумента.DOC_DATE);
				XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Номер = ВыборкаДокумента.DOC_ID;
				
				Организация = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства, "Организация");
				//Организация.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_ORGID);
				Если Не ЗначениеЗаполнено(ВыборкаДокумента.DOC_ORGNAME) Тогда
					Возврат Ложь;
				КонецЕсли;
				Наименование = ВыборкаДокумента.DOC_ORGNAME;
				Организация.Наименование = Наименование;
				Организация.НаименованиеСокращенное = Наименование;
				Организация.НаименованиеПолное = Наименование;
				Организация.ИНН = ВыборкаДокумента.DOC_ORGINN;
				Организация.КПП = ВыборкаДокумента.DOC_ORGKPP;
				Организация.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
				XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Организация = Организация;
				
				ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "ДанныеВходящегоДокумента");
				ДанныеВходящегоДокумента.НомерВходящегоДокумента = ВыборкаДокумента.DOC_PARENTID;
				ДанныеВходящегоДокумента.ДатаВходящегоДокумента = ВыборкаДокумента.DOC_PARENTDATE;
				ДанныеВходящегоДокумента.НаименованиеВходящегоДокумента = "Чек ККМ";
				XDTO_ВозвратТоваровОтПокупателя.ДанныеВходящегоДокумента = ДанныеВходящегоДокумента;
				
				XDTO_ВозвратТоваровОтПокупателя.ВидОперации = "ВозвратОтРозничногоПокупателя";
				Валюта = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "Валюта");
				Валюта.Код = "643";
				Валюта.Наименование = "руб.";
				XDTO_ВозвратТоваровОтПокупателя.Валюта = Валюта;
				
				Товары = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "Товары");
				СуммаДокумента = 0;
				//СуммаОплатыНаличными = 0;
				//СуммаОплатыБезналичными = 0;
				НомерСтрокиДокумента = 1;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
				Для Каждого ВыборкаТовара Из СтрокиОРП Цикл
					СтруктураПараметров.Вставить("СписатьКоличество", -ВыборкаТовара.Quantity);
					СуммаСтроки = ВыборкаТовара.TotalAmount;
					Цена = СуммаСтроки / -СтруктураПараметров.СписатьКоличество;
					Пока СтруктураПараметров.СписатьКоличество <> 0 Цикл
						НоваяСтрока = ОбъектXDTOПоИмениСвойства(Товары, "Строка");
						НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
						НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
						
						СтруктураПараметров.Вставить("ТоварСсылка", Неопределено);
						Если ТипВыгрузкиТовара = 0 Тогда
							СтруктураПараметров.Вставить("КодТовара", ВыборкаТовара.NAMEALIASID);
						ИначеЕсли ТипВыгрузкиТовара = 1 Тогда
							СтруктураПараметров.Вставить("КодТовара", ВыборкаТовара.MerExternalItemId);
						ИначеЕсли ТипВыгрузкиТовара = 2 Тогда
							СтруктураПараметров.Вставить("КодТовара", ВыборкаТовара.ItemId);
						КонецЕсли;
						СтруктураПараметров.Вставить("АльтКодТовара", "ITEM" + ВыборкаТовара.ItemId);
						СтруктураПараметров.Вставить("Наименование", ВыборкаТовара.NAME);
						СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовара.NAME+", артикул "+СокрЛП(ВыборкаТовара.NAMEALIASNAME)+", Производитель "+СокрЛП(ВыборкаТовара.TMName));
						СтруктураПараметров.Вставить("Артикул", ВыборкаТовара.NAMEALIASNAME);
						СтруктураПараметров.Вставить("АльтАртикул", ВыборкаТовара.OutId_1c);
						СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
						СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
						СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
						СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовара.ITEMRANGEROOT);
						СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовара.TMName);
						
						XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, СтруктураПараметров);
						НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
						
						ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
						НоваяСтрока.Количество = -СтруктураПараметров.СписанноеКоличество;
						НоваяСтрока.Сумма = Цена * НоваяСтрока.Количество;
						СуммаДокумента = СуммаДокумента + НоваяСтрока.Сумма;
						НоваяСтрока.Цена = Цена;
						СтавкаНДС = 18;
						НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
						СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
						НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
						НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
						
						Если ЗначениеЗаполнено(ВыборкаТовара.INVENTGTD) Тогда
							ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
							ДанныеГТД.НомерГТД = ВыборкаТовара.INVENTGTD;
							СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеОбъекты, ДанныеГТД, ВыборкаТовара.COUNTRYOFORIGINID, ВыборкаТовара.COUNTRY, ВыборкаТовара.COUNTRYNUMID_MRC);
							НоваяСтрока.ДанныеГТД = ДанныеГТД;
						КонецЕсли;
						Товары.Строка.Добавить(НоваяСтрока);
						НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
						//СуммаЧекаОплатыНаличными = ВыборкаТовара.PAY_CASH;
						//СуммаЧекаОплатыБезналичными = ВыборкаТовара.PAY_CARD;
						//Если НоваяСтрока.Сумма > СуммаЧекаОплатыНаличными + СуммаЧекаОплатыБезналичными Тогда
						//	Сообщить("По чеку возврата № " + ВыборкаТовара.DocNumber + " от " + Формат(ВыборкаДокумента.DOC_DATE, "ДЛФ=D") + " оплата не полная. Оплачено " +
						//	Формат(СуммаЧекаОплатыНаличными + СуммаЧекаОплатыБезналичными, "ЧДЦ=2; ЧН=0; ЧГ=0") + " из " + Формат(НоваяСтрока.Сумма, "ЧДЦ=2; ЧН=0; ЧГ=0"));
						//КонецЕсли;
						//СуммаОплатыНаличными = СуммаОплатыНаличными + СуммаЧекаОплатыНаличными;
						//СуммаОплатыБезналичными = СуммаОплатыБезналичными + СуммаЧекаОплатыБезналичными;
					КонецЦикла;
				КонецЦикла;
				
				XDTO_ВозвратТоваровОтПокупателя.Сумма = СуммаДокумента;
				XDTO_ВозвратТоваровОтПокупателя.СуммаВключаетНДС = Истина;
				
				XDTO_ВозвратТоваровОтПокупателя.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "Подразделение");
				XDTO_ВозвратТоваровОтПокупателя.Подразделение.Наименование = "Основное подразделение";
				XDTO_ВозвратТоваровОтПокупателя.Склад = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "Склад");
				XDTO_ВозвратТоваровОтПокупателя.Склад.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_STOCKID);
				XDTO_ВозвратТоваровОтПокупателя.Склад.Наименование = ВыборкаДокумента.DOC_STOCKNAME;
				XDTO_ВозвратТоваровОтПокупателя.Склад.ТипСклада = "Розничный";
				ВыгружаемыеОбъекты.Вставить("Склад_" + ВыборкаДокумента.DOC_STOCKID, XDTO_ВозвратТоваровОтПокупателя.Склад);
				Контрагент = ВыгрузитьКлючПоСтруктуре(XDTO_ВозвратТоваровОтПокупателя, РозничныйПокупатель, "Контрагент", XMLСхема);
				ВыгружаемыеОбъекты.Вставить("Контрагент_" + Контрагент.Наименование, Контрагент);
				ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "ДанныеВзаиморасчетов");
				СтруктураДоговора = Новый Структура;
				СтруктураДоговора.Вставить("Ссылка", "398442c9-3433-11e4-8afc-003084308a41");
				СтруктураДоговора.Вставить("ВидДоговора", "СПокупателем");
				СтруктураДоговора.Вставить("Организация", Организация);
				СтруктураДоговора.Вставить("Контрагент", Контрагент);
				СтруктураДоговора.Вставить("ВалютаВзаиморасчетов", Валюта);
				СтруктураДоговора.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
				СтруктураДоговора.Вставить("Наименование", "Основной договор");
				СтруктураДоговора.Вставить("Дата", Дата("20000101000000"));
				СтруктураДоговора.Вставить("Номер", "б/н");
				Договор = ВыгрузитьКлючПоСтруктуре(ДанныеВзаиморасчетов, СтруктураДоговора, "Договор", XMLСхема);
				ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
				ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
				ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
				ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
				XDTO_ВозвратТоваровОтПокупателя.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
				
				XDTO_ВозвратТоваровОтПокупателя.ДокументРеализации = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "ДокументРеализации");
				КлючевыеСвойстваОтчетОРозничныхПродажах = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "КлючевыеСвойстваОтчетОРозничныхПродажах"));
				КлючевыеСвойстваОтчетОРозничныхПродажах.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_PARENTID);
				КлючевыеСвойстваОтчетОРозничныхПродажах.Дата = Дата(ВыборкаДокумента.DOC_PARENTDATE);
				КлючевыеСвойстваОтчетОРозничныхПродажах.Номер = ВыборкаДокумента.DOC_PARENTID;
				КлючевыеСвойстваОтчетОРозничныхПродажах.Организация = Организация;
				XDTO_ВозвратТоваровОтПокупателя.ДокументРеализации.ОтчетОРозничныхПродажахСсылка = КлючевыеСвойстваОтчетОРозничныхПродажах;
				
				XDTO_ВозвратТоваровОтПокупателя.ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
				XDTO_ВозвратТоваровОтПокупателя.Комментарий = "";
				XDTO_ВозвратТоваровОтПокупателя.Налогообложение = "ПродажаОблагаетсяНДС";
				
				XDTO_ВозвратТоваровОтПокупателя.Товары = Товары;
				XDTO_ВозвратТоваровОтПокупателя.СпособПогашенияЗадолженности = "Автоматически";
				// 4. Записываем ОбъектXDTO в XML-файл.
				ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ВозвратТоваровОтПокупателя);
				
				СтруктураПоиска = Новый Структура("DOC_ID, POSTED", КодДокумента, Истина);
				СтрокиОплат = ТаблицаЧеков.НайтиСтроки(СтруктураПоиска);
				СуммаОплатыБезналичными = 0;
				СуммаОплатыНаличными = 0;
				Для Каждого СтрокаОплаты Из СтрокиОплат Цикл
					Если СтрокаОплаты.PAY_CARD > 0 Тогда
						СуммаОплатыБезналичными = СуммаОплатыБезналичными + СтрокаОплаты.PAY_CARD;
					Иначе
						СуммаОплатыНаличными = СуммаОплатыНаличными + СтрокаОплаты.PAY_CASH;
					КонецЕсли;
				КонецЦикла;
				
				Если СуммаОплатыБезналичными > 0 Тогда
					XDTO_ОперацияПоПлатежнойКарте = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ОперацияПоПлатежнойКарте"));
					XDTO_ОперацияПоПлатежнойКарте.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ОперацияПоПлатежнойКарте, "КлючевыеСвойства");
					XDTO_ОперацияПоПлатежнойКарте.КлючевыеСвойства.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_ID);
					XDTO_ОперацияПоПлатежнойКарте.КлючевыеСвойства.Дата = Дата(ВыборкаДокумента.DOC_DATE);
					XDTO_ОперацияПоПлатежнойКарте.КлючевыеСвойства.Номер = ВыборкаДокумента.DOC_ID;
					XDTO_ОперацияПоПлатежнойКарте.КлючевыеСвойства.Организация = Организация;
					XDTO_ОперацияПоПлатежнойКарте.ВидОперации = "ВозвратОплатыКлиентуНаПлатежнуюКарту";
					XDTO_ОперацияПоПлатежнойКарте.Валюта = Валюта;
					XDTO_ОперацияПоПлатежнойКарте.Подразделение = XDTO_ВозвратТоваровОтПокупателя.Подразделение;
					XDTO_ОперацияПоПлатежнойКарте.Контрагент = Контрагент;
					XDTO_ОперацияПоПлатежнойКарте.Эквайрер = XDTO_БанкЭквайрер;
					XDTO_ОперацияПоПлатежнойКарте.Сумма = СуммаОплатыБезналичными;
					XDTO_ОперацияПоПлатежнойКарте.НомерКарты = "1";
					XDTO_ОперацияПоПлатежнойКарте.НомерЧекаККМ = ВыборкаДокумента.ParentDocNumber;
					XDTO_ОперацияПоПлатежнойКарте.РасшифровкаПлатежа = ОбъектXDTOПоИмениСвойства(XDTO_ОперацияПоПлатежнойКарте, "РасшифровкаПлатежа");
					СтрокаРасшифровки = ОбъектXDTOПоИмениСвойства(XDTO_ОперацияПоПлатежнойКарте.РасшифровкаПлатежа, "Строка");
					СтрокаРасшифровки.Сумма = СуммаОплатыБезналичными;
					СтрокаРасшифровки.СуммаВзаиморасчетов = СуммаОплатыБезналичными;
					СтрокаРасшифровки.ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(СтрокаРасшифровки, "ДанныеВзаиморасчетов");
					СтрокаРасшифровки.ДанныеВзаиморасчетов.Договор = Договор;
					СтрокаРасшифровки.ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
					СтрокаРасшифровки.ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
					СтрокаРасшифровки.ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
					СтрокаРасшифровки.СпособПогашенияЗадолженности = "Автоматически";
					СоставнойДокументРасчетов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "СоставнойДокументРасчетов"));
					СоставнойДокументРасчетов.ВозвратТоваровОтПокупателяСсылка = XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства;
					СтрокаРасшифровки.ДокументРасчетов = СоставнойДокументРасчетов;
					XDTO_ОперацияПоПлатежнойКарте.РасшифровкаПлатежа.Строка.Добавить(СтрокаРасшифровки);
					// 4. Записываем ОбъектXDTO в XML-файл.
					ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ОперацияПоПлатежнойКарте);
				Иначе
					//Создаём возврат от покупателя с контрагентом ЧастноеЛицо
					//Создаём РКО, где получатель ЧастноеЛицо
					XDTO_РКОРасчетыСКонтрагентами = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.РКОРасчетыСКонтрагентами"));
					XDTO_РКОРасчетыСКонтрагентами.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_РКОРасчетыСКонтрагентами, "КлючевыеСвойства");
					XDTO_РКОРасчетыСКонтрагентами.КлючевыеСвойства.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_ID);
					XDTO_РКОРасчетыСКонтрагентами.КлючевыеСвойства.Дата = Дата(ВыборкаДокумента.DOC_DATE);
					XDTO_РКОРасчетыСКонтрагентами.КлючевыеСвойства.Номер = ВыборкаДокумента.DOC_ID;
					XDTO_РКОРасчетыСКонтрагентами.КлючевыеСвойства.Организация = Организация;
					XDTO_РКОРасчетыСКонтрагентами.ОбщиеДанные = ОбъектXDTOПоИмениСвойства(XDTO_РКОРасчетыСКонтрагентами, "ОбщиеДанные");
					XDTO_РКОРасчетыСКонтрагентами.ОбщиеДанные.Валюта = Валюта;
					XDTO_РКОРасчетыСКонтрагентами.ОбщиеДанные.Сумма = СуммаОплатыНаличными;
					XDTO_РКОРасчетыСКонтрагентами.ОбщиеДанные.Подразделение = XDTO_ВозвратТоваровОтПокупателя.Подразделение;
					XDTO_РКОРасчетыСКонтрагентами.Контрагент = Контрагент;
					XDTO_РКОРасчетыСКонтрагентами.ВидРасчетов = "СПокупателем";
					XDTO_РКОРасчетыСКонтрагентами.РасшифровкаПлатежа = ОбъектXDTOПоИмениСвойства(XDTO_РКОРасчетыСКонтрагентами, "РасшифровкаПлатежа");
					СтрокаРасшифровки = ОбъектXDTOПоИмениСвойства(XDTO_РКОРасчетыСКонтрагентами.РасшифровкаПлатежа, "Строка");
					СтрокаРасшифровки.Сумма = СуммаОплатыНаличными;
					СтрокаРасшифровки.СуммаВзаиморасчетов = СуммаОплатыНаличными;
					СтрокаРасшифровки.ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(СтрокаРасшифровки, "ДанныеВзаиморасчетов");
					СтрокаРасшифровки.ДанныеВзаиморасчетов.Договор = Договор;
					СтрокаРасшифровки.ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
					СтрокаРасшифровки.ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
					СтрокаРасшифровки.ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
					СтрокаРасшифровки.СпособПогашенияЗадолженности = "Автоматически";
					СоставнойДокументРасчетов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "СоставнойДокументРасчетов"));
					СоставнойДокументРасчетов.ВозвратТоваровОтПокупателяСсылка = XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства;
					СтрокаРасшифровки.ДокументРасчетов = СоставнойДокументРасчетов;
					XDTO_РКОРасчетыСКонтрагентами.РасшифровкаПлатежа.Строка.Добавить(СтрокаРасшифровки);
					// 4. Записываем ОбъектXDTO в XML-файл.
					ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_РКОРасчетыСКонтрагентами);
				КонецЕсли;
			ИначеЕсли ТипыЧековПредоплат.Получить(ВыборкаДокумента.DocType) <> Неопределено Тогда
				XDTO_ВозвратПодарочныхСертификатов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ВозвратПодарочныхСертификатов"));
				XDTO_ВозвратПодарочныхСертификатов.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратПодарочныхСертификатов, "КлючевыеСвойства");
				XDTO_ВозвратПодарочныхСертификатов.КлючевыеСвойства.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_ID);
				XDTO_ВозвратПодарочныхСертификатов.КлючевыеСвойства.Дата = Дата(ВыборкаДокумента.DOC_DATE);
				XDTO_ВозвратПодарочныхСертификатов.КлючевыеСвойства.Номер = ВыборкаДокумента.DOC_ID;
				
				Организация = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратПодарочныхСертификатов.КлючевыеСвойства, "Организация");
				//Организация.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_ORGID);
				Если Не ЗначениеЗаполнено(ВыборкаДокумента.DOC_ORGNAME) Тогда
					Возврат Ложь;
				КонецЕсли;
				Наименование = ВыборкаДокумента.DOC_ORGNAME;
				Организация.Наименование = Наименование;
				Организация.НаименованиеСокращенное = Наименование;
				Организация.НаименованиеПолное = Наименование;
				Организация.ИНН = ВыборкаДокумента.DOC_ORGINN;
				Организация.КПП = ВыборкаДокумента.DOC_ORGKPP;
				Организация.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
				XDTO_ВозвратПодарочныхСертификатов.КлючевыеСвойства.Организация = Организация;
				
				Валюта = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратПодарочныхСертификатов, "Валюта");
				Валюта.Код = "643";
				Валюта.Наименование = "руб.";
				XDTO_ВозвратПодарочныхСертификатов.Валюта = Валюта;
				
				ПодарочныеСертификаты = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратПодарочныхСертификатов, "ПодарочныеСертификаты");
				СуммаДокумента = 0;
				СуммаОплатыНаличными = 0;
				СуммаОплатыБезналичными = 0;
				НомерСтрокиДокумента = 1;
				Для Каждого ВыборкаТовара Из СтрокиОРП Цикл
					НоваяСтрока = ОбъектXDTOПоИмениСвойства(ПодарочныеСертификаты, "Строка");
					НоваяСтрока.Сумма = ВыборкаТовара.TotalAmount;
					СуммаДокумента = СуммаДокумента + НоваяСтрока.Сумма;
					ПодарочныеСертификаты.Строка.Добавить(НоваяСтрока);
					СуммаЧекаОплатыНаличными = ВыборкаТовара.PAY_CASH;
					СуммаЧекаОплатыБезналичными = ВыборкаТовара.PAY_CARD;
					Если НоваяСтрока.Сумма > СуммаЧекаОплатыНаличными + СуммаЧекаОплатыБезналичными Тогда
						Сообщить("По чеку № " + ВыборкаТовара.DocNumber + " от " + Формат(ВыборкаДокумента.DOC_DATE, "ДЛФ=D") + " оплата не полная. Оплачено " +
						Формат(СуммаЧекаОплатыНаличными + СуммаЧекаОплатыБезналичными, "ЧДЦ=2; ЧН=0; ЧГ=0") + " из " + Формат(НоваяСтрока.Сумма, "ЧДЦ=2; ЧН=0; ЧГ=0"));
					КонецЕсли;
					СуммаОплатыНаличными = СуммаОплатыНаличными + СуммаЧекаОплатыНаличными;
					СуммаОплатыБезналичными = СуммаОплатыБезналичными + СуммаЧекаОплатыБезналичными;
				КонецЦикла;
			
				XDTO_ВозвратПодарочныхСертификатов.Сумма = СуммаДокумента;
				XDTO_ВозвратПодарочныхСертификатов.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратПодарочныхСертификатов, "Подразделение");
				XDTO_ВозвратПодарочныхСертификатов.Подразделение.Наименование = "Основное подразделение";
				XDTO_ВозвратПодарочныхСертификатов.Склад = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратПодарочныхСертификатов, "Склад");
				XDTO_ВозвратПодарочныхСертификатов.Склад.Ссылка = ХэшMD5Простой(ВыборкаДокумента.DOC_STOCKID);
				XDTO_ВозвратПодарочныхСертификатов.Склад.Наименование = ВыборкаДокумента.DOC_STOCKNAME;
				XDTO_ВозвратПодарочныхСертификатов.Склад.ТипСклада = "Розничный";
				
				ВыгружаемыеОбъекты.Вставить("Склад_" + ВыборкаДокумента.DOC_STOCKID, XDTO_ВозвратПодарочныхСертификатов.Склад);
				Если СуммаОплатыБезналичными > 0 Тогда
					XDTO_ВозвратПодарочныхСертификатов.ОплатаПлатежнымиКартами = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратПодарочныхСертификатов, "ОплатаПлатежнымиКартами");
					НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратПодарочныхСертификатов.ОплатаПлатежнымиКартами, "Строка");
					НоваяСтрока.СуммаОплаты = СуммаОплатыБезналичными;
					НоваяСтрока.ВидКарты = "Платежная карта";
					НоваяСтрока.НомерКарты = "1";
					НоваяСтрока.Эквайрер = XDTO_БанкЭквайрер;
					
					//ПараметрыДоговора = Новый Структура;
					//ПараметрыДоговора.Вставить("Наименование", НСтр("ru='Договор эквайринга'"));
					//ПараметрыДоговора.Вставить("Организация", Организация);
					//ПараметрыДоговора.Вставить("Владелец", XDTO_БанкЭквайрер);
					//ПараметрыДоговора.Вставить("ВалютаВзаиморасчетов", Валюта);
					//ПараметрыДоговора.Вставить("ВидДоговора", "Прочее");
					//ДоговорЭквайринга = ВыгрузитьКлючПоСтруктуре(НоваяСтрока, ПараметрыДоговора, "ДоговорЭквайринга", XMLСхема);
					XDTO_ВозвратПодарочныхСертификатов.ОплатаПлатежнымиКартами.Строка.Добавить(НоваяСтрока);
				КонецЕсли;
				ВыгружаемыеОбъекты.Вставить("Контрагент_" + XDTO_БанкЭквайрер.Наименование, XDTO_БанкЭквайрер);
				Если ПодарочныеСертификаты.Строка.Количество() > 0 Тогда
					XDTO_ВозвратПодарочныхСертификатов.ПодарочныеСертификаты = ПодарочныеСертификаты;
				КонецЕсли;
				// 4. Записываем ОбъектXDTO в XML-файл.
				ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ВозвратПодарочныхСертификатов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьРеализацию(ФайлОбмена, XMLСхема, Соединение, КодДокумента, ВыгружаемыеТовары, ТабАртикулов)
	СтрЗапросаРеализации = "SELECT
	|	InvoiceJour.MEREXTERNALLOGISTICID + '/' + InvoiceJour.INVOICEID AS DOC_ID,
	|	InvoiceJour.MEREXTERNALLOGISTICID AS DOC_PARENTID,
	|	InvoiceJour.INVOICEID AS DOC_NUMID,
	|	InvoiceJour.ParmID AS DOC_ParmID,
	|	dateadd(second, InvoiceJour.CREATEDTIME, InvoiceJour.InvoiceDate) AS DOC_DATE,
	|	InvoiceJour.MEREXTERNALJURIDICALPERSONFROM AS DOC_ORGID,
	|	FromCustomers.Name AS DOC_ORGNAME,
	|	FromCustomers.CODE_INN_JUR AS DOC_ORGINN,
	|	FromCustomers.KPP_RU AS DOC_ORGKPP,
	|	InvoiceJour.MEREXTERNALJURIDICALPERSONTO AS DOC_CONTRACTORID,
	|	ToCustomers.Name AS DOC_CONTRACTORNAME,
	|	ToCustomers.CODE_INN_JUR AS DOC_CONTRACTORINN,
	|	ToCustomers.KPP_RU AS DOC_CONTRACTORKPP,
	|	InvoiceJour.RCONTRACTACCOUNT AS DOC_CONTRACTID,
	|	InvoiceJour.RCONTRACTACCOUNT AS DOC_CONTRACTNUM,
	|	RContractTable.RCONTRACTNUMBER AS DOC_CONTRACTNAME,
	|	RContractTable.CONTRACTDATE AS DOC_CONTRACTDATE,
	|	RContractTable.CURRENCYCODE AS DOC_CONTRACTDESC,
	|	'RUR' AS DOC_CUR,
	|	InvoiceJour.DESCRIPTION AS DOC_DESCR
	|FROM
	|	dbo.MerExternalInvoiceJour AS InvoiceJour
	|LEFT JOIN
	|	dbo.CustTable AS FromCustomers
	|	ON InvoiceJour.MEREXTERNALJURIDICALPERSONFROM = FromCustomers.AccountNum
	|LEFT JOIN
	|	dbo.CustTable AS ToCustomers
	|	ON InvoiceJour.MEREXTERNALJURIDICALPERSONTO = ToCustomers.AccountNum
	|LEFT JOIN
	|	dbo.RCONTRACTTABLE AS RContractTable
	|	ON RContractTable.RCONTRACTPARTNERTYPE = 0 AND
	|	InvoiceJour.RCONTRACTACCOUNT = RContractTable.RCONTRACTACCOUNT AND 
	|   InvoiceJour.MEREXTERNALJURIDICALPERSONTO = RContractTable.RCONTRACTPARTNERCODE
	|WHERE (InvoiceJour.POSTED = 1)
	|	AND (InvoiceJour.MEREXTERNALINVOICEPROCESSTYPE = 1)
	|	AND (InvoiceJour.MEREXTERNALLOGISTICID + '/' + InvoiceJour.InvoiceID = ?)";
	СтрЗапросаРеализацииТЧ = "SELECT
	|	InvoiceLines.MEREXTERNALLOGISTICID AS DOC_ID,
	|(CASE
	|	WHEN M.NAMEALIASID = '' AND NAMEALIASTABLE.NAMEALIASID IS NOT NULL THEN NAMEALIASTABLE.NAMEALIASID
	|	WHEN M.NAMEALIASID = '' AND NAMEALIASTABLE.NAMEALIASID IS NULL THEN InvoiceLines.MEREXTERNALITEMID
	|	ELSE M.NAMEALIASID
	|END) AS NAMEALIASID,
	|	InvoiceLines.NAMEALIASLOGISTICID AS NAMEALIASID,
	|	InvoiceLines.MEREXTERNALITEMID AS MEREXTERNALITEMID,
	|	InvoiceLines.NAME AS NAME,
	|	InvoiceLines.NAMEALIASLOGIST AS NAMEALIASNAME,
	|	InvoiceLines.QTY,
	|	InvoiceLines.TAXVALUE AS TAXVALUEVAT,
	|	InvoiceLines.PRICEAMOUNT,
	|	InvoiceLines.LINEPRICEAMOUNT,
	|	InvoiceLines.LINEPRICEAMOUNTOUTNDS,
	|	InvoiceLines.MERINVENTGTD AS INVENTGTD,
	|	M.ITEMRANGEROOT AS ITEMRANGEROOT,
	|	CR.NAME AS COUNTRY,
	|	CR.COUNTRYNUMID_MRC,
	|	InvoiceLines.COUNTRYID AS COUNTRYOFORIGINID,
	|	InvoiceLines.ITEMRANGENAME AS TMName
	|FROM
	|	dbo.MerExternalInvoiceTrans AS InvoiceLines
	|LEFT OUTER JOIN
	|	dbo.ADDRESSCOUNTRYREGION AS CR
	|	ON (CASE WHEN (InvoiceLines.COUNTRYID = '') THEN 'CHE'
	|	ELSE InvoiceLines.COUNTRYID END) = CR.COUNTRYREGIONID
	|left outer join
	|	dbo.MEREXTERNALLOGISTICLINESP50195 AS M
	|	on M.MEREXTERNALLOGISTICID = InvoiceLines.MEREXTERNALLOGISTICID
	|	and (M.MEREXTERNALITEMID = InvoiceLines.MEREXTERNALITEMID)
	|left outer join
	|	MERNAMEALIASTABLE AS NAMEALIASTABLE on M.NameAliasLogist = NAMEALIASTABLE.NAMEALIAS AND
	|	M.ITEMRANGEROOT = NAMEALIASTABLE.ITEMRANGEROOT AND
	|	((NAMEALIASTABLE.NAME LIKE '%' + M.Name + '%')
	|	OR (M.Name LIKE '%' + NAMEALIASTABLE.NAME + '%')
	|	OR (M.Name LIKE '%ремень%' AND NAMEALIASTABLE.NAME LIKE '%ремешок%'))
	|WHERE
	|	(InvoiceLines.MEREXTERNALLOGISTICID + '/' + InvoiceLines.InvoiceID = ?)
	|	AND (InvoiceLines.ParmID = ?)";
	
	Recordset = ВыполнитьЗапросADO(Соединение,СтрЗапросаРеализации, КодДокумента);
	Если Recordset.EOF() = Ложь Тогда
		XDTO_РеализацияТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.РеализацияТоваровУслуг"));
		//XDTO_СчетФактураПолученный = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.СчетФактураПолученный"));
		
		XDTO_РеализацияТоваровУслуг.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "КлючевыеСвойства");
		XDTO_РеализацияТоваровУслуг.КлючевыеСвойства.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_ID").Value);
		XDTO_РеализацияТоваровУслуг.КлючевыеСвойства.Дата = Дата(RecordSet.Fields("DOC_DATE").Value);
		XDTO_РеализацияТоваровУслуг.КлючевыеСвойства.Номер = СократитьНомер(RecordSet.Fields("DOC_PARENTID").Value) + "/" + RecordSet.Fields("DOC_NUMID").Value;
		Организация = ВыгрузитьКлючОрганизацию(XDTO_РеализацияТоваровУслуг.КлючевыеСвойства, RecordSet);
		
		XDTO_РеализацияТоваровУслуг.ВидОперации = "РеализацияКлиенту";
		Валюта = ВыгрузитьКлючВалюты(XDTO_РеализацияТоваровУслуг, RecordSet);
		//XDTO_РеализацияТоваровУслуг.Сумма = СуммаДокумента;
		XDTO_РеализацияТоваровУслуг.СуммаВключаетНДС = Истина;
		XDTO_РеализацияТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Подразделение");
		XDTO_РеализацияТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
		
		Контрагент = ВыгрузитьКлючКонтрагента(XDTO_РеализацияТоваровУслуг, RecordSet);
		
		ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "ДанныеВзаиморасчетов");
		Договор = ВыгрузитьКлючДоговора(ДанныеВзаиморасчетов, RecordSet, Организация, Контрагент, Валюта, "СКомиссионером");
		
		ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
		
		ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
		ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
		ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
		XDTO_РеализацияТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
		
		XDTO_РеализацияТоваровУслуг.Грузополучатель = Контрагент;
		XDTO_РеализацияТоваровУслуг.Комментарий = RecordSet.Fields("DOC_DESCR").Value;
		XDTO_РеализацияТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
		
		//Табличная часть
		КодИнвойса = RecordSet.Fields("DOC_NUMID").Value;
		КодПараметра = RecordSet.Fields("DOC_ParmID").Value;
		RecordsetTable = ВыполнитьЗапросADO(Соединение,СтрЗапросаРеализацииТЧ, КодДокумента, КодПараметра);
		XDTO_РеализацияТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Товары");
		НомерСтрокиДокумента = 1;
		Пока RecordsetTable.EOF() = Ложь Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг.Товары, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
			НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("КодГруппы", RecordsetTable.Fields("ITEMRANGEROOT").Value);
			СтруктураПараметров.Вставить("НаименованиеГруппы", RecordsetTable.Fields("TMName").Value);
			Номенклатура = ВыгрузитьКлючНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, НоваяСтрока.ДанныеНоменклатуры, RecordsetTable, СтруктураПараметров);
			
			ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
			
			НоваяСтрока.Количество = RecordsetTable.Fields("qty").Value;
			НоваяСтрока.Сумма = RecordsetTable.Fields("LINEPRICEAMOUNT").Value;
			НоваяСтрока.Цена = RecordsetTable.Fields("PRICEAMOUNT").Value;
			НоваяСтрока.СтавкаНДС = "НДС" + Формат(RecordsetTable.Fields("TAXVALUEVAT").Value, "ЧДЦ=; ЧН=0; ЧГ=0");
			СуммаБезНДС = RecordsetTable.Fields("LINEPRICEAMOUNTOUTNDS").Value;
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
			НоваяСтрока.ТипЗапасов = "СобственныеТовары";
			
			ВыгрузитьКлючГТД(XMLСхема, НоваяСтрока, RecordsetTable, ВыгружаемыеТовары);
			
			XDTO_РеализацияТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
			RecordsetTable.MoveNext();
			НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
		КонецЦикла;
		RecordsetTable.Close();
		
		
		XDTO_РеализацияТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_РеализацияТоваровУслуг);
	КонецЕсли;
	Recordset.Close();
	Возврат Истина;
КонецФункции

Функция ВыгрузитьДистрибуцию(ФайлОбмена, XMLСхема, Соединение, КодДокумента, ВыгружаемыеОбъекты, ТабАртикулов)
	СтрЗапросаРеализации = "SELECT
	|	DISTRIB_TABLE.RETAILCASHREPORTID AS DOC_ID,
	|	dateadd(second, DISTRIB_TABLE.CREATEDTIME, DISTRIB_TABLE.TRANSDATE) AS DOC_DATE,
	|	DISTRIB_TABLE.JURIDICALPERSON_SUPPLYER AS DOC_ORGID,
	|	JURIDICALPERSON.FULLNAME AS DOC_ORGNAME,
	|	JURIDICALPERSON.INN AS DOC_ORGINN,
	|	JURIDICALPERSON.KPP AS DOC_ORGKPP,
	|	'RUR' AS DOC_CUR,
	|	(CASE WHEN DISTRIB_TABLE.MERRETAILCASHREPORTTYPE = 1 THEN 'ВозвратДистриб' ELSE 'ПродажаДистриб' END) AS DOC_TYPE,
	|	DISTRIB_TABLE.NUMINVOICE AS DOC_NUMBER,
	|	DISTRIB_TABLE.DESCRIPTION AS DOC_DESCR,
	|	DISTRIB_TABLE.SALESAMOUNTCUR AS DOC_SUM,
	|	DISTRIB_TABLE.CUSTACCOUNT AS DOC_CONTRACTORID,
	|	ToCustomers.Name AS DOC_CONTRACTORNAME,
	|	ToCustomers.CODE_INN_JUR AS DOC_CONTRACTORINN,
	|	ToCustomers.KPP_RU AS DOC_CONTRACTORKPP,
	|	DISTRIB_TABLE.DATEPAYMENT AS DOC_DATEPAYMENT,
	|	DISTRIB_TABLE.RCONTRACTACCOUNT AS DOC_CONTRACTID,
	|	RContractTable.RCONTRACTNUMBER AS DOC_CONTRACTNUM,
	|	RContractTable.RCONTRACTNUMBER AS DOC_CONTRACTNAME,
	|	RContractTable.CONTRACTDATE AS DOC_CONTRACTDATE,
	|	RContractTable.CURRENCYCODE AS DOC_CONTRACTDESC,
	|	DISTRIB_TABLE.INVENTLOCATIONID AS DOC_STOCKID,
	|	INVENTLOCATION.NAME AS DOC_STOCKNAME,
	|	DISTRIB_TABLE.INVENTLOCATIONID AS DOC_BRANCHID,
	|	INVENTLOCATION.NAME AS DOC_BRANCHNAME,
	|	DISTRIB_TABLE.SALESIDBASERETAIL AS DOC_PARENTID,
	|	dateadd(second, SalesTab.CREATEDTIME, SalesTab.TRANSDATE) AS DOC_PARENTDATE,
	|	SalesTab.NUMINVOICE AS DOC_PARENTNUMBER
	|FROM dbo.MERRETAILCASHREPORTTABLE_50157 AS DISTRIB_TABLE
	|INNER JOIN
	|	dbo.INVENTLOCATION AS INVENTLOCATION ON DISTRIB_TABLE.INVENTLOCATIONID = INVENTLOCATION.INVENTLOCATIONID
	|LEFT JOIN 
	|	dbo.MERRETAILCASHREPORTTABLE_50157 AS SalesTab ON DISTRIB_TABLE.SALESIDBASERETAIL = SalesTab.RETAILCASHREPORTID AND DISTRIB_TABLE.MERRETAILCASHREPORTTYPE = 1 --AND SalesTab.MERRETAILCASHREPORTTYPE = 0
	|LEFT JOIN
	|	dbo.CustTable AS ToCustomers
	|	ON DISTRIB_TABLE.CUSTACCOUNT = ToCustomers.AccountNum
	|LEFT JOIN
	|	dbo.RCONTRACTTABLE AS RContractTable
	|	ON RContractTable.RCONTRACTPARTNERTYPE = 0 AND
	|	DISTRIB_TABLE.RCONTRACTACCOUNT = RContractTable.RCONTRACTACCOUNT AND 
	|	DISTRIB_TABLE.CUSTACCOUNT = RContractTable.RCONTRACTPARTNERCODE
	|LEFT JOIN 
	|	#OwnClientTable AS JURIDICALPERSON ON DISTRIB_TABLE.JURIDICALPERSON_SUPPLYER = JURIDICALPERSON.MERJURIDICALPERSONID
	|WHERE
	|	DISTRIB_TABLE.SALESAMOUNTCUR != 0 AND
	|	(DISTRIB_TABLE.MERSALESDISTRIBUTIONSTATUS = 1 OR
	|	DISTRIB_TABLE.MERSALESDISTRIBUTIONSTATUS = 2 OR
	|	DISTRIB_TABLE.MERSALESDISTRIBUTIONSTATUS = 5)
	|	AND (DISTRIB_TABLE.RETAILCASHREPORTID = ?)";
	СтрЗапросаРеализацииТЧ = "SELECT
	|	CASE WHEN InventTables.ITEMNAME = '' THEN inventItemRange.NAME ELSE InventTables.ITEMNAME END AS NAME,
	|	InventTables.NAMEALIAS AS NAMEALIASNAME,
	|	CashReportsLine.ItemId,
	|	CASE WHEN MEL.MerExternalItemIdSpecification IS NULL AND MOTS.OrderTransId IS NOT NULL THEN MOTS.OrderTransId
	|	WHEN MEL.MerExternalItemIdSpecification IS NULL AND MOTS.OrderTransId IS NULL THEN 'ITEM' + CashReportsLine.ItemId
	|	WHEN MEL.MerExternalItemIdSpecification = '' THEN MEL.MerExternalItemId
	|	ELSE MEL.MerExternalItemIdSpecification END AS MerExternalItemId,
	|	InventTables.OutId_1c,
	|	InventTables.NAMEALIASID,
	|	InventTables.ITEMRANGEROOT,
	|	CashReportsLine.QTY,
	|	CashReportsLine.SALESAMOUNTCUR,
	|	CASE WHEN INVENTGTDSETTLEMENT_MRC.GTD IS NULL OR INVENTGTDSETTLEMENT_MRC.GTD = '' THEN
	|		CASE WHEN MERINVENTTABLEFEATURE.MerInventGTDFull = '' THEN MERINVENTTABLEFEATURE.MerInventGTD + (CASE WHEN charindex('/', RIGHT(MERINVENTTABLEFEATURE.MerInventGTD, 4)) > 0 THEN '' ELSE '/1' END) ELSE MERINVENTTABLEFEATURE.MerInventGTDFull END
	|		ELSE INVENTGTDSETTLEMENT_MRC.GTD
	|	END AS INVENTGTD,
	|	CASE
	|		WHEN M.CountryId IS NOT NULL AND M.CountryId != '' THEN M.CountryId
	|		WHEN MGTD.CountryId IS NOT NULL AND MGTD.CountryId != '' THEN MGTD.CountryId
	|		WHEN inventItemGroup.CountryId IS NOT NULL AND inventItemGroup.CountryId != '' THEN inventItemGroup.CountryId
	|		ELSE inventItemRange.CountryId
	|	END AS COUNTRYOFORIGINID,
	|	CR.Name as Country, 
	|	CR.COUNTRYNUMID_MRC as COUNTRYNUMID_MRC,
	|	inventItemRange.NAME AS TMName
	|FROM
	|	dbo.MERRETAILCASHREPORTLINE_D50158 AS CashReportsLine
	|LEFT JOIN
	|	dbo.INVENTTABLE AS InventTables
	|	ON CashReportsLine.ITEMID = InventTables.ITEMID
	|LEFT JOIN
	|	(SELECT
	|		MOOLI.ItemId,
	|		MEL.MerExternalItemIdSpecification,
	|		MEL.MerExternalItemId
	|	FROM
	|		MerOpenOrderLineItem AS MOOLI
	|	INNER JOIN
	|		MerOrderTrans AS MOT
	|		ON MOOLI.ReasonMerinventTransId = MOT.OrderTransId
	|	INNER JOIN
	|		MerOrderTrans AS MOTS
	|		ON MOT.OrderTransBatchBase = MOTS.OrderTransBatch
	|	INNER JOIN
	|		MEREXTERNALLOGISTICLINE AS MEL
	|		ON MOTS.OrderTransId = MEL.InventTransId
	|	) AS MEL
	|	ON CashReportsLine.ItemId = MEL.ItemId
	|LEFT JOIN
	|	(SELECT
	|		MOOLI.ItemId,
	|		MOTS.OrderTransId
	|	FROM
	|		MerOpenOrderLineItem AS MOOLI
	|	INNER JOIN
	|		MerOrderTrans AS MOT
	|		ON MOOLI.ReasonMerinventTransId = MOT.OrderTransId
	|	INNER JOIN
	|		MerOrderTrans AS MOTS
	|		ON MOT.OrderTransBatchBase = MOTS.OrderTransBatch
	|	LEFT JOIN
	|		MEREXTERNALLOGISTICLINE AS MEL
	|		ON MOTS.OrderTransId = MEL.InventTransId
	|	WHERE
	|		MEL.InventTransId IS NULL
	|	) AS MOTS
	|	ON CashReportsLine.ItemId = MOTS.ItemId
	|LEFT JOIN
	|	dbo.MERNAMEALIASTABLE AS AliasTables
	|	ON InventTables.NAMEALIASID = AliasTables.NAMEALIASID
	|LEFT JOIN
	|	dbo.MERINVENTTABLEFEATURE AS MERINVENTTABLEFEATURE
	|	ON CashReportsLine.ITEMID = MERINVENTTABLEFEATURE.ITEMID
	|LEFT JOIN
	|	dbo.INVENTGTDSETTLEMENT_MRC AS INVENTGTDSETTLEMENT_MRC
	|	ON CashReportsLine.ITEMID = INVENTGTDSETTLEMENT_MRC.ITEMID
	|LEFT JOIN
	|	dbo.MEREXTERNALLOGISTICLINE AS M
	|	ON INVENTGTDSETTLEMENT_MRC.LINEITEMREFTABLEID = 0 AND INVENTGTDSETTLEMENT_MRC.LOGLINEREFRECID = M.RECID
	|LEFT JOIN
	|	(SELECT DISTINCT
	|		MT.MERINVENTGTD,
	|		ML.NAMEALIASID,
	|		MAX(ML.COUNTRYID) AS COUNTRYID
	|	FROM dbo.MEREXTERNALLOGISTICTABLE AS MT
	|	INNER JOIN
	|		dbo.MEREXTERNALLOGISTICLINE AS ML ON MT.MEREXTERNALLOGISTICID = ML.MEREXTERNALLOGISTICID
	|	GROUP BY
	|		MT.MERINVENTGTD,
	|		ML.NAMEALIASID
	|	UNION
	|	SELECT DISTINCT
	|		MT.INVENTGTD,
	|		MT.NAMEALIASID,
	|		MAX(MT.COUNTRYOFORIGINID) AS COUNTRYID
	|	FROM dbo.MEROPENORDERLINE AS MT
	|	GROUP BY
	|		MT.INVENTGTD,
	|		MT.NAMEALIASID) AS MGTD
	|	ON (SUBSTRING(INVENTGTDSETTLEMENT_MRC.GTD,1,23) = MGTD.MERINVENTGTD OR
	|	MERINVENTTABLEFEATURE.MerInventGTD = MGTD.MERINVENTGTD)
	|	AND InventTables.NAMEALIASID = MGTD.NAMEALIASID
	|LEFT JOIN
	|	dbo.inventItemRange AS inventItemRange
	|	ON InventTables.ITEMRANGEROOT = inventItemRange.RANGEID
	|LEFT JOIN
	|	dbo.inventItemRange AS inventItemGroup
	|	ON InventTables.ITEMRANGEID = inventItemGroup.RANGEID
	|LEFT OUTER JOIN
	|	dbo.ADDRESSCOUNTRYREGION AS CR
	|	ON (CASE
	|		WHEN M.CountryId IS NOT NULL AND M.CountryId != '' THEN M.CountryId
	|		WHEN MGTD.CountryId IS NOT NULL AND MGTD.CountryId != '' THEN MGTD.CountryId
	|		WHEN inventItemGroup.CountryId IS NOT NULL AND inventItemGroup.CountryId != '' THEN inventItemGroup.CountryId
	|		ELSE inventItemRange.CountryId
	|	END) = CR.COUNTRYREGIONID
	|WHERE
	|	(CashReportsLine.RETAILCASHREPORTID = ?)";
	
	Recordset = ВыполнитьЗапросADO(Соединение,СтрЗапросаРеализации, КодДокумента);
	Если Recordset.EOF() = Ложь Тогда
		ТипДокумента = RecordSet.Fields("DOC_TYPE").Value;
		Если ТипДокумента = "ПродажаДистриб" Тогда
			XDTO_РеализацияТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.РеализацияТоваровУслуг"));
			XDTO_СчетФактураВыданный = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.СчетФактураВыданный"));
			
			XDTO_РеализацияТоваровУслуг.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "КлючевыеСвойства");
			XDTO_РеализацияТоваровУслуг.КлючевыеСвойства.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_ID").Value);
			XDTO_РеализацияТоваровУслуг.КлючевыеСвойства.Дата = Дата(RecordSet.Fields("DOC_DATE").Value);
			НомерДокумента = RecordSet.Fields("DOC_NUMBER").Value;
			Если Не ЗначениеЗаполнено(НомерДокумента) Тогда
				НомерДокумента = RecordSet.Fields("DOC_ID").Value;
			КонецЕсли;
			XDTO_РеализацияТоваровУслуг.КлючевыеСвойства.Номер = НомерДокумента;
			Организация = ВыгрузитьКлючОрганизацию(XDTO_РеализацияТоваровУслуг.КлючевыеСвойства, RecordSet);
			
			XDTO_РеализацияТоваровУслуг.ВидОперации = "РеализацияКлиенту";
			Валюта = ВыгрузитьКлючВалюты(XDTO_РеализацияТоваровУслуг, RecordSet);
			XDTO_РеализацияТоваровУслуг.Сумма = RecordSet.Fields("DOC_SUM").Value;
			XDTO_РеализацияТоваровУслуг.СуммаВключаетНДС = Истина;
			XDTO_РеализацияТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Подразделение");
			XDTO_РеализацияТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
			Склад = ВыгрузитьКлючСклада(XDTO_РеализацияТоваровУслуг, RecordSet, "Оптовый");
			ВыгружаемыеОбъекты.Вставить("Склад_" + RecordSet.Fields("DOC_STOCKID").Value, Склад);
			Контрагент = ВыгрузитьКлючКонтрагента(XDTO_РеализацияТоваровУслуг, RecordSet);
			ВыгружаемыеОбъекты.Вставить("Контрагент_" + RecordSet.Fields("DOC_CONTRACTORID").Value, Контрагент);
			
			ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "ДанныеВзаиморасчетов");
			Договор = ВыгрузитьКлючДоговора(ДанныеВзаиморасчетов, RecordSet, Организация, Контрагент, Валюта, "СПокупателем");
			
			ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
			
			ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
			ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
			ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
			XDTO_РеализацияТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
			
			XDTO_РеализацияТоваровУслуг.Грузополучатель = Контрагент;
			XDTO_РеализацияТоваровУслуг.Комментарий = RecordSet.Fields("DOC_DESCR").Value;
			XDTO_РеализацияТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
			
			//Табличная часть
			RecordsetTable = ВыполнитьЗапросADO(Соединение,СтрЗапросаРеализацииТЧ, КодДокумента);
			XDTO_РеализацияТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Товары");
			СтавкаНДС = 18;
			НомерСтрокиДокумента = 1;
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
			Пока RecordsetTable.EOF() = Ложь Цикл
				СтруктураПараметров.Вставить("СписатьКоличество", RecordsetTable.Fields("qty").Value);
				Сумма = RecordsetTable.Fields("SALESAMOUNTCUR").Value;
				Цена = Сумма / СтруктураПараметров.СписатьКоличество;
				Пока СтруктураПараметров.СписатьКоличество > 0 Цикл
					НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг.Товары, "Строка");
					НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
					НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
					
					СтруктураПараметров.Вставить("КодГруппы", RecordsetTable.Fields("ITEMRANGEROOT").Value);
					СтруктураПараметров.Вставить("НаименованиеГруппы", RecordsetTable.Fields("TMName").Value);
					Номенклатура = ВыгрузитьКлючНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, НоваяСтрока.ДанныеНоменклатуры, RecordsetTable, СтруктураПараметров);
					
					ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
					НоваяСтрока.Количество = СтруктураПараметров.СписанноеКоличество;
					НоваяСтрока.Сумма = Цена * СтруктураПараметров.СписанноеКоличество;
					НоваяСтрока.Цена = Цена;
					НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
					СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
					НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
					НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
					
					ВыгрузитьКлючГТД(XMLСхема, НоваяСтрока, RecordsetTable, ВыгружаемыеОбъекты);
					
					XDTO_РеализацияТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
					НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
				КонецЦикла;
				RecordsetTable.MoveNext();
			КонецЦикла;
			RecordsetTable.Close();
			XDTO_РеализацияТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
			
			XDTO_СчетФактураВыданный.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураВыданный, "КлючевыеСвойства");
			XDTO_СчетФактураВыданный.КлючевыеСвойства.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_ID").Value);
			XDTO_СчетФактураВыданный.КлючевыеСвойства.Номер = RecordSet.Fields("DOC_NUMBER").Value;
			XDTO_СчетФактураВыданный.КлючевыеСвойства.Дата = RecordSet.Fields("DOC_DATE").Value;
			//XDTO_СчетФактураВыданный.КлючевыеСвойства.НомерИсправления = RecordSet.Fields("DOC_NUMBER").Value;
			//XDTO_СчетФактураВыданный.КлючевыеСвойства.ДатаИсправления = RecordSet.Fields("DOC_DATE").Value;
			XDTO_СчетФактураВыданный.КлючевыеСвойства.Организация = Организация;
			XDTO_СчетФактураВыданный.Валюта = Валюта;
			XDTO_СчетФактураВыданный.Сумма = RecordSet.Fields("DOC_SUM").Value;
			XDTO_СчетФактураВыданный.Комментарий = RecordSet.Fields("DOC_DESCR").Value;
			XDTO_СчетФактураВыданный.Контрагент = Контрагент;
			XDTO_СчетФактураВыданный.Договор = Договор;
			XDTO_СчетФактураВыданный.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
			СуммаБезНДС = 100 * XDTO_СчетФактураВыданный.Сумма / (100 + СтавкаНДС);
			XDTO_СчетФактураВыданный.СуммаНДС = Окр(XDTO_СчетФактураВыданный.Сумма - СуммаБезНДС, 2);
			XDTO_СчетФактураВыданный.ВидСчетаФактуры = "НаРеализацию";
			XDTO_СчетФактураВыданный.КодВидаОперации = "01";
			XDTO_СчетФактураВыданный.Выставлен = Истина;
			XDTO_СчетФактураВыданный.ДатаВыставления = RecordSet.Fields("DOC_DATE").Value;
			XDTO_СчетФактураВыданный.СпособВыставления = "ВЭлектронномВиде";
			XDTO_СчетФактураВыданный.ДокументыОснования = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураВыданный, "ДокументыОснования");
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураВыданный.ДокументыОснования, "Строка");
			СоставнойДокументРасчетов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "СоставнойДокументРасчетов"));
			СоставнойДокументРасчетов.РеализацияТоваровУслугСсылка = XDTO_РеализацияТоваровУслуг.КлючевыеСвойства;
			НоваяСтрока.ДокументОснование = СоставнойДокументРасчетов;
			XDTO_СчетФактураВыданный.ДокументыОснования.Строка.Добавить(НоваяСтрока);
			
			// 4. Записываем ОбъектXDTO в XML-файл.
			ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_РеализацияТоваровУслуг);
			ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_СчетФактураВыданный);
		ИначеЕсли ТипДокумента = "ВозвратДистриб" Тогда
			ДатаДокумента = Дата(RecordSet.Fields("DOC_DATE").Value);
			Если ДатаДокумента < Дата("20160801") Тогда
				XDTO_ПоступлениеТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ПоступлениеТоваровУслуг"));
				XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "КлючевыеСвойства");
				XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_ID").Value);
				XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства.Дата = Дата(RecordSet.Fields("DOC_DATE").Value);
				НомерДокумента = RecordSet.Fields("DOC_NUMBER").Value;
				Если Не ЗначениеЗаполнено(НомерДокумента) Тогда
					НомерДокумента = RecordSet.Fields("DOC_ID").Value;
				КонецЕсли;
				XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства.Номер = НомерДокумента;
				Организация = ВыгрузитьКлючОрганизацию(XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства, RecordSet);
				
				ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВходящегоДокумента");
				ДанныеВходящегоДокумента.НомерВходящегоДокумента = RecordSet.Fields("DOC_PARENTID").Value;
				ДанныеВходящегоДокумента.ДатаВходящегоДокумента = RecordSet.Fields("DOC_PARENTDATE").Value;
				ДанныеВходящегоДокумента.НаименованиеВходящегоДокумента = "РеализацияТоваровУслуг";
				XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента = ДанныеВходящегоДокумента;
				
				XDTO_ПоступлениеТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Товары");
				НомерСтрокиДокумента = 1;
				СтавкаНДС = 18;
				RecordsetTable = ВыполнитьЗапросADO(Соединение,СтрЗапросаРеализацииТЧ, КодДокумента);
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
				Пока RecordsetTable.EOF() = Ложь Цикл
					СтруктураПараметров.Вставить("СписатьКоличество", RecordsetTable.Fields("qty").Value);
					Сумма = RecordsetTable.Fields("SALESAMOUNTCUR").Value;
					Цена = Сумма / (-1 * СтруктураПараметров.СписатьКоличество);
					Пока СтруктураПараметров.СписатьКоличество <> 0 Цикл
						НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг.Товары, "Строка");
						НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
						НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
						
						СтруктураПараметров.Вставить("КодГруппы", RecordsetTable.Fields("ITEMRANGEROOT").Value);
						СтруктураПараметров.Вставить("НаименованиеГруппы", RecordsetTable.Fields("TMName").Value);
						Номенклатура = ВыгрузитьКлючНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, НоваяСтрока.ДанныеНоменклатуры, RecordsetTable, СтруктураПараметров);
						
						ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
						НоваяСтрока.Количество = -СтруктураПараметров.СписанноеКоличество;
						НоваяСтрока.Сумма = -СтруктураПараметров.СписанноеКоличество * Цена;
						НоваяСтрока.Цена = Цена;
						НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
						СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
						НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
						НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
						ВыгрузитьКлючГТД(XMLСхема, НоваяСтрока, RecordsetTable, ВыгружаемыеОбъекты);
						XDTO_ПоступлениеТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
						НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
					КонецЦикла;
					RecordsetTable.MoveNext();
				КонецЦикла;
				
				Валюта = ВыгрузитьКлючВалюты(XDTO_ПоступлениеТоваровУслуг, RecordSet);
				XDTO_ПоступлениеТоваровУслуг.ВидОперации = "ПриемНаКомиссию";
				
				//СуммаДокумента = RecordSet.Fields("DOC_SUM").Value;
				//XDTO_ПоступлениеТоваровУслуг.Сумма = СуммаДокумента;
				XDTO_ПоступлениеТоваровУслуг.СуммаВключаетНДС = Истина;
				XDTO_ПоступлениеТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Подразделение");
				XDTO_ПоступлениеТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
				Склад = ВыгрузитьКлючСклада(XDTO_ПоступлениеТоваровУслуг, RecordSet, "Оптовый");
				ВыгружаемыеОбъекты.Вставить("Склад_" + RecordSet.Fields("DOC_STOCKID").Value, Склад);
				
				Контрагент = ВыгрузитьКлючКонтрагента(XDTO_ПоступлениеТоваровУслуг, RecordSet);
				ВыгружаемыеОбъекты.Вставить("Контрагент_" + RecordSet.Fields("DOC_CONTRACTORID").Value, Контрагент);
				
				ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВзаиморасчетов");
				Договор = ВыгрузитьКлючДоговора(ДанныеВзаиморасчетов, RecordSet, Организация, Контрагент, Валюта, "СКомитентом");
				ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
				ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
				ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
				ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
				XDTO_ПоступлениеТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
				XDTO_ПоступлениеТоваровУслуг.Комментарий = RecordSet.Fields("DOC_DESCR").Value;
				XDTO_ПоступлениеТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
				XDTO_ПоступлениеТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
				
				
				//
				XDTO_ПоступлениеТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
				// 4. Записываем ОбъектXDTO в XML-файл.
				ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ПоступлениеТоваровУслуг);
			Иначе
				XDTO_ВозвратТоваровОтПокупателя = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ВозвратТоваровОтПокупателя"));
				XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "КлючевыеСвойства");
				XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_ID").Value);
				XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Дата = Дата(RecordSet.Fields("DOC_DATE").Value);
				НомерДокумента = RecordSet.Fields("DOC_NUMBER").Value;
				Если Не ЗначениеЗаполнено(НомерДокумента) Тогда
					НомерДокумента = RecordSet.Fields("DOC_ID").Value;
				КонецЕсли;
				XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства.Номер = НомерДокумента;
				Организация = ВыгрузитьКлючОрганизацию(XDTO_ВозвратТоваровОтПокупателя.КлючевыеСвойства, RecordSet);
				
				ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "ДанныеВходящегоДокумента");
				ДанныеВходящегоДокумента.НомерВходящегоДокумента = RecordSet.Fields("DOC_PARENTID").Value;
				ДанныеВходящегоДокумента.ДатаВходящегоДокумента = RecordSet.Fields("DOC_PARENTDATE").Value;
				ДанныеВходящегоДокумента.НаименованиеВходящегоДокумента = "РеализацияТоваровУслуг";
				XDTO_ВозвратТоваровОтПокупателя.ДанныеВходящегоДокумента = ДанныеВходящегоДокумента;
				
				XDTO_ВозвратТоваровОтПокупателя.ВидОперации = "ВозвратОтКлиента";
				Валюта = ВыгрузитьКлючВалюты(XDTO_ВозвратТоваровОтПокупателя, RecordSet);
				СуммаДокумента = RecordSet.Fields("DOC_SUM").Value;
				XDTO_ВозвратТоваровОтПокупателя.Сумма = СуммаДокумента;
				XDTO_ВозвратТоваровОтПокупателя.СуммаВключаетНДС = Истина;
				XDTO_ВозвратТоваровОтПокупателя.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "Подразделение");
				XDTO_ВозвратТоваровОтПокупателя.Подразделение.Наименование = "Основное подразделение";
				Склад = ВыгрузитьКлючСклада(XDTO_ВозвратТоваровОтПокупателя, RecordSet, "Оптовый");
				ВыгружаемыеОбъекты.Вставить("Склад_" + RecordSet.Fields("DOC_STOCKID").Value, Склад);
				
				Контрагент = ВыгрузитьКлючКонтрагента(XDTO_ВозвратТоваровОтПокупателя, RecordSet);
				ВыгружаемыеОбъекты.Вставить("Контрагент_" + RecordSet.Fields("DOC_CONTRACTORID").Value, Контрагент);
				
				ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "ДанныеВзаиморасчетов");
				Договор = ВыгрузитьКлючДоговора(ДанныеВзаиморасчетов, RecordSet, Организация, Контрагент, Валюта, "СПокупателем");
				ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
				ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
				ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
				ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
				XDTO_ВозвратТоваровОтПокупателя.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
				
				XDTO_ВозвратТоваровОтПокупателя.ДокументРеализации = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "ДокументРеализации");
				КлючевыеСвойстваРеализацияТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "КлючевыеСвойстваРеализацияТоваровУслуг"));
				КлючевыеСвойстваРеализацияТоваровУслуг.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_PARENTID").Value);
				КлючевыеСвойстваРеализацияТоваровУслуг.Дата = Дата(RecordSet.Fields("DOC_PARENTDATE").Value);
				НомерДокументаРодителя = RecordSet.Fields("DOC_PARENTNUMBER").Value;
				Если Не ЗначениеЗаполнено(НомерДокументаРодителя) Тогда
					НомерДокументаРодителя = RecordSet.Fields("DOC_PARENTID").Value;
				КонецЕсли;
				КлючевыеСвойстваРеализацияТоваровУслуг.Номер = НомерДокументаРодителя;
				КлючевыеСвойстваРеализацияТоваровУслуг.Организация = Организация;
				XDTO_ВозвратТоваровОтПокупателя.ДокументРеализации.РеализацияТоваровУслугСсылка = КлючевыеСвойстваРеализацияТоваровУслуг;
				
				XDTO_ВозвратТоваровОтПокупателя.ПокупателемВыставляетсяСчетФактураНаВозврат = Ложь;
				XDTO_ВозвратТоваровОтПокупателя.Комментарий = RecordSet.Fields("DOC_DESCR").Value;
				XDTO_ВозвратТоваровОтПокупателя.Налогообложение = "ПродажаОблагаетсяНДС";
				
				RecordsetTable = ВыполнитьЗапросADO(Соединение,СтрЗапросаРеализацииТЧ, КодДокумента);
				XDTO_ВозвратТоваровОтПокупателя.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя, "Товары");
				НомерСтрокиДокумента = 1;
				СтавкаНДС = 18;
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
				Пока RecordsetTable.EOF() = Ложь Цикл
					СтруктураПараметров.Вставить("СписатьКоличество", RecordsetTable.Fields("qty").Value);
					Сумма = RecordsetTable.Fields("SALESAMOUNTCUR").Value;
					Цена = Сумма / (-1 * СтруктураПараметров.СписатьКоличество);
					Пока СтруктураПараметров.СписатьКоличество <> 0 Цикл
						НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ВозвратТоваровОтПокупателя.Товары, "Строка");
						НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
						НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
						
						КодГруппы = RecordsetTable.Fields("ITEMRANGEROOT").Value;
						ТорговаяМарка = RecordsetTable.Fields("TMName").Value;
						Номенклатура = ВыгрузитьКлючНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, НоваяСтрока.ДанныеНоменклатуры, RecordsetTable, СтруктураПараметров);
						
						ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
						НоваяСтрока.Количество = -СтруктураПараметров.СписанноеКоличество;
						НоваяСтрока.Сумма = -СтруктураПараметров.СписанноеКоличество*Цена;
						НоваяСтрока.Цена = Цена;
						НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
						СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
						НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
						НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
						ВыгрузитьКлючГТД(XMLСхема, НоваяСтрока, RecordsetTable, ВыгружаемыеОбъекты);
						XDTO_ВозвратТоваровОтПокупателя.Товары.Строка.Добавить(НоваяСтрока);
						НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
					КонецЦикла;
					RecordsetTable.MoveNext();
				КонецЦикла;
				XDTO_ВозвратТоваровОтПокупателя.СпособПогашенияЗадолженности = "Автоматически";
				// 4. Записываем ОбъектXDTO в XML-файл.
				ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ВозвратТоваровОтПокупателя);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Recordset.Close();
	Возврат Истина;
КонецФункции

Функция ВыгрузитьСчетФактуруНаПоступление(ФайлОбмена, XMLСхема, Соединение, КодДокумента, ВыгружаемыеТовары, ТабАртикулов)
	//Поступление от Российских поставщиков
	СтрЗапросаСчетФактура = "
	|SELECT
	|	OpenOrder.REASONOPENORDERID AS DOC_ID,
	|	dateadd(second, OpenOrder.CREATEDTIME, OpenOrder.DOCREASONTRANSDATE) AS DOC_DATE,
	|	OpenOrder.OPENORDERID AS DOC_INVOICEID,
	|	OpenOrder.MERJURIDICALPERSONID AS DOC_ORGID,
	|	JurPers.FULLNAME AS DOC_ORGNAME,
	|	JurPers.INN AS DOC_ORGINN,
	|	JurPers.KPP AS DOC_ORGKPP,
	|	OpenOrder.VENDACCOUNT AS DOC_CONTRACTORID, 
	|	Vend.NAME AS DOC_CONTRACTORNAME,
	|	Vend.INN_RU AS DOC_CONTRACTORINN,
	|	Vend.KPP_RU AS DOC_CONTRACTORKPP,
	|	CONTRACTS.MERCONTRACTTABLEID AS DOC_CONTRACTID,
	|	CONTRACTS.NAME AS DOC_CONTRACTNUM,
	|	CONTRACTS.NAME AS DOC_CONTRACTNAME,
	|	Vend.CREATEDDATE AS DOC_CONTRACTDATE,
	|	CONTRACTS.DESCRIPTION AS DOC_CONTRACTDESC,
	|	OpenOrder.DOCREASON AS DOC_NUMID,
	|	OpenOrder.CURRENCYCODE AS DOC_CUR,
	|	OpenOrder.ITEMRANGEROOT,
	|	TM.NAME AS TMName
	|FROM
	|	dbo.MEROPENORDERTABLE AS OpenOrder
	|LEFT OUTER JOIN
	|	dbo.MERCONTRACTTABLE AS CONTRACTS
	|	ON OpenOrder.MERCONTRACTID = CONTRACTS.MERCONTRACTTABLEID
	|LEFT OUTER JOIN
	|	dbo.INVENTITEMRANGE AS TM
	|	ON OpenOrder.ITEMRANGEROOT = TM.RANGEID
	|LEFT OUTER JOIN
	|	#OwnClientTable AS JurPers
	|	ON OpenOrder.MERJURIDICALPERSONID = JurPers.MERJURIDICALPERSONID
	|LEFT OUTER JOIN
	|	dbo.VENDTABLE AS Vend
	|	ON OpenOrder.VENDACCOUNT = Vend.ACCOUNTNUM
	|WHERE
	|	(OpenOrder.MEROPENORDERDOCTYPE = 18)             
	|	and (OpenOrder.posted = 1)
	|	and (OPENORDERID = ?)";
	СтрЗапросаСчетФактураТЧ = "
	|SELECT DISTINCT
	|	OpenOrderLines.OPENORDERID,
	|	OpenOrderLines.NAMEALIASNAME,
	|	OpenOrderLines.NAMEALIASID,
	|	OpenOrderLines.MerInventTransId AS MerExternalItemId,
	|	OpenOrderLines.QTY, 
	|	OpenOrderLines.TAXVALUEVAT,
	|	OpenOrderLines.PRICEAMOUNT,
	|	OpenOrderLines.LINEPRICEAMOUNT,
	|	CR.COUNTRYREGIONID AS COUNTRYOFORIGINID,
	|	OpenOrderLines.INVENTGTD,
	|	OpenOrderLines.NAME,
	|	CR.NAME AS COUNTRY,
	|	CR.COUNTRYNUMID_MRC
	|FROM
	|	dbo.MEROPENORDERLINE AS OpenOrderLines
	|LEFT OUTER JOIN
	|	dbo.ADDRESSCOUNTRYREGION AS CR
	|	ON (CASE WHEN (OpenOrderLines.COUNTRYOFORIGINID = '') THEN 'CHE'
	|	ELSE OpenOrderLines.COUNTRYOFORIGINID END) = CR.COUNTRYREGIONID
	|WHERE
	|	(OpenOrderLines.OPENORDERID = ?)";
	//|LEFT JOIN
	//|	MerOrderTrans AS MOTS
	//|	ON OpenOrderLines.MerInventTransId = MOTS.OrderTransId 
	//|LEFT JOIN
	//|	MerOrderTrans AS MOT
	//|	ON MOTS.OrderTransBatch = MOT.OrderTransBatchBase
	//|LEFT JOIN
	//|	MerOpenOrderLineItem AS MOOLI
	//|	ON MOT.OrderTransId = MOOLI.ReasonMerinventTransId
	//|LEFT JOIN
	//|	InventTable AS InventTable
	//|	ON MOOLI.ItemId = InventTable.ItemId
	//|LEFT JOIN
	//|	InventItemRange AS InventItemRange
	//|	ON InventTable.ItemRangeRoot = InventItemRange.RangeId
	
	ТорговаяМарка = "";
	Recordset = ВыполнитьЗапросADO(Соединение,СтрЗапросаСчетФактура, КодДокумента);
	Если Recordset.EOF() = Ложь Тогда
		XDTO_ПоступлениеТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ПоступлениеТоваровУслуг"));
		XDTO_СчетФактураПолученный = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.СчетФактураПолученный"));
		
		XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "КлючевыеСвойства");
		XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_ID").Value);
		XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства.Дата = Дата(RecordSet.Fields("DOC_DATE").Value);
		XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства.Номер = RecordSet.Fields("DOC_ID").Value;
		Если RecordSet.Fields("DOC_ORGNAME").Value = NULL Тогда
			Возврат Ложь;
		КонецЕсли;
		Организация = ВыгрузитьКлючОрганизацию(XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства, RecordSet);
		
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВходящегоДокумента");
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.НомерВходящегоДокумента = RecordSet.Fields("DOC_NUMID").Value;
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.ДатаВходящегоДокумента = RecordSet.Fields("DOC_DATE").Value;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("КодГруппы", RecordSet.Fields("ITEMRANGEROOT").Value);
		СтруктураПараметров.Вставить("НаименованиеГруппы", RecordSet.Fields("TMName").Value);
		//Табличная часть
		RecordsetTable = ВыполнитьЗапросADO(Соединение,СтрЗапросаСчетФактураТЧ, КодДокумента);
		XDTO_ПоступлениеТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Товары");
		НомерСтрокиДокумента = 1;
		Пока RecordsetTable.EOF() = Ложь Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг.Товары, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
			НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
			
			Номенклатура = ВыгрузитьКлючНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, НоваяСтрока.ДанныеНоменклатуры, RecordsetTable, СтруктураПараметров);
			
			ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
			
			НоваяСтрока.Количество = RecordsetTable.Fields("qty").Value;
			НоваяСтрока.Сумма = RecordsetTable.Fields("LINEPRICEAMOUNT").Value;
			НоваяСтрока.Цена = RecordsetTable.Fields("PRICEAMOUNT").Value;
			НоваяСтрока.СтавкаНДС = "НДС" + Формат(RecordsetTable.Fields("TAXVALUEVAT").Value, "ЧДЦ=; ЧН=0; ЧГ=0");
			СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + RecordsetTable.Fields("TAXVALUEVAT").Value);
			НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
			Если ЭтотОбъект.Комиссия Тогда
				НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
			Иначе
				НоваяСтрока.ТипЗапасов = "СобственныеТовары";
			КонецЕсли;
			
			ВыгрузитьКлючГТД(XMLСхема, НоваяСтрока, RecordsetTable, ВыгружаемыеТовары);
			
			XDTO_ПоступлениеТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
			RecordsetTable.MoveNext();
			НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
		КонецЦикла;
		RecordsetTable.Close();
		
		Валюта = ВыгрузитьКлючВалюты(XDTO_ПоступлениеТоваровУслуг, RecordSet);
		
		Если ЭтотОбъект.Комиссия Тогда
			XDTO_ПоступлениеТоваровУслуг.ВидОперации = "ПриемНаКомиссию";
		Иначе
			XDTO_ПоступлениеТоваровУслуг.ВидОперации = "ПокупкаУПоставщика";
		КонецЕсли;
		XDTO_ПоступлениеТоваровУслуг.СуммаВключаетНДС = Истина;
		XDTO_ПоступлениеТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Подразделение");
		XDTO_ПоступлениеТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
		
		Контрагент = ВыгрузитьКлючКонтрагента(XDTO_ПоступлениеТоваровУслуг, RecordSet);
		ВыгружаемыеТовары.Вставить("Контрагент_" + Контрагент.Наименование, Контрагент);
	
		XDTO_СчетФактураПолученный.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный, "КлючевыеСвойства");
		XDTO_СчетФактураПолученный.КлючевыеСвойства.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_INVOICEID").Value);
		XDTO_СчетФактураПолученный.КлючевыеСвойства.НомерВходящегоДокумента = RecordSet.Fields("DOC_INVOICEID").Value;
		XDTO_СчетФактураПолученный.КлючевыеСвойства.ДатаВходящегоДокумента = RecordSet.Fields("DOC_DATE").Value;
		XDTO_СчетФактураПолученный.КлючевыеСвойства.Организация = Организация;
		XDTO_СчетФактураПолученный.КлючевыеСвойства.Контрагент = Контрагент;
		XDTO_СчетФактураПолученный.ДатаПолучения = RecordSet.Fields("DOC_DATE").Value;
		
		XDTO_СчетФактураПолученный.Валюта = Валюта;
		
		ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВзаиморасчетов");
		Если ЭтотОбъект.Комиссия Тогда
			ВидДоговора = "СКомитентом";
		Иначе
			ВидДоговора = "СПоставщиком";
		КонецЕсли;
		Договор = ВыгрузитьКлючДоговора(ДанныеВзаиморасчетов, RecordSet, Организация, Контрагент, Валюта, ВидДоговора);
		XDTO_СчетФактураПолученный.Договор = Договор;
		XDTO_СчетФактураПолученный.ВидСчетаФактуры = "НаПоступление";
		XDTO_СчетФактураПолученный.КодВидаОперации = "01";
		XDTO_СчетФактураПолученный.СпособВыставления = "ВЭлектронномВиде";
		
		ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
		
		ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
		ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
		ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
		XDTO_ПоступлениеТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
		XDTO_ПоступлениеТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
		XDTO_ПоступлениеТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
		XDTO_СчетФактураПолученный.ДокументыОснования = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный, "ДокументыОснования");
		НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный.ДокументыОснования, "Строка");
		СоставнойДокументРасчетов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "СоставнойДокументРасчетов"));
		СоставнойДокументРасчетов.ПоступлениеТоваровУслугСсылка = XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства;
		НоваяСтрока.ДокументОснование = СоставнойДокументРасчетов;
		XDTO_СчетФактураПолученный.ДокументыОснования.Строка.Добавить(НоваяСтрока);
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ПоступлениеТоваровУслуг);
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_СчетФактураПолученный);
	КонецЕсли;
	Recordset.Close();
	Возврат Истина;
КонецФункции

Функция ВыгрузитьПоступлениеИмпорта(ФайлОбмена, XMLСхема, Соединение, КодДокумента, ВыгружаемыеТовары, ТабАртикулов)
	//Поступление импортного товара
	СтрЗапросаИмпорт = "
	|SELECT
	|	ExtLogist.MEREXTERNALLOGISTICID AS DOC_ID,
	|	dateadd(second, ExtLogist.CREATEDTIME, ExtLogist.TRANSDATEGTD) AS DOC_DATE,
	|	JURIDICALPERSON.MERJURIDICALPERSONID AS DOC_ORGID,
	|	CUSTTABLE.NAME AS DOC_ORGNAME,
	|	CUSTTABLE.CODE_INN_JUR AS DOC_ORGINN,
	|	CUSTTABLE.KPP_RU AS DOC_ORGKPP,
	|	ExtLogist.MERJURIDICALPERSONIDFROM AS DOC_CONTRACTORID,
	|	Vend.Name AS DOC_CONTRACTORNAME,
	|	'' AS DOC_CONTRACTORINN,
	|	'' AS DOC_CONTRACTORKPP,
	|	ExtLogist.NUMCONTRACT AS DOC_CONTRACTID,
	|	ExtLogist.NUMCONTRACT AS DOC_CONTRACTNUM,
	|	ExtLogist.NUMAPPENDIX + ExternalContract.DESCRIPTION AS DOC_CONTRACTNAME,
	|	CUSTTABLE.AGREEMENTDATE AS DOC_CONTRACTDATE,
	|	ExternalContract.DESCRIPTION AS DOC_CONTRACTDESC,
	|	ExtLogist.CURRENCYCODEEXTERNAL AS DOC_CUR,
	|	ExtLogist.EXCHRATE,
	|	ExtLogist.EXCHRATEGTD,
	|	ExtLogist.merInventGTD as GTD,
	|	ExtLogist.CUSTOMAMOUNTCHARGES,
	|	ExtLogist.MerDocReason,
	|	ExtLogist.SellerCharge,
	|	ExtLogist.AMOUNTTRANSPORTANDINSURANCE,
	|	dateadd(second, ExtLogist.CREATEDTIME, ExtLogist.TransDateGTDCustom) AS TransDateGTDCustom,
	|	ExtLogist.DESCRIPTION AS DESCR
	|FROM    dbo.MEREXTERNALLOGISTICTABLE AS ExtLogist
	|LEFT OUTER JOIN
	|	dbo.MerExternalContractTable AS ExternalContract
	|	ON ExtLogist.NumContract  = ExternalContract.MEREXTERNALCONTRACTID
	|LEFT OUTER JOIN
	|	dbo.MEREXTERNALJURIDICALPERSO50191 AS Vend
	|	ON ExtLogist.MERJURIDICALPERSONIDFROM = Vend.MEREXTERNALJURIDICALPERSON
	|LEFT OUTER JOIN
	|	dbo.CUSTTABLE AS CUSTTABLE
	|	ON ExtLogist.MERJURIDICALPERSONIDTO = CUSTTABLE.ACCOUNTNUM
	|LEFT JOIN 
	|	#OwnClientTable AS JURIDICALPERSON ON ExtLogist.MERJURIDICALPERSONIDTO = JURIDICALPERSON.ACCOUNTNUM
	|WHERE   (POSTED = 1)
	|	AND (MEREXTERNALLOGISTICTYPE = 2)
	|	--AND (MERJURIDICALPERSONIDTO = 'КК00004756')
	|	AND (MEREXTERNALLOGISTICID = ?)";
	
	СтрЗапросаРазделыГТД = "select
	|M.LINENUMGTD,
	|M.CUSTOMPERCENTNDS,
	|M.CustomAmountNDS,
	|M.LineCustomAmountTax as CustomAmountTax,
	|M.LINEAMOUNTEXTWITHTRANSPAN50020 AS CustomPrice,
	|M.CustomPercentTax
	|from 
	|dbo.MEREXTERNALLOGISTICLINEGTD as M
	|where M.MEREXTERNALLOGISTICID = ?";
	
	If ТипВыгрузкиТовара = 0 Тогда
		СтрЗапросаИмпортТЧ = "select DISTINCT
		|M.MEREXTERNALLOGISTICID,
		|M.MerExternalItemId,
		|(CASE
		|	WHEN M.NAMEALIASID = '' AND NAMEALIASTABLE.NAMEALIASID IS NOT NULL THEN NAMEALIASTABLE.NAMEALIASID
		|	WHEN M.NAMEALIASID = '' AND NAMEALIASTABLE.NAMEALIASID IS NULL THEN M.MEREXTERNALITEMID
		|	ELSE M.NAMEALIASID
		|END) AS NAMEALIASID,
		|M.Name as NAME,
		|M.NameAliasLogist as NAMEALIASNAME,
		|M.qty,
		|M.UnitId,
		|M.CountryId AS COUNTRYOFORIGINID,
		|CR.Name as Country, 
		|COUNTRYNUMID_MRC as COUNTRYNUMID_MRC,
		|M.LineNumGTD,
		|M.AmountExternal,
		|M.LINEAMOUNTEXTERNAL,
		|M.AMOUNTTRANSPORTANDINSURANCE,
		|M.CustomAmountCHARGES,
		|M.CustomPercentNDS,
		|M.CustomAmountNDS,
		|M.LineCustomAmountTax as CustomAmountTax,
		|M.ItemRangeRootName AS TMName,
		|(CASE WHEN M.ITEMRANGEROOT = '' THEN M.MerExternalRangeID ELSE M.ITEMRANGEROOT END) AS ITEMRANGEROOT
		|from 
		|dbo.MEREXTERNALLOGISTICLINESP50195 as M
		|left outer join
		|	MERNAMEALIASTABLE AS NAMEALIASTABLE
		|	on M.NameAliasLogist = NAMEALIASTABLE.NAMEALIAS AND
		|	M.ITEMRANGEROOT = NAMEALIASTABLE.ITEMRANGEROOT AND
		|	((NAMEALIASTABLE.NAME LIKE '%' + M.Name + '%')
		|	OR (M.Name LIKE '%' + NAMEALIASTABLE.NAME + '%')
		|	OR (M.Name LIKE '%ремень%' AND NAMEALIASTABLE.NAME LIKE '%ремешок%'))
		|LEFT OUTER JOIN
		|	dbo.ADDRESSCOUNTRYREGION AS CR
		|	ON M.CountryId = CR.COUNTRYREGIONID
		|where M.MEREXTERNALLOGISTICID = ?";
	ИначеЕсли ТипВыгрузкиТовара = 1 Или ТипВыгрузкиТовара = 2 Тогда
		СтрЗапросаИмпортТЧ = "select DISTINCT
		|M.MEREXTERNALLOGISTICID,
		|M.MerExternalItemId,
		|M.NAMEALIASID AS NAMEALIASID,
		|M.Name as NAME,
		|M.NameAliasLogist as NAMEALIASNAME,
		|M.qty,
		|M.UnitId,
		|M.CountryId AS COUNTRYOFORIGINID,
		|CR.Name as Country, 
		|COUNTRYNUMID_MRC as COUNTRYNUMID_MRC,
		|M.LineNumGTD,
		|M.AmountExternal,
		|M.LINEAMOUNTEXTERNAL,
		|M.AMOUNTTRANSPORTANDINSURANCE,
		|M.CustomAmountCHARGES,
		|M.CustomPercentNDS,
		|M.CustomAmountNDS,
		|M.LineCustomAmountTax as CustomAmountTax,
		|M.ItemRangeRootName AS TMName,
		|(CASE WHEN M.ITEMRANGEROOT = '' THEN M.MerExternalRangeID ELSE M.ITEMRANGEROOT END) AS ITEMRANGEROOT
		|from 
		|dbo.MEREXTERNALLOGISTICLINESP50195 as M
		|LEFT OUTER JOIN
		|	dbo.ADDRESSCOUNTRYREGION AS CR
		|	ON M.CountryId = CR.COUNTRYREGIONID
		|where M.MEREXTERNALLOGISTICID = ?";
	КонецЕсли;
	//|IsNull(MT.SellerCharge,0) as SellerCharge,
	//|left outer join MerExternallogisticTable  as MT on (M.MEREXTERNALLOGISTICID = MT.MEREXTERNALLOGISTICID)
	
	Recordset = ВыполнитьЗапросADO(Соединение,СтрЗапросаИмпорт, КодДокумента);
	Если Recordset.EOF() = Ложь Тогда
		Если RecordSet.Fields("DOC_ORGNAME").Value = NULL Тогда
			Возврат Ложь;
		КонецЕсли;
		XDTO_ПоступлениеТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ПоступлениеТоваровУслуг"));
		XDTO_ТаможеннаяДекларация = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ТаможеннаяДекларация"));
		
		ПоступлениеТоваровКлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "КлючевыеСвойства");
		Номер = Лев(СтрЗаменить(RecordSet.Fields("DOC_ID").Value, "-", ""), 11);
		ПоступлениеТоваровКлючевыеСвойства.Ссылка = ХэшMD5Простой(Номер);
		ПоступлениеТоваровКлючевыеСвойства.Дата = Дата(RecordSet.Fields("DOC_DATE").Value);
		ПоступлениеТоваровКлючевыеСвойства.Номер = Номер;
		Организация = ВыгрузитьКлючОрганизацию(ПоступлениеТоваровКлючевыеСвойства, RecordSet);
		XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства = ПоступлениеТоваровКлючевыеСвойства;
		
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВходящегоДокумента");
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.НомерВходящегоДокумента = RecordSet.Fields("MerDocReason").Value;
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.ДатаВходящегоДокумента = RecordSet.Fields("DOC_DATE").Value;
		
		XDTO_ТаможеннаяДекларация.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "КлючевыеСвойства");
		XDTO_ТаможеннаяДекларация.КлючевыеСвойства.Ссылка = ХэшMD5Простой(Номер);
		XDTO_ТаможеннаяДекларация.КлючевыеСвойства.Дата = Дата(RecordSet.Fields("DOC_DATE").Value) + 10 * 60;
		XDTO_ТаможеннаяДекларация.КлючевыеСвойства.Номер = Номер;
		XDTO_ТаможеннаяДекларация.КлючевыеСвойства.Организация = Организация;
		
		//Табличная часть
		RecordsetTable = ВыполнитьЗапросADO(Соединение,СтрЗапросаИмпортТЧ, КодДокумента);
		XDTO_ПоступлениеТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Товары");
		RecordsetGTD = ВыполнитьЗапросADO(Соединение, СтрЗапросаРазделыГТД, КодДокумента);
		XDTO_ТоварыГТД = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "Товары");
		XDTO_РазделыГТД = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "Разделы");
		СоответствиеСумм = Новый Соответствие;
		КоличествоРазделов = 0;
		Пока RecordsetGTD.EOF() = Ложь Цикл
			НоваяСтрокаРазделаГТД = ОбъектXDTOПоИмениСвойства(XDTO_РазделыГТД, "Строка");
			НоваяСтрокаРазделаГТД.НомерРаздела = Формат(RecordsetGTD.Fields("LINENUMGTD").Value, "ЧДЦ=; ЧН=0; ЧГ=");
			НоваяСтрокаРазделаГТД.СтавкаНДС = "НДС" + Формат(RecordsetGTD.Fields("CUSTOMPERCENTNDS").Value, "ЧДЦ=; ЧН=0; ЧГ=0");
			НоваяСтрокаРазделаГТД.СуммаНДС = RecordsetGTD.Fields("CustomAmountNDS").Value;
			НоваяСтрокаРазделаГТД.СуммаПошлины = RecordsetGTD.Fields("CustomAmountTax").Value;
			НоваяСтрокаРазделаГТД.ТаможеннаяСтоимость = Окр(RecordsetGTD.Fields("CustomPrice").Value, 2);
			НоваяСтрокаРазделаГТД.НДСВВалюте = Ложь;
			НоваяСтрокаРазделаГТД.ПошлинаВВалюте = Ложь;
			СоответствиеСумм.Вставить("П_" + НоваяСтрокаРазделаГТД.НомерРаздела, НоваяСтрокаРазделаГТД.СуммаПошлины);
			СоответствиеСумм.Вставить("Н_" + НоваяСтрокаРазделаГТД.НомерРаздела, НоваяСтрокаРазделаГТД.СуммаНДС);
			КоличествоРазделов = КоличествоРазделов + 1;
			XDTO_РазделыГТД.Строка.Добавить(НоваяСтрокаРазделаГТД);
			RecordsetGTD.MoveNext();
		КонецЦикла;
		RecordsetGTD.Close();
		
		СуммаТранспИСтраховки = Recordset.Fields("AMOUNTTRANSPORTANDINSURANCE").Value;
		НомерСтрокиДокумента = 1;
		СтранаПроисхождения = Неопределено;
		ПоследняяСтрокаРаздела = Новый Соответствие;
		Пока RecordsetTable.EOF() = Ложь Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг.Товары, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
			
			НоваяСтрокаГТД = ОбъектXDTOПоИмениСвойства(XDTO_ТоварыГТД, "Строка");
			НоваяСтрокаГТД.НомерСтрокиДокумента = НомерСтрокиДокумента;
			НоваяСтрокаГТД.НомерРаздела = Формат(RecordsetTable.Fields("LINENUMGTD").Value, "ЧДЦ=; ЧН=0; ЧГ=");
			СоответствиеСумм.Вставить("С_" + НоваяСтрокаГТД.НомерРаздела, НоваяСтрокаГТД);
			
			НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("КодГруппы", RecordsetTable.Fields("ITEMRANGEROOT").Value);
			СтруктураПараметров.Вставить("НаименованиеГруппы", RecordsetTable.Fields("TMName").Value);
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
			Номенклатура = ВыгрузитьКлючНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, НоваяСтрока.ДанныеНоменклатуры, RecordsetTable, СтруктураПараметров);
			
			ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
			
			НоваяСтрока.Количество = RecordsetTable.Fields("qty").Value;
			Если СуммаТранспИСтраховки > 0 Тогда
				Цена = Окр(RecordsetTable.Fields("AMOUNTEXTERNAL").Value*(Recordset.Fields("SellerCharge").Value/100+1) + RecordsetTable.Fields("AMOUNTTRANSPORTANDINSURANCE").Value, 2);
			Иначе
				Цена = Окр(RecordsetTable.Fields("AMOUNTEXTERNAL").Value*(Recordset.Fields("SellerCharge").Value/100+1), 2);
			КонецЕсли;
			НоваяСтрока.Сумма = НоваяСтрока.Количество * Цена;
			НоваяСтрока.Цена = Цена;
			ТаможеннаяСтоимость = НоваяСтрока.Сумма;
			НоваяСтрока.СтавкаНДС = "БезНДС";
			НоваяСтрока.СуммаНДС = 0;
			НоваяСтрока.ТипЗапасов = "СобственныеТовары";
			
			ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
			ДанныеГТД.НомерГТД = Recordset.Fields("GTD").Value + "/" + НоваяСтрокаГТД.НомерРаздела;
			
			СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеТовары, ДанныеГТД, RecordsetTable.Fields("COUNTRYOFORIGINID").Value,
			RecordsetTable.Fields("COUNTRY").Value, RecordsetTable.Fields("COUNTRYNUMID_MRC").Value);
			
			//ВыгружаемыеТовары.Вставить("СтранаПроисхождения_" + СтранаПроисхождения.Код, СтранаПроисхождения);
			НоваяСтрока.ДанныеГТД = ДанныеГТД;
			НоваяСтрока.СчетУчета = "41.01";
			НоваяСтрока.СчетУчетаНДС = "19.03";
			
			XDTO_ПоступлениеТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
			
			НоваяСтрокаГТД.Номенклатура = Номенклатура;
			НоваяСтрокаГТД.ДокументПоступления = ПоступлениеТоваровКлючевыеСвойства;
			//НоваяСтрокаГТД.ДокументПоступления = ФабрикаXDTO.Создать(ПоступлениеТоваровКлючевыеСвойства.Тип(), ПоступлениеТоваровКлючевыеСвойства);
			НоваяСтрокаГТД.Количество = RecordsetTable.Fields("qty").Value;
			НоваяСтрокаГТД.ТаможеннаяСтоимость = ТаможеннаяСтоимость;
			НоваяСтрокаГТД.СуммаНДС = RecordsetTable.Fields("CustomAmountNDS").Value;
			НоваяСтрокаГТД.СуммаПошлины = RecordsetTable.Fields("CustomAmountTax").Value;
			НоваяСтрокаГТД.СтранаПроисхождения = СтранаПроисхождения;
			НоваяСтрокаГТД.СчетУчета = "41.01";
			НоваяСтрокаГТД.СчетУчетаНДС = "19.05";
			
			СуммаНДСРаздела = СоответствиеСумм.Получить("ИН_" + НоваяСтрокаГТД.НомерРаздела);
			СуммаНДСРаздела = ?(СуммаНДСРаздела = Неопределено, 0, СуммаНДСРаздела);
			СуммаНДСРаздела = СуммаНДСРаздела + НоваяСтрокаГТД.СуммаНДС;
			СоответствиеСумм.Вставить("ИН_" + НоваяСтрокаГТД.НомерРаздела, СуммаНДСРаздела);
			СуммаПошлиныРаздела = СоответствиеСумм.Получить("ИП_" + НоваяСтрокаГТД.НомерРаздела);
			СуммаПошлиныРаздела = ?(СуммаПошлиныРаздела = Неопределено, 0, СуммаПошлиныРаздела);
			СуммаПошлиныРаздела = СуммаПошлиныРаздела + НоваяСтрокаГТД.СуммаПошлины;
			СоответствиеСумм.Вставить("ИП_" + НоваяСтрокаГТД.НомерРаздела, СуммаПошлиныРаздела);
			
			XDTO_ТоварыГТД.Строка.Добавить(НоваяСтрокаГТД);
			
			RecordsetTable.MoveNext();
			НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
		КонецЦикла;
		RecordsetTable.Close();
		
		Для НомерРаздела = 1 По КоличествоРазделов Цикл
			тНомерРаздела = Формат(НомерРаздела, "ЧДЦ=; ЧН=0; ЧГ=");
			СуммаНДСРаздела = СоответствиеСумм.Получить("Н_" + тНомерРаздела);
			СуммаНДСРазделаПоТоварам = СоответствиеСумм.Получить("ИН_" + тНомерРаздела);
			СуммаПошлиныРаздела = СоответствиеСумм.Получить("П_" + тНомерРаздела);
			СуммаПошлиныРазделаПоТоварам = СоответствиеСумм.Получить("ИП_" + тНомерРаздела);
			Если СуммаНДСРаздела <> СуммаНДСРазделаПоТоварам Тогда
				ПоследняяСтрока = СоответствиеСумм.Получить("С_" + тНомерРаздела);
				ПоследняяСтрока.СуммаНДС = ПоследняяСтрока.СуммаНДС + (СуммаНДСРаздела - СуммаНДСРазделаПоТоварам)
			КонецЕсли;
			Если СуммаПошлиныРаздела <> СуммаПошлиныРазделаПоТоварам Тогда
				ПоследняяСтрока = СоответствиеСумм.Получить("С_" + тНомерРаздела);
				ПоследняяСтрока.СуммаПошлины = ПоследняяСтрока.СуммаПошлины + (СуммаПошлиныРаздела - СуммаПошлиныРазделаПоТоварам)
			КонецЕсли;
		КонецЦикла;
		
		Валюта = ВыгрузитьКлючВалюты(XDTO_ПоступлениеТоваровУслуг, RecordSet);
		//ВыгружаемыеТовары.Вставить("Валюта_" + Валюта.Код, Валюта);
		XDTO_ТаможеннаяДекларация.Валюта = Валюта;
		XDTO_ТаможеннаяДекларация.ТаможенныйСбор = Recordset.Fields("CUSTOMAMOUNTCHARGES").Value;
		XDTO_ТаможеннаяДекларация.КурсДокумента = Recordset.Fields("EXCHRATEGTD").Value;
		XDTO_ТаможеннаяДекларация.КратностьДокумента = 1;
		
		XDTO_ПоступлениеТоваровУслуг.ВидОперации = "ЗакупкаПоИмпорту";
		XDTO_ПоступлениеТоваровУслуг.СуммаВключаетНДС = Ложь;
		XDTO_ПоступлениеТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Подразделение");
		XDTO_ПоступлениеТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
		
		Контрагент = ВыгрузитьКлючКонтрагента(XDTO_ПоступлениеТоваровУслуг, RecordSet);//, СтранаПроисхождения
		ВыгружаемыеТовары.Вставить("Контрагент_" + Контрагент.Наименование, Контрагент);
		
		Если Найти(RecordSet.Fields("DOC_CONTRACTID").Value, "AX") > 0 Тогда
			Таможня = ВыгрузитьКлючПоСтруктуре(XDTO_ТаможеннаяДекларация, Контрагент_Таможня1, "Контрагент", XMLСхема);
		Иначе
			Таможня = ВыгрузитьКлючПоСтруктуре(XDTO_ТаможеннаяДекларация, Контрагент_Таможня, "Контрагент", XMLСхема);
		КонецЕсли;
		Таможня.СтранаРегистрации = Контрагент.СтранаРегистрации;
		ВыгружаемыеТовары.Вставить("Контрагент_" + Таможня.Наименование, Таможня);
		
		ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВзаиморасчетов");
		Договор = ВыгрузитьКлючДоговора(ДанныеВзаиморасчетов, RecordSet, Организация, Контрагент, Валюта, "СПоставщиком");
		
		ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
		
		ДанныеВзаиморасчетов.КурсВзаиморасчетов = Recordset.Fields("EXCHRATEGTD").Value;
		ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
		ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
		XDTO_ПоступлениеТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
		
		ДанныеВзаиморасчетовГТД = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "ДанныеВзаиморасчетов");
		ДоговорСТаможнейСтруктура = Новый Структура;
		//ДоговорСТаможнейСтруктура.Вставить("Ссылка", "398442c9-3433-11e4-8afc-003048308a41");
		ДоговорСТаможнейСтруктура.Вставить("ВидДоговора", "Прочее");
		ДоговорСТаможнейСтруктура.Вставить("Организация", Организация);
		ДоговорСТаможнейСтруктура.Вставить("Контрагент", Таможня);
		XDTO_ВалютаРуб = ВыгрузитьКлючПоСтруктуре(Неопределено, ВалютаРуб, "КлючевыеСвойстваВалюта", XMLСхема);
		ДоговорСТаможнейСтруктура.Вставить("ВалютаВзаиморасчетов", XDTO_ВалютаРуб);
		ДоговорСТаможнейСтруктура.Вставить("РасчетыВУсловныхЕдиницах", Ложь);
		ДоговорСТаможнейСтруктура.Вставить("Наименование", "Таможенные платежи");
		ДоговорСТаможней = ВыгрузитьКлючПоСтруктуре(ДанныеВзаиморасчетовГТД, ДоговорСТаможнейСтруктура, "Договор", XMLСхема);
		ДанныеВзаиморасчетовГТД.КурсВзаиморасчетов = Recordset.Fields("EXCHRATEGTD").Value;
		ДанныеВзаиморасчетовГТД.КратностьВзаиморасчетов = 1;
		ДанныеВзаиморасчетовГТД.РасчетыВУсловныхЕдиницах = Ложь;
		//ДанныеВзаиморасчетовГТД.СчетУчетаРасчетовСКонтрагентом = "76.05";
		//ДанныеВзаиморасчетовГТД.СчетУчетаРасчетовПоАвансам = "76.05";
		XDTO_ТаможеннаяДекларация.ДанныеВзаиморасчетов = ДанныеВзаиморасчетовГТД;
		
		XDTO_ТаможеннаяДекларация.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "Подразделение");
		XDTO_ТаможеннаяДекларация.Подразделение.Наименование = "Основное подразделение";
		
		XDTO_ТаможеннаяДекларация.НомерДекларации = Recordset.Fields("GTD").Value;
		XDTO_ТаможеннаяДекларация.Комментарий = Recordset.Fields("DESCR").Value;
		
		XDTO_ТаможеннаяДекларация.Товары = XDTO_ТоварыГТД;
		XDTO_ТаможеннаяДекларация.Разделы = XDTO_РазделыГТД;
		XDTO_ТаможеннаяДекларация.СпособПогашенияЗадолженности = "Автоматически";
		
		XDTO_ПоступлениеТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
		XDTO_ПоступлениеТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
		
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ПоступлениеТоваровУслуг);
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ТаможеннаяДекларация);
	КонецЕсли;
	Recordset.Close();
	Возврат Истина;
КонецФункции

Функция ВыгрузитьПостНекоммерцию(ФайлОбмена, XMLСхема, Соединение, ДокументСсылка, ВыгружаемыеТовары, ТабАртикулов)
	СтруктураПоиска = Новый Структура("MEREXTERNALITEMID");
	
	ЗапросДокумента = Новый Запрос("ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументСсылка,
	|	ПоступлениеТоваровУслуг.Дата,
	|	ПоступлениеТоваровУслуг.Номер,
	|	ПоступлениеТоваровУслуг.Организация,
	|	ПоступлениеТоваровУслуг.Организация.Наименование КАК ОрганизацияНаименование,
	|	ПоступлениеТоваровУслуг.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
	|	ПоступлениеТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	ПоступлениеТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	ПоступлениеТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	ПоступлениеТоваровУслуг.Организация.ЮридическоеФизическоеЛицо КАК ОрганизацияЮридическоеФизическоеЛицо,
	|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента,
	|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента,
	|	ПоступлениеТоваровУслуг.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Наименование КАК НоменклатураНаименование,
	|		Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|		Номенклатура.Код КАК НоменклатураКод,
	|		Номенклатура.Артикул КАК НоменклатураАртикул,
	|		Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|		Номенклатура.Родитель КАК НоменклатураРодитель,
	|		Номенклатура.Родитель.Код КАК НоменклатураРодительКод,
	|		Номенклатура.Родитель.Наименование КАК НоменклатураРодительНаименование,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		СчетУчета,
	|		НомерГТД,
	|		НомерГТД.Представление КАК НомерГТДПредставление,
	|		СтранаПроисхождения,
	|		СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|		СтранаПроисхождения.Наименование КАК СтранаПроисхожденияНаименование,
	|		СтранаПроисхождения.КодАльфа3 КАК СтранаПроисхожденияКодАльфа3
	|	),
	|	ПоступлениеТоваровУслуг.Услуги.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Наименование КАК НоменклатураНаименование,
	|		Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|		Номенклатура.Код КАК НоменклатураКод,
	|		Номенклатура.Артикул КАК НоменклатураАртикул,
	|		Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|		Номенклатура.Родитель КАК НоменклатураРодитель,
	|		Номенклатура.Родитель.Код КАК НоменклатураРодительКод,
	|		Номенклатура.Родитель.Наименование КАК НоменклатураРодительНаименование,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Содержание,
	|		СчетЗатрат,
	|		СчетУчетаНДС,
	|		ПодразделениеЗатрат,
	|		Субконто1,
	|		Субконто1.Код КАК Субконто1Код,
	|		Субконто1.Наименование КАК Субконто1Наименование
	|	),
	|	ПоступлениеТоваровУслуг.ВалютаДокумента,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента.Код,
	|	ПоступлениеТоваровУслуг.ВалютаДокумента.Наименование,
	|	ПоступлениеТоваровУслуг.ВидОперации,
	|	ПоступлениеТоваровУслуг.СуммаВключаетНДС,
	|	ПоступлениеТоваровУслуг.Контрагент,
	|	ПоступлениеТоваровУслуг.Контрагент.Наименование,
	|	ПоступлениеТоваровУслуг.Контрагент.НаименованиеПолное,
	|	ПоступлениеТоваровУслуг.Контрагент.ИНН,
	|	ПоступлениеТоваровУслуг.Контрагент.КПП,
	|	ПоступлениеТоваровУслуг.Контрагент.ЮридическоеФизическоеЛицо,
	|	ПоступлениеТоваровУслуг.Контрагент.СтранаРегистрации,
	|	ПоступлениеТоваровУслуг.Контрагент.СтранаРегистрации.Код,
	|	ПоступлениеТоваровУслуг.Контрагент.СтранаРегистрации.Наименование,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВидДоговора,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.Наименование,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.Дата,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.Номер,
	|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов,
	|	ПоступлениеТоваровУслуг.КратностьВзаиморасчетов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &ДокументСсылка");
	ЗапросСчетФактуры = Новый Запрос("ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Номер,
	|	СчетФактураПолученный.Организация,
	|	СчетФактураПолученный.Контрагент,
	|	СчетФактураПолученный.ДоговорКонтрагента,
	|	СчетФактураПолученный.НомерВходящегоДокумента,
	|	СчетФактураПолученный.ДатаВходящегоДокумента,
	|	СчетФактураПолученный.СуммаДокумента,
	|	СчетФактураПолученный.ВалютаДокумента,
	|	СчетФактураПолученный.Комментарий,
	|	СчетФактураПолученный.ДокументыОснования.(
	|		НомерСтроки,
	|		ДокументОснование,
	|		НомерИсходногоДокумента,
	|		ДатаИсходногоДокумента
	|	)
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ДокументыОснования.ДокументОснование = &ДокументОснование
	|	И СчетФактураПолученный.Проведен = Истина
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураПолученный.МоментВремени");
	ЗапросДокумента.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ВыборкаДокумента = ЗапросДокумента.Выполнить().Выбрать();
	//Поступление услуг и пр. некоммерции
	Пока ВыборкаДокумента.Следующий() Цикл
		XDTO_ПоступлениеТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ПоступлениеТоваровУслуг"));
		
		ПоступлениеТоваровКлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "КлючевыеСвойства");
		ПоступлениеТоваровКлючевыеСвойства.Ссылка = КонвертироватьСсылкуВXDTO(ВыборкаДокумента.ДокументСсылка);
		ПоступлениеТоваровКлючевыеСвойства.Дата = ВыборкаДокумента.Дата;
		ПоступлениеТоваровКлючевыеСвойства.Номер = ВыборкаДокумента.Номер;
		
		ОрганизацияСтруктура = Новый Структура;
		//Организация.Вставить("Ссылка", "4993b015-509b-11e1-a558-001485883758");
		ОрганизацияСтруктура.Вставить("Наименование", ВыборкаДокумента.ОрганизацияНаименование);
		ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ВыборкаДокумента.ОрганизацияНаименованиеСокращенное);
		ОрганизацияСтруктура.Вставить("НаименованиеПолное", ВыборкаДокумента.ОрганизацияНаименованиеПолное);
		ОрганизацияСтруктура.Вставить("ИНН", ВыборкаДокумента.ОрганизацияИНН);
		ОрганизацияСтруктура.Вставить("КПП", ВыборкаДокумента.ОрганизацияКПП);
		ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", ?(ВыборкаДокумента.ОрганизацияЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо", "ФизическоеЛицо"));
		Организация = ВыгрузитьКлючПоСтруктуре(ПоступлениеТоваровКлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
		
		XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства = ПоступлениеТоваровКлючевыеСвойства;
		
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВходящегоДокумента");
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.НомерВходящегоДокумента = ВыборкаДокумента.НомерВходящегоДокумента;
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.ДатаВходящегоДокумента = ВыборкаДокумента.ДатаВходящегоДокумента;
			
		//Табличная часть
		XDTO_ПоступлениеТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Товары");
		ВыборкаТовары = ВыборкаДокумента.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг.Товары, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = ВыборкаТовары.НомерСтроки;
				
			НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварСсылка", Неопределено);
			СтруктураПараметров.Вставить("КодТовара", ВыборкаТовары.НоменклатураКод);
			СтруктураПараметров.Вставить("Наименование", ВыборкаТовары.НоменклатураНаименование);
			СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовары.НоменклатураНаименованиеПолное);
			СтруктураПараметров.Вставить("Артикул", ВыборкаТовары.НоменклатураАртикул);
			СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
			СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
			СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
			СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовары.НоменклатураРодительКод);
			СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовары.НоменклатураРодительНаименование);
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Ложь);
			
			XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, СтруктураПараметров);
			НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
			
			ЕдиницаИзмерения = ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
			
			НоваяСтрока.Количество = ВыборкаТовары.Количество;
			НоваяСтрока.Сумма = ВыборкаТовары.Сумма;
			НоваяСтрока.Цена = ВыборкаТовары.Цена;
			НоваяСтрока.СтавкаНДС = ПолучитьИмяПеречисления(ВыборкаТовары.СтавкаНДС);
			НоваяСтрока.СуммаНДС = ВыборкаТовары.СуммаНДС;
			НоваяСтрока.ТипЗапасов = "СобственныеТовары";
			
			СтрокиТов = ТабАртикулов.НайтиСтроки(Новый Структура("MEREXTERNALITEMID", ВыборкаТовары.НоменклатураКод));
			Если СтрокиТов.Количество() > 0 Тогда
				СтрокаТов = СтрокиТов[0];
				НомерГТД = СтрокаТов.merInventGTD + "/" + СтрокаТов.LINENUMGTD;
				СтранаКод = СтрокаТов.COUNTRYNUMID_MRC;
				СтранаКодАльфа3 = СтрокаТов.CountryId;
				СтранаНаименование = СтрокаТов.COUNTRY;
			Иначе
				НомерГТД = ВыборкаТовары.НомерГТДПредставление;
				СтранаКод = ВыборкаТовары.СтранаПроисхожденияКод;
				СтранаКодАльфа3 = ВыборкаТовары.СтранаПроисхожденияКодАльфа3;
				СтранаНаименование = ВыборкаТовары.СтранаПроисхожденияНаименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерГТД) Тогда
				ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
				ДанныеГТД.НомерГТД = НомерГТД;
				СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеТовары, ДанныеГТД, СтранаКодАльфа3,
				СтранаНаименование, СтранаКод);
				НоваяСтрока.ДанныеГТД = ДанныеГТД;
			КонецЕсли;
			НоваяСтрока.СчетУчета = Строка(ВыборкаТовары.СчетУчета);
			XDTO_ПоступлениеТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
			
		КонецЦикла;
	
		XDTO_ПоступлениеТоваровУслуг.Услуги = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Услуги");
		ВыборкаУслуги = ВыборкаДокумента.Услуги.Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг.Услуги, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = ВыборкаУслуги.НомерСтроки;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварСсылка", ВыборкаУслуги.Номенклатура);
			СтруктураПараметров.Вставить("КодТовара", ВыборкаУслуги.НоменклатураКод);
			СтруктураПараметров.Вставить("Наименование", ВыборкаУслуги.НоменклатураНаименование);
			СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаУслуги.НоменклатураНаименованиеПолное);
			СтруктураПараметров.Вставить("Артикул", ВыборкаУслуги.НоменклатураАртикул);
			СтруктураПараметров.Вставить("ТипНоменклатуры", "Услуга");
			СтруктураПараметров.Вставить("ВидНоменклатуры", "Услуги");
			СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
			СтруктураПараметров.Вставить("КодГруппы", ВыборкаУслуги.НоменклатураРодительКод);
			СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаУслуги.НоменклатураРодительНаименование);
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Ложь);
			
			XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, СтруктураПараметров);
			НоваяСтрока.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
			
			НоваяСтрока.Количество = ВыборкаУслуги.Количество;
			НоваяСтрока.Сумма = ВыборкаУслуги.Сумма;
			НоваяСтрока.Цена = ВыборкаУслуги.Цена;
			НоваяСтрока.СтавкаНДС = ПолучитьИмяПеречисления(ВыборкаУслуги.СтавкаНДС);
			НоваяСтрока.СуммаНДС = ВыборкаУслуги.СуммаНДС;
			НоваяСтрока.Содержание = ВыборкаУслуги.Содержание;
			
			НоваяСтрока.ДанныеЗатрат = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеЗатрат");
			НоваяСтрока.ДанныеЗатрат.СчетЗатрат = Строка(ВыборкаУслуги.СчетЗатрат);
			НоваяСтрока.ДанныеЗатрат.СчетУчетаНДС = Строка(ВыборкаУслуги.СчетУчетаНДС);
			//НоваяСтрока.ДанныеЗатрат.ПодразделениеЗатрат = Строка(СтрокаТЧ.ПодразделениеЗатрат);
			Если ЗначениеЗаполнено(ВыборкаУслуги.Субконто1) Тогда
				СтатьяЗатрат = ОбъектXDTOПоИмениСвойства(НоваяСтрока.ДанныеЗатрат, "СтатьяЗатрат");
				СтатьяЗатрат.КодВПрограмме = ВыборкаУслуги.Субконто1Код;
				СтатьяЗатрат.Наименование = ВыборкаУслуги.Субконто1Наименование;
				НоваяСтрока.ДанныеЗатрат.СтатьяЗатрат = СтатьяЗатрат;
			КонецЕсли;
			//ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
			//ДанныеГТД.НомерГТД = СтрокаТЧ.НомерГТД;
			//
			//СтранаПроисхождения = ОбъектXDTOПоИмениСвойства(ДанныеГТД, "СтранаПроисхождения");
			//СтранаПроисхождения.Ссылка = Строка(СтрокаТЧ.СтранаПроисхождения.УникальныйИдентификатор());
			//СтранаПроисхождения.Код = СтрокаТЧ.СтранаПроисхождения.Код;
			//СтранаПроисхождения.Наименование = СтрокаТЧ.СтранаПроисхождения.Наименование;
			//
			//ДанныеГТД.СтранаПроисхождения = СтранаПроисхождения;
			//НоваяСтрока.ДанныеГТД = ДанныеГТД;
			//НоваяСтрока.ТипУслуги = "Собственные";
			
			XDTO_ПоступлениеТоваровУслуг.Услуги.Строка.Добавить(НоваяСтрока);
			
		КонецЦикла;
	
		Валюта = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Валюта");
		//Валюта.Ссылка = Строка(ВыборкаДокумента.ВалютаДокумента.УникальныйИдентификатор());
		Валюта.Код = ВыборкаДокумента.ВалютаДокументаКод;
		Валюта.Наименование = ВыборкаДокумента.ВалютаДокументаНаименование;
		XDTO_ПоступлениеТоваровУслуг.Валюта = Валюта;
		
			
		XDTO_ПоступлениеТоваровУслуг.ВидОперации = "ПокупкаУПоставщика";
		XDTO_ПоступлениеТоваровУслуг.СуммаВключаетНДС = ВыборкаДокумента.СуммаВключаетНДС;
		
		XDTO_ПоступлениеТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Подразделение");
		XDTO_ПоступлениеТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
		
		Контрагент = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Контрагент");
		//Контрагент.Ссылка = Строка(ВыборкаДокумента.Контрагент.УникальныйИдентификатор());
		Контрагент.Наименование = ВыборкаДокумента.КонтрагентНаименование;
		Контрагент.НаименованиеПолное = ВыборкаДокумента.КонтрагентНаименованиеПолное;
		Контрагент.ИНН = ВыборкаДокумента.КонтрагентИНН;
		Контрагент.КПП = ВыборкаДокумента.КонтрагентКПП;
		Контрагент.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
		
		Контрагент.СтранаРегистрации = ОбъектXDTOПоИмениСвойства(Контрагент, "СтранаРегистрации");
		//Контрагент.СтранаРегистрации.Ссылка = Строка(ВыборкаДокумента.КонтрагентСтранаРегистрации.УникальныйИдентификатор());
		Контрагент.СтранаРегистрации.Код = ВыборкаДокумента.КонтрагентСтранаРегистрацииКод;
		Контрагент.СтранаРегистрации.Наименование = ВыборкаДокумента.КонтрагентСтранаРегистрацииНаименование;
		XDTO_ПоступлениеТоваровУслуг.Контрагент = Контрагент;
		ВыгружаемыеТовары.Вставить("Контрагент_" + Контрагент.Наименование + Контрагент.ИНН, Контрагент);
		
		ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВзаиморасчетов");
		Договор = ОбъектXDTOПоИмениСвойства(ДанныеВзаиморасчетов, "Договор");
		//Договор.Ссылка = Строка(ДокументОбъект.ДоговорКонтрагента.УникальныйИдентификатор());
		Договор.ВидДоговора = "СПоставщиком";
		Договор.Организация = Организация;
		Договор.Контрагент = Контрагент;
		Договор.ВалютаВзаиморасчетов = Валюта;
		Договор.РасчетыВУсловныхЕдиницах = ВыборкаДокумента.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		//Договор.Наименование = RecordSet.Fields("DOC_CONTRACTNAME").Value + " " + RecordSet.Fields("DOC_CONTRACTDESC").Value;
		Договор.Наименование = ВыборкаДокумента.ДоговорКонтрагентаНаименование;
		Договор.Дата = ВыборкаДокумента.ДоговорКонтрагентаДата;
		Договор.Номер = ВыборкаДокумента.ДоговорКонтрагентаНомер;
		ДанныеВзаиморасчетов.Договор = Договор;
		
		ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
			
		ДанныеВзаиморасчетов.КурсВзаиморасчетов = ВыборкаДокумента.КурсВзаиморасчетов;
		ДанныеВзаиморасчетов.КратностьВзаиморасчетов = ВыборкаДокумента.КратностьВзаиморасчетов;
		ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Договор.РасчетыВУсловныхЕдиницах;
		XDTO_ПоступлениеТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
			
		XDTO_ПоступлениеТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
		XDTO_ПоступлениеТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ПоступлениеТоваровУслуг);
		
		ЗапросСчетФактуры.УстановитьПараметр("ДокументОснование", ВыборкаДокумента.ДокументСсылка);
		ВыборкаСчетФактуры = ЗапросСчетФактуры.Выполнить().Выбрать();
		Пока ВыборкаСчетФактуры.Следующий() Цикл
			XDTO_СчетФактураПолученный = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.СчетФактураПолученный"));
			
			XDTO_СчетФактураПолученный.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный, "КлючевыеСвойства");
			XDTO_СчетФактураПолученный.КлючевыеСвойства.Ссылка = КонвертироватьСсылкуВXDTO(ВыборкаСчетФактуры.Ссылка);
			XDTO_СчетФактураПолученный.КлючевыеСвойства.НомерВходящегоДокумента = ВыборкаСчетФактуры.НомерВходящегоДокумента;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.ДатаВходящегоДокумента = ВыборкаСчетФактуры.ДатаВходящегоДокумента;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.Организация = Организация;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.Контрагент = Контрагент;
			XDTO_СчетФактураПолученный.ДатаПолучения = ВыборкаСчетФактуры.ДатаВходящегоДокумента;
			
			XDTO_СчетФактураПолученный.Валюта = Валюта;
			
			XDTO_СчетФактураПолученный.Договор = Договор;
			XDTO_СчетФактураПолученный.ВидСчетаФактуры = "НаПоступление";
			XDTO_СчетФактураПолученный.КодВидаОперации = "01";
			XDTO_СчетФактураПолученный.СпособВыставления = "ВЭлектронномВиде";
			
			XDTO_СчетФактураПолученный.ДокументыОснования = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный, "ДокументыОснования");
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный.ДокументыОснования, "Строка");
			СоставнойДокументРасчетов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "СоставнойДокументРасчетов"));
			СоставнойДокументРасчетов.ПоступлениеТоваровУслугСсылка = XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства;
			НоваяСтрока.ДокументОснование = СоставнойДокументРасчетов;
			XDTO_СчетФактураПолученный.ДокументыОснования.Строка.Добавить(НоваяСтрока);
			// 4. Записываем ОбъектXDTO в XML-файл.
			ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_СчетФактураПолученный);
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьРеалНекоммерцию(ФайлОбмена, XMLСхема, Соединение, ДокументСсылка, ВыгружаемыеТовары, ТабАртикулов)
	
	СтруктураПоиска = Новый Структура("MEREXTERNALITEMID");
	
	ЗапросДокумента = Новый Запрос("ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК ДокументСсылка,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Номер,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Организация.Наименование КАК ОрганизацияНаименование,
	|	РеализацияТоваровУслуг.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
	|	РеализацияТоваровУслуг.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	РеализацияТоваровУслуг.Организация.ИНН КАК ОрганизацияИНН,
	|	РеализацияТоваровУслуг.Организация.КПП КАК ОрганизацияКПП,
	|	РеализацияТоваровУслуг.Организация.ЮридическоеФизическоеЛицо КАК ОрганизацияЮридическоеФизическоеЛицо,
	|	РеализацияТоваровУслуг.Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Наименование КАК НоменклатураНаименование,
	|		Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|		Номенклатура.Код КАК НоменклатураКод,
	|		Номенклатура.Артикул КАК НоменклатураАртикул,
	|		Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|		Номенклатура.Родитель КАК НоменклатураРодитель,
	|		Номенклатура.Родитель.Код КАК НоменклатураРодительКод,
	|		Номенклатура.Родитель.Наименование КАК НоменклатураРодительНаименование,
	|		ЕдиницаИзмерения,
	|		ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|		ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		СчетУчета,
	|		НомерГТД,
	|		НомерГТД.Представление КАК НомерГТДПредставление,
	|		СтранаПроисхождения,
	|		СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|		СтранаПроисхождения.Наименование КАК СтранаПроисхожденияНаименование,
	|		СтранаПроисхождения.КодАльфа3 КАК СтранаПроисхожденияКодАльфа3
	|	),
	|	РеализацияТоваровУслуг.Услуги.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура.Наименование КАК НоменклатураНаименование,
	|		Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|		Номенклатура.Код КАК НоменклатураКод,
	|		Номенклатура.Артикул КАК НоменклатураАртикул,
	|		Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|		Номенклатура.Родитель КАК НоменклатураРодитель,
	|		Номенклатура.Родитель.Код КАК НоменклатураРодительКод,
	|		Номенклатура.Родитель.Наименование КАК НоменклатураРодительНаименование,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.ВидНоменклатуры.Наименование КАК ВидНоменклатуры,
	|		Количество,
	|		Цена,
	|		Сумма,
	|		СтавкаНДС,
	|		СуммаНДС,
	|		Содержание,
	|		СчетРасходов,
	|		СчетУчетаНДСПоРеализации,
	|		Субконто,
	|		Субконто.Код КАК СубконтоКод,
	|		Субконто.Наименование КАК СубконтоНаименование
	|	),
	|	РеализацияТоваровУслуг.ВалютаДокумента,
	|	РеализацияТоваровУслуг.ВалютаДокумента.Код,
	|	РеализацияТоваровУслуг.ВалютаДокумента.Наименование,
	|	РеализацияТоваровУслуг.ВидОперации,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Контрагент.Наименование,
	|	РеализацияТоваровУслуг.Контрагент.НаименованиеПолное,
	|	РеализацияТоваровУслуг.Контрагент.ИНН,
	|	РеализацияТоваровУслуг.Контрагент.КПП,
	|	РеализацияТоваровУслуг.Контрагент.ЮридическоеФизическоеЛицо,
	|	РеализацияТоваровУслуг.Контрагент.СтранаРегистрации,
	|	РеализацияТоваровУслуг.Контрагент.СтранаРегистрации.Код,
	|	РеализацияТоваровУслуг.Контрагент.СтранаРегистрации.Наименование,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.ВидДоговора,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Наименование,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Дата,
	|	РеализацияТоваровУслуг.ДоговорКонтрагента.Номер,
	|	РеализацияТоваровУслуг.КурсВзаиморасчетов,
	|	РеализацияТоваровУслуг.КратностьВзаиморасчетов,
	|	РеализацияТоваровУслуг.Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументСсылка");
	ЗапросСчетФактуры = Новый Запрос("ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Организация,
	|	СчетФактураВыданный.Контрагент,
	|	СчетФактураВыданный.ДоговорКонтрагента,
	|	СчетФактураВыданный.СуммаДокумента,
	|	СчетФактураВыданный.ВалютаДокумента,
	|	СчетФактураВыданный.Комментарий,
	|	СчетФактураВыданный.ДокументыОснования.(
	|		НомерСтроки,
	|		ДокументОснование,
	|		НомерИсходногоДокумента,
	|		ДатаИсходногоДокумента
	|	)
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументыОснования.ДокументОснование = &ДокументОснование
	|	И СчетФактураВыданный.Проведен = Истина
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.МоментВремени");
	ЗапросДокумента.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ВыборкаДокумента = ЗапросДокумента.Выполнить().Выбрать();
	//Поступление услуг и пр. некоммерции
	Пока ВыборкаДокумента.Следующий() Цикл
		XDTO_РеализацияТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.РеализацияТоваровУслуг"));
		
		РеализацияТоваровКлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "КлючевыеСвойства");
		РеализацияТоваровКлючевыеСвойства.Ссылка = КонвертироватьСсылкуВXDTO(ВыборкаДокумента.ДокументСсылка);
		РеализацияТоваровКлючевыеСвойства.Дата = ВыборкаДокумента.Дата;
		РеализацияТоваровКлючевыеСвойства.Номер = ВыборкаДокумента.Номер;
		
		ОрганизацияСтруктура = Новый Структура;
		//Организация.Вставить("Ссылка", "4993b015-509b-11e1-a558-001485883758");
		ОрганизацияСтруктура.Вставить("Наименование", ВыборкаДокумента.ОрганизацияНаименование);
		ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ВыборкаДокумента.ОрганизацияНаименованиеСокращенное);
		ОрганизацияСтруктура.Вставить("НаименованиеПолное", ВыборкаДокумента.ОрганизацияНаименованиеПолное);
		ОрганизацияСтруктура.Вставить("ИНН", ВыборкаДокумента.ОрганизацияИНН);
		ОрганизацияСтруктура.Вставить("КПП", ВыборкаДокумента.ОрганизацияКПП);
		ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", ПолучитьИмяПеречисления(ВыборкаДокумента.ОрганизацияЮридическоеФизическоеЛицо));
		Организация = ВыгрузитьКлючПоСтруктуре(РеализацияТоваровКлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
		
		XDTO_РеализацияТоваровУслуг.КлючевыеСвойства = РеализацияТоваровКлючевыеСвойства;
		XDTO_РеализацияТоваровУслуг.ВидОперации = "РеализацияКлиенту";
		Валюта = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Валюта");
		//Валюта.Ссылка = Строка(ВыборкаДокумента.ВалютаДокумента.УникальныйИдентификатор());
		Валюта.Код = ВыборкаДокумента.ВалютаДокументаКод;
		Валюта.Наименование = ВыборкаДокумента.ВалютаДокументаНаименование;
		XDTO_РеализацияТоваровУслуг.Валюта = Валюта;
		
		XDTO_РеализацияТоваровУслуг.СуммаВключаетНДС = ВыборкаДокумента.СуммаВключаетНДС;
		XDTO_РеализацияТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Подразделение");
		XDTO_РеализацияТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
		
		Контрагент = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Контрагент");
		//Контрагент.Ссылка = Строка(ВыборкаДокумента.Контрагент.УникальныйИдентификатор());
		Контрагент.Наименование = ВыборкаДокумента.КонтрагентНаименование;
		Контрагент.НаименованиеПолное = ВыборкаДокумента.КонтрагентНаименованиеПолное;
		Контрагент.ИНН = ВыборкаДокумента.КонтрагентИНН;
		Контрагент.КПП = ВыборкаДокумента.КонтрагентКПП;
		Контрагент.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
		
		Контрагент.СтранаРегистрации = ОбъектXDTOПоИмениСвойства(Контрагент, "СтранаРегистрации");
		//Контрагент.СтранаРегистрации.Ссылка = Строка(ВыборкаДокумента.КонтрагентСтранаРегистрации.УникальныйИдентификатор());
		Контрагент.СтранаРегистрации.Код = ВыборкаДокумента.КонтрагентСтранаРегистрацииКод;
		Контрагент.СтранаРегистрации.Наименование = ВыборкаДокумента.КонтрагентСтранаРегистрацииНаименование;
		XDTO_РеализацияТоваровУслуг.Контрагент = Контрагент;
		ВыгружаемыеТовары.Вставить("Контрагент_" + Контрагент.Наименование + Контрагент.ИНН, Контрагент);
		
		ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "ДанныеВзаиморасчетов");
		Договор = ОбъектXDTOПоИмениСвойства(ДанныеВзаиморасчетов, "Договор");
		//Договор.Ссылка = Строка(ДокументОбъект.ДоговорКонтрагента.УникальныйИдентификатор());
		Договор.ВидДоговора = "СПокупателем";
		Договор.Организация = Организация;
		Договор.Контрагент = Контрагент;
		Договор.ВалютаВзаиморасчетов = Валюта;
		Договор.РасчетыВУсловныхЕдиницах = ВыборкаДокумента.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		//Договор.Наименование = RecordSet.Fields("DOC_CONTRACTNAME").Value + " " + RecordSet.Fields("DOC_CONTRACTDESC").Value;
		Договор.Наименование = ВыборкаДокумента.ДоговорКонтрагентаНаименование;
		Договор.Дата = ВыборкаДокумента.ДоговорКонтрагентаДата;
		Договор.Номер = ВыборкаДокумента.ДоговорКонтрагентаНомер;
		ДанныеВзаиморасчетов.Договор = Договор;
		
		ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
			
		ДанныеВзаиморасчетов.КурсВзаиморасчетов = ВыборкаДокумента.КурсВзаиморасчетов;
		ДанныеВзаиморасчетов.КратностьВзаиморасчетов = ВыборкаДокумента.КратностьВзаиморасчетов;
		ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Договор.РасчетыВУсловныхЕдиницах;
		XDTO_РеализацияТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
		XDTO_РеализацияТоваровУслуг.Комментарий = ВыборкаДокумента.Комментарий;
		XDTO_РеализацияТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
		
		//Табличная часть
		XDTO_РеализацияТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Товары");
		ВыборкаТовары = ВыборкаДокумента.Товары.Выбрать();
		Пока ВыборкаТовары.Следующий() Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг.Товары, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = ВыборкаТовары.НомерСтроки;
				
			НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварСсылка", Неопределено);
			СтруктураПараметров.Вставить("КодТовара", ВыборкаТовары.НоменклатураКод);
			СтруктураПараметров.Вставить("Наименование", ВыборкаТовары.НоменклатураНаименование);
			СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовары.НоменклатураНаименованиеПолное);
			СтруктураПараметров.Вставить("Артикул", ВыборкаТовары.НоменклатураАртикул);
			СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
			СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
			СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
			СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовары.НоменклатураРодительКод);
			СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовары.НоменклатураРодительНаименование);
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
			
			XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, СтруктураПараметров);
			НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
			
			ЕдиницаИзмерения = ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
			
			НоваяСтрока.Количество = ВыборкаТовары.Количество;
			НоваяСтрока.Сумма = ВыборкаТовары.Сумма;
			НоваяСтрока.Цена = ВыборкаТовары.Цена;
			НоваяСтрока.СтавкаНДС = ПолучитьИмяПеречисления(ВыборкаТовары.СтавкаНДС);
			НоваяСтрока.СуммаНДС = ВыборкаТовары.СуммаНДС;
			НоваяСтрока.ТипЗапасов = "СобственныеТовары";
			
			СтрокиТов = ТабАртикулов.НайтиСтроки(Новый Структура("MEREXTERNALITEMID", ВыборкаТовары.НоменклатураКод));
			Если СтрокиТов.Количество() > 0 Тогда
				СтрокаТов = СтрокиТов[0];
				НомерГТД = СтрокаТов.merInventGTD + "/" + СтрокаТов.LINENUMGTD;
				СтранаКод = СтрокаТов.COUNTRYNUMID_MRC;
				СтранаКодАльфа3 = СтрокаТов.CountryId;
				СтранаНаименование = СтрокаТов.COUNTRY;
			Иначе
				НомерГТД = ВыборкаТовары.НомерГТДПредставление;
				СтранаКод = ВыборкаТовары.СтранаПроисхожденияКод;
				СтранаКодАльфа3 = ВыборкаТовары.СтранаПроисхожденияКодАльфа3;
				СтранаНаименование = ВыборкаТовары.СтранаПроисхожденияНаименование;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НомерГТД) Тогда
				ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
				ДанныеГТД.НомерГТД = НомерГТД;
				СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеТовары, ДанныеГТД, СтранаКодАльфа3,
				СтранаНаименование, СтранаКод);
				НоваяСтрока.ДанныеГТД = ДанныеГТД;
			КонецЕсли;
			НоваяСтрока.СчетУчета = Строка(ВыборкаТовары.СчетУчета);
			XDTO_РеализацияТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
			
		КонецЦикла;
	
		XDTO_РеализацияТоваровУслуг.Услуги = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Услуги");
		ВыборкаУслуги = ВыборкаДокумента.Услуги.Выбрать();
		Пока ВыборкаУслуги.Следующий() Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг.Услуги, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = ВыборкаУслуги.НомерСтроки;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварСсылка", ВыборкаУслуги.Номенклатура);
			СтруктураПараметров.Вставить("КодТовара", ВыборкаУслуги.НоменклатураКод);
			СтруктураПараметров.Вставить("Наименование", ВыборкаУслуги.НоменклатураНаименование);
			СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаУслуги.НоменклатураНаименованиеПолное);
			СтруктураПараметров.Вставить("Артикул", ВыборкаУслуги.НоменклатураАртикул);
			СтруктураПараметров.Вставить("ТипНоменклатуры", "Услуга");
			СтруктураПараметров.Вставить("ВидНоменклатуры", "Услуги");
			СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
			СтруктураПараметров.Вставить("КодГруппы", ВыборкаУслуги.НоменклатураРодительКод);
			СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаУслуги.НоменклатураРодительНаименование);
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
			
			XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, СтруктураПараметров);
			НоваяСтрока.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
			
			НоваяСтрока.Количество = ВыборкаУслуги.Количество;
			НоваяСтрока.Сумма = ВыборкаУслуги.Сумма;
			НоваяСтрока.Цена = ВыборкаУслуги.Цена;
			НоваяСтрока.СтавкаНДС = ПолучитьИмяПеречисления(ВыборкаУслуги.СтавкаНДС);
			НоваяСтрока.СуммаНДС = ВыборкаУслуги.СуммаНДС;
			НоваяСтрока.Содержание = ВыборкаУслуги.Содержание;
			
			НоваяСтрока.ДанныеЗатрат = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеЗатрат");
			НоваяСтрока.ДанныеЗатрат.СчетРасходов = Строка(ВыборкаУслуги.СчетРасходов);
			НоваяСтрока.ДанныеЗатрат.СчетУчетаНДСПоРеализации = Строка(ВыборкаУслуги.СчетУчетаНДСПоРеализации);
			//НоваяСтрока.ДанныеЗатрат.ПодразделениеЗатрат = Строка(СтрокаТЧ.ПодразделениеЗатрат);
			//Если ЗначениеЗаполнено(ВыборкаУслуги.Субконто) Тогда
			//	СтатьяЗатрат = ОбъектXDTOПоИмениСвойства(НоваяСтрока.ДанныеЗатрат, "СтатьяЗатрат");
			//	СтатьяЗатрат.КодВПрограмме = ВыборкаУслуги.СубконтоКод;
			//	СтатьяЗатрат.Наименование = ВыборкаУслуги.СубконтоНаименование;
			//	НоваяСтрока.ДанныеЗатрат.СтатьяЗатрат = СтатьяЗатрат;
			//КонецЕсли;
			
			XDTO_РеализацияТоваровУслуг.Услуги.Строка.Добавить(НоваяСтрока);
			
		КонецЦикла;
	
		XDTO_РеализацияТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
		XDTO_РеализацияТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_РеализацияТоваровУслуг);
		
		ЗапросСчетФактуры.УстановитьПараметр("ДокументОснование", ВыборкаДокумента.ДокументСсылка);
		ВыборкаСчетФактуры = ЗапросСчетФактуры.Выполнить().Выбрать();
		Пока ВыборкаСчетФактуры.Следующий() Цикл
			XDTO_СчетФактураВыданный = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.СчетФактураВыданный"));
			
			XDTO_СчетФактураВыданный.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураВыданный, "КлючевыеСвойства");
			XDTO_СчетФактураВыданный.КлючевыеСвойства.Ссылка = КонвертироватьСсылкуВXDTO(ВыборкаСчетФактуры.Ссылка);
			XDTO_СчетФактураВыданный.КлючевыеСвойства.Номер = ВыборкаСчетФактуры.Номер;
			XDTO_СчетФактураВыданный.КлючевыеСвойства.Дата = ВыборкаСчетФактуры.Дата;
			XDTO_СчетФактураВыданный.КлючевыеСвойства.Организация = Организация;
			
			XDTO_СчетФактураВыданный.Валюта = Валюта;
			
			XDTO_СчетФактураВыданный.Контрагент = Контрагент;
			
			XDTO_СчетФактураВыданный.Договор = Договор;
			XDTO_СчетФактураВыданный.ВидСчетаФактуры = "НаРеализацию";
			XDTO_СчетФактураВыданный.КодВидаОперации = "01";
			XDTO_СчетФактураВыданный.Выставлен = Истина;
			XDTO_СчетФактураВыданный.ДатаВыставления = ВыборкаСчетФактуры.Дата;
			XDTO_СчетФактураВыданный.СпособВыставления = "ВЭлектронномВиде";
			
			XDTO_СчетФактураВыданный.ДокументыОснования = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураВыданный, "ДокументыОснования");
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураВыданный.ДокументыОснования, "Строка");
			СоставнойДокументРасчетов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "СоставнойДокументРасчетов"));
			СоставнойДокументРасчетов.РеализацияТоваровУслугСсылка = XDTO_РеализацияТоваровУслуг.КлючевыеСвойства;
			НоваяСтрока.ДокументОснование = СоставнойДокументРасчетов;
			XDTO_СчетФактураВыданный.ДокументыОснования.Строка.Добавить(НоваяСтрока);
			// 4. Записываем ОбъектXDTO в XML-файл.
			ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_СчетФактураВыданный);
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьОтчетКомитенту(ФайлОбмена, XMLСхема, Соединение, ДокументСсылка, ВыгружаемыеТовары, ТабАртикулов)
	
	СтруктураПоиска = Новый Структура("MEREXTERNALITEMID");
	
	ЗапросДокумента = Новый Запрос("ВЫБРАТЬ
	|	Док.Ссылка КАК ДокументСсылка,
	|	Док.Дата,
	|	Док.Номер,
	|	Док.Организация,
	|	Док.Организация.Наименование КАК ОрганизацияНаименование,
	|	Док.Организация.НаименованиеСокращенное КАК ОрганизацияНаименованиеСокращенное,
	|	Док.Организация.НаименованиеПолное КАК ОрганизацияНаименованиеПолное,
	|	Док.Организация.ИНН КАК ОрганизацияИНН,
	|	Док.Организация.КПП КАК ОрганизацияКПП,
	|	Док.Организация.ЮридическоеФизическоеЛицо КАК ОрганизацияЮридическоеФизическоеЛицо,
	|	Док.ВалютаДокумента,
	|	Док.ВалютаДокумента.Код,
	|	Док.ВалютаДокумента.Наименование,
	|	Док.ВидОперации,
	|	Док.СуммаДокумента,
	|	Док.СуммаВключаетНДС,
	|	Док.Контрагент,
	|	Док.Контрагент.Наименование,
	|	Док.Контрагент.НаименованиеПолное,
	|	Док.Контрагент.ИНН,
	|	Док.Контрагент.КПП,
	|	Док.Контрагент.ЮридическоеФизическоеЛицо,
	|	Док.Контрагент.СтранаРегистрации,
	|	Док.Контрагент.СтранаРегистрации.Код,
	|	Док.Контрагент.СтранаРегистрации.Наименование,
	|	Док.ДоговорКонтрагента,
	|	Док.ДоговорКонтрагента.ВидДоговора,
	|	Док.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	Док.ДоговорКонтрагента.Наименование,
	|	Док.ДоговорКонтрагента.Дата,
	|	Док.ДоговорКонтрагента.Номер,
	|	Док.КурсВзаиморасчетов,
	|	Док.КратностьВзаиморасчетов,
	|	Док.Комментарий,
	|	Док.СпособРасчетаКомиссионногоВознаграждения,
	|	Док.ПроцентКомиссионногоВознаграждения,
	|	Док.СтавкаНДСВознаграждения,
	|	Док.УдержатьВознаграждение,
	|	Док.СуммаВознаграждения
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК Док
	|ГДЕ
	|	Док.Ссылка = &ДокументСсылка");
	
	
	ЗапросТоваров = Новый Запрос("ВЫБРАТЬ
	|	ТовДок.КлючСтроки,
	|	ТовДок.Номенклатура,
	|	ТовДок.ЕдиницаИзмерения,
	|	ТовДок.Количество,
	|	ТовДок.СуммаПоступления,
	|	ТовДок.Сумма,
	|	ТовДок.СтавкаНДС,
	|	ТовДок.СуммаНДС,
	|	ТовДок.СуммаВознаграждения,
	|	ТовДок.СуммаНДСВознаграждения,
	|	СправочникНоменклатуры.Код КАК НоменклатураКод,
	|	СправочникНоменклатуры.Наименование КАК НоменклатураНаименование,
	|	СправочникНоменклатуры.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|	СправочникНоменклатуры.Артикул КАК НоменклатураАртикул,
	|	СправочникНоменклатуры.Услуга КАК НоменклатураУслуга,
	|	СправочникНоменклатуры.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|	СправочникНоменклатуры.Родитель КАК НоменклатураРодитель,
	|	СправочникНоменклатуры.Родитель.Код КАК НоменклатураРодительКод,
	|	СправочникНоменклатуры.Родитель.Наименование КАК НоменклатураРодительНаименование,
	|	КлассификаторЕдиницИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	КлассификаторЕдиницИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТовДок.КлючСтроки КАК КлючСтроки,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		СУММА(ТовДок.Количество) КАК Количество,
	|		СУММА(ТовДок.СуммаПоступления) КАК СуммаПоступления,
	|		СУММА(ТовДок.Сумма) КАК Сумма,
	|		ТовДок.СтавкаНДС КАК СтавкаНДС,
	|		СУММА(ТовДок.СуммаНДС) КАК СуммаНДС,
	|		СУММА(ТовДок.СуммаВознаграждения) КАК СуммаВознаграждения,
	|		СУММА(ТовДок.СуммаНДСВознаграждения) КАК СуммаНДСВознаграждения
	|	ИЗ
	|		Документ.ОтчетКомитентуОПродажах.Товары КАК ТовДок
	|	ГДЕ
	|		ТовДок.Ссылка = &ДокументСсылка
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.Номенклатура,
	|		ТовДок.ЕдиницаИзмерения,
	|		ТовДок.СтавкаНДС,
	|		ТовДок.КлючСтроки
	|	ИМЕЮЩИЕ
	|		СУММА(ТовДок.Количество) <> 0) КАК ТовДок
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|	ПО ТовДок.Номенклатура = СправочникНоменклатуры.Ссылка
	|ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторЕдиницИзмерения КАК КлассификаторЕдиницИзмерения
	|	ПО ТовДок.ЕдиницаИзмерения = КлассификаторЕдиницИзмерения.Ссылка");
	
	ЗапросСчетФактуры = Новый Запрос("ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Номер,
	|	СчетФактураВыданный.Организация,
	|	СчетФактураВыданный.Контрагент,
	|	СчетФактураВыданный.ДоговорКонтрагента,
	|	СчетФактураВыданный.СуммаДокумента,
	|	СчетФактураВыданный.ВалютаДокумента,
	|	СчетФактураВыданный.Комментарий,
	|	СчетФактураВыданный.ДокументыОснования.(
	|		НомерСтроки,
	|		ДокументОснование,
	|		НомерИсходногоДокумента,
	|		ДатаИсходногоДокумента
	|	)
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ДокументыОснования.ДокументОснование = &ДокументОснование
	|	И СчетФактураВыданный.Проведен = Истина
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетФактураВыданный.МоментВремени");
	ЗапросДокумента.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ВыборкаДокумента = ЗапросДокумента.Выполнить().Выбрать();
	//Поступление услуг и пр. некоммерции
	Пока ВыборкаДокумента.Следующий() Цикл
		XDTO_ОтчетКомиссионера = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ОтчетКомиссионера"));
		
		ОтчетКомиссионераКлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера, "КлючевыеСвойства");
		//ОтчетКомиссионераКлючевыеСвойства.Ссылка = КонвертироватьСсылкуВXDTO(ВыборкаДокумента.ДокументСсылка);
		ОтчетКомиссионераКлючевыеСвойства.Дата = ВыборкаДокумента.Дата;
		ОтчетКомиссионераКлючевыеСвойства.Номер = ВыборкаДокумента.Номер;
		
		ОрганизацияСтруктура = Новый Структура;
		//Организация.Вставить("Ссылка", "4993b015-509b-11e1-a558-001485883758");
		ОрганизацияСтруктура.Вставить("Наименование", ВыборкаДокумента.КонтрагентНаименование);
		ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ВыборкаДокумента.КонтрагентНаименование);
		ОрганизацияСтруктура.Вставить("НаименованиеПолное", ВыборкаДокумента.КонтрагентНаименованиеПолное);
		ОрганизацияСтруктура.Вставить("ИНН", ВыборкаДокумента.КонтрагентИНН);
		ОрганизацияСтруктура.Вставить("КПП", ВыборкаДокумента.КонтрагентКПП);
		ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");
		Организация = ВыгрузитьКлючПоСтруктуре(ОтчетКомиссионераКлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
		
		XDTO_ОтчетКомиссионера.КлючевыеСвойства = ОтчетКомиссионераКлючевыеСвойства;
		
		XDTO_ОтчетКомиссионера.ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера, "ДанныеВходящегоДокумента");
		XDTO_ОтчетКомиссионера.ДанныеВходящегоДокумента.НомерВходящегоДокумента = ВыборкаДокумента.Номер;
		XDTO_ОтчетКомиссионера.ДанныеВходящегоДокумента.ДатаВходящегоДокумента = ВыборкаДокумента.Дата;
		XDTO_ОтчетКомиссионера.ДанныеВходящегоДокумента.НаименованиеВходящегоДокумента = "Отчёт комитента";
		
		Валюта = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера, "Валюта");
		//Валюта.Ссылка = Строка(ВыборкаДокумента.ВалютаДокумента.УникальныйИдентификатор());
		Валюта.Код = ВыборкаДокумента.ВалютаДокументаКод;
		Валюта.Наименование = ВыборкаДокумента.ВалютаДокументаНаименование;
		XDTO_ОтчетКомиссионера.Валюта = Валюта;
		
		XDTO_ОтчетКомиссионера.Сумма = ВыборкаДокумента.СуммаДокумента;
		
		XDTO_ОтчетКомиссионера.СуммаВключаетНДС = ВыборкаДокумента.СуммаВключаетНДС;
		XDTO_ОтчетКомиссионера.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера, "Подразделение");
		XDTO_ОтчетКомиссионера.Подразделение.Наименование = "Основное подразделение";
		
		Контрагент = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера, "Контрагент");
		//Контрагент.Ссылка = Строка(ВыборкаДокумента.Контрагент.УникальныйИдентификатор());
		Контрагент.Наименование = ВыборкаДокумента.ОрганизацияНаименование;
		Контрагент.НаименованиеПолное = ВыборкаДокумента.ОрганизацияНаименованиеПолное;
		Контрагент.ИНН = ВыборкаДокумента.ОрганизацияИНН;
		Контрагент.КПП = ВыборкаДокумента.ОрганизацияКПП;
		Контрагент.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
		
		Контрагент.СтранаРегистрации = ОбъектXDTOПоИмениСвойства(Контрагент, "СтранаРегистрации");
		//Контрагент.СтранаРегистрации.Ссылка = Строка(ВыборкаДокумента.КонтрагентСтранаРегистрации.УникальныйИдентификатор());
		Контрагент.СтранаРегистрации.Код = ВыборкаДокумента.КонтрагентСтранаРегистрацииКод;
		Контрагент.СтранаРегистрации.Наименование = ВыборкаДокумента.КонтрагентСтранаРегистрацииНаименование;
		XDTO_ОтчетКомиссионера.Контрагент = Контрагент;
		ВыгружаемыеТовары.Вставить("Контрагент_" + Контрагент.Наименование + Контрагент.ИНН, Контрагент);
		
		ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера, "ДанныеВзаиморасчетов");
		Договор = ОбъектXDTOПоИмениСвойства(ДанныеВзаиморасчетов, "Договор");
		//Договор.Ссылка = Строка(ДокументОбъект.ДоговорКонтрагента.УникальныйИдентификатор());
		Договор.ВидДоговора = "СКомиссионером";
		Договор.Организация = Организация;
		Договор.Контрагент = Контрагент;
		Договор.ВалютаВзаиморасчетов = Валюта;
		Договор.РасчетыВУсловныхЕдиницах = ВыборкаДокумента.ДоговорКонтрагентаРасчетыВУсловныхЕдиницах;
		//Договор.Наименование = RecordSet.Fields("DOC_CONTRACTNAME").Value + " " + RecordSet.Fields("DOC_CONTRACTDESC").Value;
		Договор.Наименование = ВыборкаДокумента.ДоговорКонтрагентаНаименование;
		Договор.Дата = ВыборкаДокумента.ДоговорКонтрагентаДата;
		Договор.Номер = ВыборкаДокумента.ДоговорКонтрагентаНомер;
		ДанныеВзаиморасчетов.Договор = Договор;
		
		ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
			
		ДанныеВзаиморасчетов.КурсВзаиморасчетов = ВыборкаДокумента.КурсВзаиморасчетов;
		ДанныеВзаиморасчетов.КратностьВзаиморасчетов = ВыборкаДокумента.КратностьВзаиморасчетов;
		ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Договор.РасчетыВУсловныхЕдиницах;
		XDTO_ОтчетКомиссионера.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
		XDTO_ОтчетКомиссионера.Комментарий = ВыборкаДокумента.Комментарий;
		XDTO_ОтчетКомиссионера.УдержатьКомиссионноеВознаграждение = ВыборкаДокумента.УдержатьВознаграждение;
		XDTO_ОтчетКомиссионера.СпособРасчетаКомиссионногоВознаграждения = ПолучитьИмяПеречисления(ВыборкаДокумента.СпособРасчетаКомиссионногоВознаграждения);
		XDTO_ОтчетКомиссионера.ПроцентКомиссионногоВознаграждения = ВыборкаДокумента.ПроцентКомиссионногоВознаграждения;
		XDTO_ОтчетКомиссионера.СуммаВознаграждения = ВыборкаДокумента.СуммаВознаграждения;
		XDTO_ОтчетКомиссионера.СтавкаНДСВознаграждения = ПолучитьИмяПеречисления(ВыборкаДокумента.СтавкаНДСВознаграждения);
		
		//Табличная часть
		XDTO_ОтчетКомиссионера.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера, "Товары");
		ЗапросТоваров.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		ВыборкаТовары = ЗапросТоваров.Выполнить().Выбрать();
		НомерСтрокиДокумента = 0;
		Пока ВыборкаТовары.Следующий() Цикл
			НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера.Товары, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
				
			НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварСсылка", ВыборкаТовары.Номенклатура);
			СтруктураПараметров.Вставить("КодТовара", ВыборкаТовары.НоменклатураКод);
			СтруктураПараметров.Вставить("Наименование", ВыборкаТовары.НоменклатураНаименование);
			СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовары.НоменклатураНаименованиеПолное);
			СтруктураПараметров.Вставить("Артикул", ВыборкаТовары.НоменклатураАртикул);
			СтруктураПараметров.Вставить("ТипНоменклатуры", ?(ВыборкаТовары.НоменклатураУслуга = Истина, "Услуга", "Товар"));
			СтруктураПараметров.Вставить("ВидНоменклатуры", ?(ВыборкаТовары.НоменклатураУслуга = Истина, "Услуги", "Товары"));
			СтруктураПараметров.Вставить("СсылкаГруппы", ВыборкаТовары.НоменклатураРодитель);
			СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовары.НоменклатураРодительКод);
			СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовары.НоменклатураРодительНаименование);
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Ложь);
			
			XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, СтруктураПараметров);
			НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
			
			ЕдиницаИзмерения = ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
			
			НоваяСтрока.Количество = ВыборкаТовары.Количество;
			НоваяСтрока.Сумма = ВыборкаТовары.Сумма;
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2);
			НоваяСтрока.СтавкаНДС = ПолучитьИмяПеречисления(ВыборкаТовары.СтавкаНДС);
			НоваяСтрока.СуммаНДС = ВыборкаТовары.СуммаНДС;
			Если ВыборкаТовары.НоменклатураУслуга Тогда
				НоваяСтрока.ТипЗапасов = "ПокупныеИзделия";
			Иначе
				НоваяСтрока.ТипЗапасов = "СобственныеТовары";
			КонецЕсли;
			НоваяСтрока.ЦенаПередачи = Окр(ВыборкаТовары.СуммаПоступления / НоваяСтрока.Количество, 2);
			НоваяСтрока.СуммаПередачи = ВыборкаТовары.СуммаПоступления;
			НоваяСтрока.СуммаВознаграждения = ВыборкаТовары.СуммаВознаграждения;
			НоваяСтрока.СуммаНДСВознаграждения = ВыборкаТовары.СуммаНДСВознаграждения;
			НоваяСтрока.КлючСтроки = 1;
			
			XDTO_ОтчетКомиссионера.Товары.Строка.Добавить(НоваяСтрока);
		КонецЦикла;
		XDTO_ОтчетКомиссионера.Покупатели = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера, "Покупатели");
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ОтчетКомиссионера.Покупатели, "Строка");
			НоваяСтрока.КлючСтроки = 1;
			XDTO_ОтчетКомиссионера.Покупатели.Строка.Добавить(НоваяСтрока);
			
		XDTO_ОтчетКомиссионера.СпособПогашенияЗадолженности = "Автоматически";
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ОтчетКомиссионера);
		
		ЗапросСчетФактуры.УстановитьПараметр("ДокументОснование", ВыборкаДокумента.ДокументСсылка);
		ВыборкаСчетФактуры = ЗапросСчетФактуры.Выполнить().Выбрать();
		Пока ВыборкаСчетФактуры.Следующий() Цикл
			XDTO_СчетФактураПолученный = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.СчетФактураПолученный"));
			
			XDTO_СчетФактураПолученный.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный, "КлючевыеСвойства");
			XDTO_СчетФактураПолученный.КлючевыеСвойства.Ссылка = ОтчетКомиссионераКлючевыеСвойства.Ссылка;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.НомерВходящегоДокумента = ВыборкаСчетФактуры.Номер;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.ДатаВходящегоДокумента = ВыборкаСчетФактуры.Дата;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.Организация = Организация;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.Контрагент = Контрагент;
			XDTO_СчетФактураПолученный.ДатаПолучения = ВыборкаСчетФактуры.Дата;
			
			XDTO_СчетФактураПолученный.Валюта = Валюта;
			
			XDTO_СчетФактураПолученный.Договор = Договор;
			XDTO_СчетФактураПолученный.ВидСчетаФактуры = "НаПоступление";
			XDTO_СчетФактураПолученный.КодВидаОперации = "01";
			XDTO_СчетФактураПолученный.СпособВыставления = "ВЭлектронномВиде";
			
			XDTO_СчетФактураПолученный.ДокументыОснования = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный, "ДокументыОснования");
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный.ДокументыОснования, "Строка");
			СоставнойДокументРасчетов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "СоставнойДокументРасчетов"));
			СоставнойДокументРасчетов.ОтчетКомиссионераСсылка = ОтчетКомиссионераКлючевыеСвойства.КлючевыеСвойства;
			НоваяСтрока.ДокументОснование = СоставнойДокументРасчетов;
			XDTO_СчетФактураПолученный.ДокументыОснования.Строка.Добавить(НоваяСтрока);
			// 4. Записываем ОбъектXDTO в XML-файл.
			ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_СчетФактураПолученный);
		КонецЦикла;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьОстаткиВнешнее(ФайлОбмена, XMLСхема, Соединение, НомерДокумента, ДатаДокумента, ВыгружаемыеОбъекты, ТабАртикулов)
	//Остатки
	СтруктураПоиска = Новый Структура("НомерДокумента, ДатаДокумента, ТипДокумента", НомерДокумента, ДатаДокумента, "ОстОприход");
	ТабДокумента = ЭтотОбъект.ТаблицаЗакупокXLS.НайтиСтроки(СтруктураПоиска);
	//Поступление услуг и пр. некоммерции
	Если ТабДокумента.Количество() > 0 Тогда
		ВыборкаДокумента = ТабДокумента[0];
	
		XDTO_ОприходованиеТоваров = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ОприходованиеТоваров"));
		
		XDTO_ОприходованиеТоваров.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ОприходованиеТоваров, "КлючевыеСвойства");
		XDTO_ОприходованиеТоваров.КлючевыеСвойства.Ссылка = ХэшMD5Простой(НомерДокумента);
		XDTO_ОприходованиеТоваров.КлючевыеСвойства.Дата = ДатаДокумента;
		XDTO_ОприходованиеТоваров.КлючевыеСвойства.Номер = НомерДокумента;
		
		ОрганизацияСтруктура = Новый Структура;
		ОрганизацияСтруктура.Вставить("Наименование", ВыборкаДокумента.Организация.Наименование);
		ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ВыборкаДокумента.Организация.НаименованиеСокращенное);
		ОрганизацияСтруктура.Вставить("НаименованиеПолное", ВыборкаДокумента.Организация.НаименованиеПолное);
		ОрганизацияСтруктура.Вставить("ИНН", ВыборкаДокумента.Организация.ИНН);
		ОрганизацияСтруктура.Вставить("КПП", ВыборкаДокумента.Организация.КПП);
		ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", ПолучитьИмяПеречисления(ВыборкаДокумента.Организация.ЮридическоеФизическоеЛицо));
		Организация = ВыгрузитьКлючПоСтруктуре(XDTO_ОприходованиеТоваров.КлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
		
		ВыгружаемыеОбъекты.Вставить("Организация_" + Организация.ИНН, Организация);
	
		XDTO_ОприходованиеТоваров.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ОприходованиеТоваров, "Подразделение");
		XDTO_ОприходованиеТоваров.Подразделение.Наименование = "Основное подразделение";
	
		Склад = ОбъектXDTOПоИмениСвойства(XDTO_ОприходованиеТоваров, "Склад");
		Склад.Ссылка = "fe5547d4-3d84-11df-96f8-000c6ea69372";
		Склад.Наименование = "Основной склад";
		Склад.ТипСклада = "Оптовый";
		XDTO_ОприходованиеТоваров.Склад = Склад;
		ВыгружаемыеОбъекты.Вставить("Склад_" + Склад.Ссылка, Склад);
	
		//Табличная часть
		Товары = ОбъектXDTOПоИмениСвойства(XDTO_ОприходованиеТоваров, "Товары");
		СуммаДокумента = 0;
	
		Для Каждого СтрокаТЧ Из ТабДокумента Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(Товары, "Строка");
			
			НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварСсылка", СтрокаТЧ.Номенклатура);
			СтруктураПараметров.Вставить("КодТовара", СтрокаТЧ.КодАртикула);
			СтруктураПараметров.Вставить("Наименование", СтрокаТЧ.НаименованиеТовара);
			СтруктураПараметров.Вставить("НаименованиеПолное", СтрокаТЧ.НаименованиеТовара);
			СтруктураПараметров.Вставить("Артикул", СтрокаТЧ.АртикулТовара);
			СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
			СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
			СтруктураПараметров.Вставить("СсылкаГруппы", СтрокаТЧ.ГруппаСсылка);
			СтруктураПараметров.Вставить("КодГруппы", СтрокаТЧ.КодГруппы);
			СтруктураПараметров.Вставить("НаименованиеГруппы", СтрокаТЧ.Группа);
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
			
			XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, СтруктураПараметров);
			НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
			
			ЕдиницаИзмерения = ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
			ВыгружаемыеОбъекты.Вставить("ЕдиницаИзмерения_" + ЕдиницаИзмерения.Код, ЕдиницаИзмерения);
			Если СтрокаТЧ.Количество = 0 Тогда
				НоваяСтрока.Количество = 1;
			Иначе
				НоваяСтрока.Количество = СтрокаТЧ.Количество;
			КонецЕсли;
			НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
			Если НоваяСтрока.Количество = 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма;
			Иначе
				НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2);
			КонецЕсли;
			СуммаДокумента = СуммаДокумента + НоваяСтрока.Сумма;
			
			Если СтрокаТЧ.Комиссия Тогда
				НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
			Иначе
				НоваяСтрока.ТипЗапасов = "ПокупныеИзделия";
			КонецЕсли;
			
			ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
			ДанныеГТД.НомерГТД = СтрокаТЧ.НомерГТД;
			
			СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеОбъекты, ДанныеГТД, СтрокаТЧ.СтранаПроисхожденияКодАльфа3, СтрокаТЧ.СтранаПроисхождения, СтрокаТЧ.СтранаПроисхожденияКод);
			
			НоваяСтрока.ДанныеГТД = ДанныеГТД;
			НоваяСтрока.СчетУчета = СтрокаТЧ.СчетУчета;
			
			Товары.Строка.Добавить(НоваяСтрока);
			
		КонецЦикла;
		XDTO_ОприходованиеТоваров.Сумма = СуммаДокумента;
		XDTO_ОприходованиеТоваров.Товары = Товары;
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ОприходованиеТоваров);
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьПостВнешнее(ФайлОбмена, XMLСхема, Соединение, НомерДокумента, ДатаДокумента, ВыгружаемыеТовары, ТабАртикулов)
	
	СтруктураПоиска = Новый Структура("НомерДокумента, ДатаДокумента", НомерДокумента, ДатаДокумента);
	ТабДокумента = ЭтотОбъект.ТаблицаЗакупокXLS.НайтиСтроки(СтруктураПоиска);
	//Поступление услуг и пр. некоммерции
	Если ТабДокумента.Количество() > 0 Тогда
		ВыборкаДокумента = ТабДокумента[0];
		
		XDTO_ПоступлениеТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ПоступлениеТоваровУслуг"));
		
		ПоступлениеТоваровКлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "КлючевыеСвойства");
		Номер = СтрЗаменить(ВыборкаДокумента.НомерДокумента, "/", "");
		Номер = СтрЗаменить(Номер, "-", "");
		Номер = Прав(Номер, 11);
		ПоступлениеТоваровКлючевыеСвойства.Ссылка = ХэшMD5Простой(ВыборкаДокумента.НомерДокумента);
		ПоступлениеТоваровКлючевыеСвойства.Дата = ВыборкаДокумента.ДатаДокумента;
		ПоступлениеТоваровКлючевыеСвойства.Номер = Номер;
		
		ОрганизацияСтруктура = Новый Структура;
		//Организация.Вставить("Ссылка", "4993b015-509b-11e1-a558-001485883758");
		ОрганизацияСтруктура.Вставить("Наименование", ВыборкаДокумента.Организация.Наименование);
		ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ВыборкаДокумента.Организация.НаименованиеСокращенное);
		ОрганизацияСтруктура.Вставить("НаименованиеПолное", ВыборкаДокумента.Организация.НаименованиеПолное);
		ОрганизацияСтруктура.Вставить("ИНН", ВыборкаДокумента.Организация.ИНН);
		ОрганизацияСтруктура.Вставить("КПП", ВыборкаДокумента.Организация.КПП);
		ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", ПолучитьИмяПеречисления(ВыборкаДокумента.Организация.ЮридическоеФизическоеЛицо));
		Организация = ВыгрузитьКлючПоСтруктуре(ПоступлениеТоваровКлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
		ВыгружаемыеТовары.Вставить("Организация_" + Организация.ИНН, Организация);
		
		XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства = ПоступлениеТоваровКлючевыеСвойства;
		
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВходящегоДокумента");
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.НомерВходящегоДокумента = ВыборкаДокумента.НомерДокумента;
		XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.ДатаВходящегоДокумента = ВыборкаДокумента.ДатаДокумента;
			
		//Табличная часть
		XDTO_ПоступлениеТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Товары");
		НомерСтрокиДокумента = 1;
		Для Каждого ВыборкаТовары Из ТабДокумента Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг.Товары, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
				
			НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварСсылка", Неопределено);
			СтруктураПараметров.Вставить("КодТовара", ВыборкаТовары.КодАртикула);
			СтруктураПараметров.Вставить("Наименование", ВыборкаТовары.НаименованиеТовара);
			СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовары.НаименованиеПолноеТовара);
			СтруктураПараметров.Вставить("Артикул", ВыборкаТовары.АртикулТовара);
			СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
			СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
			СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
			СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовары.КодГруппы);
			СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовары.Группа);
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Не ВыборкаТовары.НеВыгружатьНоменклатуру);
			
			XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, СтруктураПараметров);
			НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
			
			ЕдиницаИзмерения = ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
			
			НоваяСтрока.Количество = ВыборкаТовары.Количество;
			НоваяСтрока.Сумма = ВыборкаТовары.Сумма;
			НоваяСтрока.Цена = ВыборкаТовары.Цена;
			НоваяСтрока.СтавкаНДС = ПолучитьНДСПоПредставлению(ВыборкаТовары.СтавкаНДС);
			НоваяСтрока.СуммаНДС = ВыборкаТовары.СуммаНДС;
			Если ВыборкаТовары.СчетУчета = "004.01" Тогда
				НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
			Иначе
				НоваяСтрока.ТипЗапасов = "СобственныеТовары";
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаТовары.НомерГТД) Тогда
				ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
				ДанныеГТД.НомерГТД = ВыборкаТовары.НомерГТД;
				СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеТовары, ДанныеГТД, "",
				ВыборкаТовары.СтранаПроисхождения, ВыборкаТовары.СтранаПроисхожденияКод);
				НоваяСтрока.ДанныеГТД = ДанныеГТД;
			КонецЕсли;
			XDTO_ПоступлениеТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
			НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
		КонецЦикла;
	
		Валюта = ВыгрузитьКлючПоСтруктуре(XDTO_ПоступлениеТоваровУслуг, ВалютаРуб, "Валюта", XMLСхема);
		Если ВыборкаДокумента.Комиссия Тогда
			XDTO_ПоступлениеТоваровУслуг.ВидОперации = "ПриемНаКомиссию";
		Иначе
			XDTO_ПоступлениеТоваровУслуг.ВидОперации = "ПокупкаУПоставщика";
		КонецЕсли;
		XDTO_ПоступлениеТоваровУслуг.СуммаВключаетНДС = Истина;
		
		XDTO_ПоступлениеТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Подразделение");
		XDTO_ПоступлениеТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
		
		Контрагент = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Контрагент");
		//Контрагент.Ссылка = Строка(ВыборкаДокумента.Контрагент.УникальныйИдентификатор());
		Контрагент.Наименование = ВыборкаДокумента.КонтрагентНаименование;
		Контрагент.НаименованиеПолное = ВыборкаДокумента.КонтрагентНаименование;
		ИННКПП = СтрРазделить(ВыборкаДокумента.КонтрагентИННКПП, "/");
		Контрагент.ИНН = ИННКПП[0];
		Контрагент.КПП = ИННКПП[1];
		Контрагент.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
		
		СтранаРегистрации = ВыгрузитьКлючПоСтруктуре(Контрагент, СтранаРоссия, "СтранаРегистрации", XMLСхема);
		XDTO_ПоступлениеТоваровУслуг.Контрагент = Контрагент;
		ВыгружаемыеТовары.Вставить("Контрагент_" + Контрагент.ИНН + "_" + Контрагент.КПП, Контрагент);
		
		ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВзаиморасчетов");
		Договор = ОбъектXDTOПоИмениСвойства(ДанныеВзаиморасчетов, "Договор");
		//Договор.Ссылка = Строка(ДокументОбъект.ДоговорКонтрагента.УникальныйИдентификатор());
		Если ВыборкаДокумента.Комиссия Тогда
			Договор.ВидДоговора = "СКомитентом";
		Иначе
			Договор.ВидДоговора = "СПоставщиком";
		КонецЕсли;
		Договор.Организация = Организация;
		Договор.Контрагент = Контрагент;
		Договор.ВалютаВзаиморасчетов = Валюта;
		Договор.РасчетыВУсловныхЕдиницах = Ложь;
		//Договор.Наименование = RecordSet.Fields("DOC_CONTRACTNAME").Value + " " + RecordSet.Fields("DOC_CONTRACTDESC").Value;
		Договор.Наименование = "Основной договор";
		Договор.Дата = Дата("20160601");
		Договор.Номер = "б/н";
		ДанныеВзаиморасчетов.Договор = Договор;
		
		ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
			
		ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
		ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
		ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
		XDTO_ПоступлениеТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
			
		XDTO_ПоступлениеТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
		XDTO_ПоступлениеТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ПоступлениеТоваровУслуг);
		Если ЗначениеЗаполнено(ВыборкаДокумента.НомерСчетфактуры) Тогда
			XDTO_СчетФактураПолученный = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.СчетФактураПолученный"));
			
			XDTO_СчетФактураПолученный.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный, "КлючевыеСвойства");
			НомерСчетФактуры = ВыборкаДокумента.НомерСчетфактуры;//"БП" + Формат(Число(ВыборкаДокумента.НомерСчетфактуры), "ЧЦ=9; ЧН=0; ЧВН=; ЧГ=0");
			XDTO_СчетФактураПолученный.КлючевыеСвойства.Ссылка = ПоступлениеТоваровКлючевыеСвойства.Ссылка;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.НомерВходящегоДокумента = НомерСчетФактуры;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.ДатаВходящегоДокумента = ВыборкаДокумента.ДатаДокумента;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.Организация = Организация;
			XDTO_СчетФактураПолученный.КлючевыеСвойства.Контрагент = Контрагент;
			XDTO_СчетФактураПолученный.ДатаПолучения = ВыборкаДокумента.ДатаДокумента;
			
			XDTO_СчетФактураПолученный.Валюта = Валюта;
			
			XDTO_СчетФактураПолученный.Договор = Договор;
			XDTO_СчетФактураПолученный.ВидСчетаФактуры = "НаПоступление";
			XDTO_СчетФактураПолученный.КодВидаОперации = "01";
			XDTO_СчетФактураПолученный.СпособВыставления = "ВЭлектронномВиде";
			
			XDTO_СчетФактураПолученный.ДокументыОснования = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный, "ДокументыОснования");
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураПолученный.ДокументыОснования, "Строка");
			СоставнойДокументРасчетов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "СоставнойДокументРасчетов"));
			СоставнойДокументРасчетов.ПоступлениеТоваровУслугСсылка = XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства;
			НоваяСтрока.ДокументОснование = СоставнойДокументРасчетов;
			XDTO_СчетФактураПолученный.ДокументыОснования.Строка.Добавить(НоваяСтрока);
			// 4. Записываем ОбъектXDTO в XML-файл.
			ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_СчетФактураПолученный);
		КонецЕсли;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьРеалВнешняя(ФайлОбмена, XMLСхема, Соединение, НомерДокумента, ДатаДокумента, ВыгружаемыеТовары, ТабАртикулов)
	
	СтруктураПоиска = Новый Структура("НомерДокумента, ДатаДокумента", НомерДокумента, ДатаДокумента);
	ТабДокумента = ЭтотОбъект.ТаблицаЗакупокXLS.НайтиСтроки(СтруктураПоиска);
	//Поступление услуг и пр. некоммерции
	Если ТабДокумента.Количество() > 0 Тогда
		ВыборкаДокумента = ТабДокумента[0];
		
		XDTO_РеализацияТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.РеализацияТоваровУслуг"));
		
		РеализацияТоваровКлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "КлючевыеСвойства");
		НомерДокумента = СокрЛП(ВыборкаДокумента.НомерДокумента);
		РеализацияТоваровКлючевыеСвойства.Ссылка = ХэшMD5Простой(НомерДокумента);
		РеализацияТоваровКлючевыеСвойства.Дата = ВыборкаДокумента.ДатаДокумента;
		РеализацияТоваровКлючевыеСвойства.Номер = НомерДокумента;
		
		ОрганизацияСтруктура = Новый Структура;
		//Организация.Вставить("Ссылка", "4993b015-509b-11e1-a558-001485883758");
		ОрганизацияСтруктура.Вставить("Наименование", ВыборкаДокумента.Организация.Наименование);
		ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ВыборкаДокумента.Организация.НаименованиеСокращенное);
		ОрганизацияСтруктура.Вставить("НаименованиеПолное", ВыборкаДокумента.Организация.НаименованиеПолное);
		ОрганизацияСтруктура.Вставить("ИНН", ВыборкаДокумента.Организация.ИНН);
		ОрганизацияСтруктура.Вставить("КПП", ВыборкаДокумента.Организация.КПП);
		ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", ПолучитьИмяПеречисления(ВыборкаДокумента.Организация.ЮридическоеФизическоеЛицо));
		Организация = ВыгрузитьКлючПоСтруктуре(РеализацияТоваровКлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
		
		XDTO_РеализацияТоваровУслуг.КлючевыеСвойства = РеализацияТоваровКлючевыеСвойства;
		XDTO_РеализацияТоваровУслуг.ВидОперации = "РеализацияКлиенту";
		Валюта = ВыгрузитьКлючПоСтруктуре(XDTO_РеализацияТоваровУслуг, ВалютаРуб, "Валюта", XMLСхема);
		XDTO_РеализацияТоваровУслуг.СуммаВключаетНДС = Истина;
		XDTO_РеализацияТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Подразделение");
		XDTO_РеализацияТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
		
		Контрагент = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Контрагент");
		//Контрагент.Ссылка = Строка(ВыборкаДокумента.Контрагент.УникальныйИдентификатор());
		Контрагент.Наименование = ВыборкаДокумента.КонтрагентНаименование;
		Контрагент.НаименованиеПолное = ВыборкаДокумента.КонтрагентНаименование;
		ИННКПП = СтрРазделить(СокрЛП(ВыборкаДокумента.КонтрагентИННКПП), "/");
		Контрагент.ИНН = ИННКПП[0];
		Если СтрДлина(Контрагент.ИНН) = 12 Или СтрДлина(Контрагент.ИНН) = 0 Тогда
			Контрагент.ЮридическоеФизическоеЛицо = "ФизическоеЛицо";
		Иначе
			Контрагент.КПП = ИННКПП[1];
			Контрагент.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
		КонецЕсли;
		
		СтранаРегистрации = ВыгрузитьКлючПоСтруктуре(Контрагент, СтранаРоссия, "СтранаРегистрации", XMLСхема);
		XDTO_РеализацияТоваровУслуг.Контрагент = Контрагент;
		ВыгружаемыеТовары.Вставить("Контрагент_" + Контрагент.Наименование, Контрагент);
		
		ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "ДанныеВзаиморасчетов");
		Договор = ОбъектXDTOПоИмениСвойства(ДанныеВзаиморасчетов, "Договор");
		//Договор.Ссылка = Строка(ДокументОбъект.ДоговорКонтрагента.УникальныйИдентификатор());
		Если ВыборкаДокумента.Комиссия Тогда
			Договор.ВидДоговора = "СКомиссионером";
		Иначе
			Договор.ВидДоговора = "СПокупателем";
		КонецЕсли;
		Договор.Организация = Организация;
		Договор.Контрагент = Контрагент;
		Договор.ВалютаВзаиморасчетов = Валюта;
		Договор.РасчетыВУсловныхЕдиницах = Ложь;
		//Договор.Наименование = RecordSet.Fields("DOC_CONTRACTNAME").Value + " " + RecordSet.Fields("DOC_CONTRACTDESC").Value;
		Договор.Наименование = "Основной договор";
		Договор.Дата = Дата("20160601");
		Договор.Номер = "б/н";
		ДанныеВзаиморасчетов.Договор = Договор;
		
		ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
		
		ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
		ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
		ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
		XDTO_РеализацияТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
			
		XDTO_РеализацияТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
		
		//Табличная часть
		Товары = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Товары");
		НомерСтрокиДокумента = 1;
		СтруктураПараметров = Новый Структура;
		Для Каждого ВыборкаТовары Из ТабДокумента Цикл
			СтруктураПараметров.Вставить("СписатьКоличество", ВыборкаТовары.Количество);
			Сумма = ВыборкаТовары.Сумма;
			Цена = Сумма / СтруктураПараметров.СписатьКоличество;
			Пока СтруктураПараметров.СписатьКоличество > 0 Цикл
				НоваяСтрока = ОбъектXDTOПоИмениСвойства(Товары, "Строка");
				НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
					
				НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
				
				СтруктураПараметров.Вставить("ТоварСсылка", Неопределено);
				СтруктураПараметров.Вставить("КодТовара", ВыборкаТовары.КодАртикула);
				Если ЗначениеЗаполнено(ВыборкаТовары.ItemId) Тогда
					СтруктураПараметров.Вставить("АльтКодТовара", "ITEM" + ВыборкаТовары.ItemId);
				КонецЕсли;
				СтруктураПараметров.Вставить("Наименование", ВыборкаТовары.НаименованиеТовара);
				СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовары.НаименованиеПолноеТовара);
				СтруктураПараметров.Вставить("Артикул", ВыборкаТовары.АртикулТовара);
				Если ЗначениеЗаполнено(ВыборкаТовары.КодТовара1С) Тогда
					СтруктураПараметров.Вставить("АльтАртикул", ВыборкаТовары.КодТовара1С);
				КонецЕсли;
				СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
				СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
				СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
				СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовары.КодГруппы);
				СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовары.Группа);
				Если ВыборкаТовары.СчетУчета <> "004.01" И ВыборкаТовары.Комиссия = Истина Тогда
					СтруктураПараметров.Вставить("СписатьКоличество", 0);
				КонецЕсли;
				СтруктураПараметров.Вставить("ВыгружатьОбъект", Не ВыборкаТовары.НеВыгружатьНоменклатуру);
				
				XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, СтруктураПараметров);
				НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
				Если ВыборкаТовары.СчетУчета <> "004.01" И ВыборкаТовары.Комиссия = Истина Тогда
					СтруктураПараметров.Вставить("СписанноеКоличество", ВыборкаТовары.Количество);
				КонецЕсли;
				
				ЕдиницаИзмерения = ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
				
				НоваяСтрока.Количество = СтруктураПараметров.СписанноеКоличество;
				НоваяСтрока.Сумма = Окр(Цена * СтруктураПараметров.СписанноеКоличество, 2);
				НоваяСтрока.Цена = Окр(Цена, 2);
				НоваяСтрока.СтавкаНДС = ПолучитьНДСПоПредставлению(ВыборкаТовары.СтавкаНДС);
				НоваяСтрока.СуммаНДС = ВыборкаТовары.СуммаНДС;
				Если ВыборкаТовары.СчетУчета = "004.01" Тогда
					НоваяСтрока.ТипЗапасов = "КомиссионныеТовары";
				Иначе
					НоваяСтрока.ТипЗапасов = "СобственныеТовары";
				КонецЕсли;
				Если ЗначениеЗаполнено(ВыборкаТовары.НомерГТД) Тогда
					ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
					ДанныеГТД.НомерГТД = ВыборкаТовары.НомерГТД;
					
					СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеТовары, ДанныеГТД, ,
					ВыборкаТовары.СтранаПроисхождения, ВыборкаТовары.СтранаПроисхожденияКод);
					НоваяСтрока.ДанныеГТД = ДанныеГТД;
				КонецЕсли;
				Товары.Строка.Добавить(НоваяСтрока);
				НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
			КонецЦикла;
		КонецЦикла;
		XDTO_РеализацияТоваровУслуг.Товары = Товары;
		XDTO_РеализацияТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
		XDTO_РеализацияТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_РеализацияТоваровУслуг);
		
		XDTO_СчетФактураВыданный = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.СчетФактураВыданный"));
		
		XDTO_СчетФактураВыданный.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураВыданный, "КлючевыеСвойства");
		XDTO_СчетФактураВыданный.КлючевыеСвойства.Ссылка = РеализацияТоваровКлючевыеСвойства.Ссылка;
		XDTO_СчетФактураВыданный.КлючевыеСвойства.Номер = СокрЛП(ВыборкаДокумента.НомерСчетфактуры);
		XDTO_СчетФактураВыданный.КлючевыеСвойства.Дата = ВыборкаДокумента.ДатаДокумента;
		XDTO_СчетФактураВыданный.КлючевыеСвойства.Организация = Организация;
		
		XDTO_СчетФактураВыданный.Валюта = Валюта;
		
		XDTO_СчетФактураВыданный.Контрагент = Контрагент;
		
		XDTO_СчетФактураВыданный.Договор = Договор;
		XDTO_СчетФактураВыданный.ВидСчетаФактуры = "НаРеализацию";
		XDTO_СчетФактураВыданный.КодВидаОперации = "01";
		XDTO_СчетФактураВыданный.Выставлен = Истина;
		XDTO_СчетФактураВыданный.ДатаВыставления = ВыборкаДокумента.ДатаДокумента;
		XDTO_СчетФактураВыданный.СпособВыставления = "ВЭлектронномВиде";
		
		XDTO_СчетФактураВыданный.ДокументыОснования = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураВыданный, "ДокументыОснования");
		НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_СчетФактураВыданный.ДокументыОснования, "Строка");
		СоставнойДокументРасчетов = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "СоставнойДокументРасчетов"));
		СоставнойДокументРасчетов.РеализацияТоваровУслугСсылка = XDTO_РеализацияТоваровУслуг.КлючевыеСвойства;
		НоваяСтрока.ДокументОснование = СоставнойДокументРасчетов;
		XDTO_СчетФактураВыданный.ДокументыОснования.Строка.Добавить(НоваяСтрока);
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_СчетФактураВыданный);
		
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьОстаткиКакРеалПост(ВыгружатьРеализацию, ВыгружатьПоступление) Экспорт
	
	СтавкаНДС = 18;
	Если ВыгружатьПоступление Тогда
		Для Каждого СтрокаТаб Из ТаблицаОстатков Цикл
			СтрокаТЧ = ТаблицаЗакупокXLS.Добавить();
			СтрокаТЧ.Контрагент = ЭтотОбъект.КонтрагентПоУмолчанию;
			СтрокаТЧ.КонтрагентНаименование = ЭтотОбъект.КонтрагентПоУмолчанию.Наименование;
			СтрокаТЧ.КонтрагентИННКПП = ЭтотОбъект.КонтрагентПоУмолчанию.ИНН + "/" + ЭтотОбъект.КонтрагентПоУмолчанию.КПП;
			СтрокаТЧ.Номенклатура = СтрокаТаб.Номенклатура;
			СтрокаТЧ.КодАртикула = СокрЛП(СтрокаТаб.КодАртикула);
			СтрокаТЧ.НаименованиеТовара = СтрокаТаб.НаименованиеТовара;
			СтрокаТЧ.НаименованиеПолноеТовара = СтрокаТаб.НаименованиеПолноеТовара;
			СтрокаТЧ.АртикулТовара = СтрокаТаб.АртикулТовара;
			СтрокаТЧ.Количество = СтрокаТаб.Количество;
			СтрокаТЧ.Цена = СтрокаТаб.Сумма / СтрокаТаб.Количество;
			СтрокаТЧ.Сумма = СтрокаТаб.Сумма;
			СтрокаТЧ.СтавкаНДС = Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
			СуммаБезНДС = 100 * СтрокаТаб.Сумма / (100 + СтавкаНДС);
			СтрокаТЧ.СуммаНДС = Окр(СтрокаТаб.Сумма - СуммаБезНДС, 2);
			СтрокаТЧ.НомерГТД = СтрокаТаб.НомерГТД;
			СтрокаТЧ.СтранаПроисхождения = СтрокаТаб.Страна.Наименование;
			СтрокаТЧ.СтранаПроисхожденияКод = СтрокаТаб.Страна.Код;
			СтрокаТЧ.СтранаПроисхожденияКодАльфа2 = СтрокаТаб.Страна.КодАльфа2;
			Префикс = "";
			ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(ЭтотОбъект.ОрганизацияПоУмолчанию, Префикс);
			Если КодТовараВMerExternalItemId Тогда
				СтрокаТЧ.НомерДокумента = Префикс + "0" + Формат(НачалоПериода, "ДФ=ddMMyyyy");
				СтрокаТЧ.ДатаДокумента = НачалоПериода + 6 * 60 * 60;
			Иначе
				СтрокаТЧ.НомерДокумента = Префикс + "0" + Формат(СтрокаТаб.Период, "ДФ=ddMMyyyy");
				СтрокаТЧ.ДатаДокумента = СтрокаТаб.Период;
			КонецЕсли;
			СтрокаТЧ.Организация = ЭтотОбъект.ОрганизацияПоУмолчанию;
			СтрокаТЧ.ГруппаСсылка = СтрокаТаб.ГруппаСсылка;
			СтрокаТЧ.КодГруппы = СтрокаТаб.КодГруппы;
			СтрокаТЧ.Группа = СтрокаТаб.Группа;
			СтрокаТЧ.ТипДокумента = "ОстПоступл";
			СтрокаТЧ.Комиссия = ЭтотОбъект.Комиссия;
			Если ЭтотОбъект.Комиссия Тогда
				СтрокаТЧ.СчетУчета = "004.01";//ЭтотОбъект.СчетУчетаПоУмолчанию;
			Иначе
				СтрокаТЧ.СчетУчета = "41.01";//ЭтотОбъект.СчетУчетаПоУмолчанию;
			КонецЕсли;
			СтрокаТЧ.НеВыгружатьНоменклатуру = Истина;
		КонецЦикла;
	КонецЕсли;
	Если ВыгружатьРеализацию Тогда
		Для Каждого СтрокаТаб Из ТаблицаОстатков Цикл
			СтрокаТЧ = ТаблицаЗакупокXLS.Добавить();
			СтрокаТЧ.Контрагент = ЭтотОбъект.КонтрагентПоУмолчанию;
			СтрокаТЧ.КонтрагентНаименование = ЭтотОбъект.КонтрагентПоУмолчанию.Наименование;
			СтрокаТЧ.КонтрагентИННКПП = ЭтотОбъект.КонтрагентПоУмолчанию.ИНН + "/" + ЭтотОбъект.КонтрагентПоУмолчанию.КПП;
			СтрокаТЧ.Номенклатура = СтрокаТаб.Номенклатура;
			СтрокаТЧ.КодАртикула = СокрЛП(СтрокаТаб.КодАртикула);
			СтрокаТЧ.НаименованиеТовара = СтрокаТаб.НаименованиеТовара;
			СтрокаТЧ.НаименованиеПолноеТовара = СтрокаТаб.НаименованиеПолноеТовара;
			СтрокаТЧ.АртикулТовара = СтрокаТаб.АртикулТовара;
			СтрокаТЧ.Количество = СтрокаТаб.Количество;
			СтрокаТЧ.Цена = СтрокаТаб.Сумма / СтрокаТаб.Количество;
			СтрокаТЧ.Сумма = СтрокаТаб.Сумма;
			СтрокаТЧ.СтавкаНДС = Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
			СуммаБезНДС = 100 * СтрокаТаб.Сумма / (100 + СтавкаНДС);
			СтрокаТЧ.СуммаНДС = Окр(СтрокаТаб.Сумма - СуммаБезНДС, 2);
			СтрокаТЧ.НомерГТД = СтрокаТаб.НомерГТД;
			СтрокаТЧ.СтранаПроисхождения = СтрокаТаб.Страна.Наименование;
			СтрокаТЧ.СтранаПроисхожденияКод = СтрокаТаб.Страна.Код;
			СтрокаТЧ.СтранаПроисхожденияКодАльфа2 = СтрокаТаб.Страна.КодАльфа2;
			Префикс = "";
			ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(ЭтотОбъект.ОрганизацияПоУмолчанию, Префикс);
			Если КодТовараВMerExternalItemId Тогда
				СтрокаТЧ.НомерДокумента = Префикс + "0" + Формат(НачалоПериода, "ДФ=ddMMyyyy");
				СтрокаТЧ.ДатаДокумента = НачалоПериода + 6 * 60 * 60;
			Иначе
				СтрокаТЧ.НомерДокумента = Префикс + "0" + Формат(СтрокаТаб.Период, "ДФ=ddMMyyyy");
				СтрокаТЧ.ДатаДокумента = СтрокаТаб.Период;
			КонецЕсли;
			СтрокаТЧ.Организация = ЭтотОбъект.ОрганизацияПоУмолчанию;
			СтрокаТЧ.ГруппаСсылка = СтрокаТаб.ГруппаСсылка;
			СтрокаТЧ.КодГруппы = СтрокаТаб.Группа;
			СтрокаТЧ.Группа = СтрокаТаб.Группа;
			СтрокаТЧ.ТипДокумента = "ОстРеализ";
			СтрокаТЧ.Комиссия = ЭтотОбъект.Комиссия;
			СтрокаТЧ.СчетУчета = "41.01";//ЭтотОбъект.СчетУчетаПоУмолчанию;
			СтрокаТЧ.НеВыгружатьНоменклатуру = Истина;
		КонецЦикла;
	КонецЕсли;
	
	//ФайлОбмена = Новый ЗаписьXML;
	//ФайлОбмена.ОткрытьФайл(ИмяФайлаВыгрузки);
	//ФайлОбмена.ЗаписатьОбъявлениеXML();
	//
	//// Записываем элемент <Message>
	//ФайлОбмена.ЗаписатьНачалоЭлемента("Message");
	//ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("msg", "http://www.1c.ru/SSL/Exchange/Message");
	//ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	//ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	//
	//// Записываем элемент <Header>
	//Header = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Header"));
	//XMLСхема = ФорматОбмена(Version);
	//Header.Format = XMLСхема;
	//Header.CreationDate = ТекущаяДата();
	//
	//Confirmation = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Confirmation"));
	////Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
	//	Confirmation.ExchangePlan = "СинхронизацияДанныхЧерезУниверсальныйФормат";
	//	Confirmation.To = Message_To;
	//	Confirmation.From = Message_From;
	//	Confirmation.MessageNo = MessageNo;
	//	Confirmation.ReceivedNo = ReceivedNo;
	////КонецЕсли;
	//Header.Confirmation = Confirmation;
	//	
	//Header.AvailableVersion.Добавить(Version);
	//
	//ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, Header);
	//
	//// Записываем элемент <Body>
	//ФайлОбмена.ЗаписатьНачалоЭлемента("Body");
	//ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("", XMLСхема);
	//
	//ВыгружаемыеОбъекты = Новый Соответствие;
	//ТабДанных = Новый ТаблицаЗначений;
	//ТабДанных.Колонки.Добавить("MEREXTERNALITEMID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	//ТабДанных.Колонки.Добавить("NAMEALIASID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	//
	//ТабПериодов = ЭтотОбъект.ТаблицаОстатков.Выгрузить(, "Период");
	//ТабПериодов.Свернуть("Период");
	//
	//Для Каждого СтрПериода Из ТабПериодов Цикл
	//	ОстаткиНаПериод = ЭтотОбъект.ТаблицаОстатков.НайтиСтроки(Новый Структура("Период", СтрПериода.Период));
	//	Если ВыгружатьРеализацию = Истина Тогда
	//		ВыгрузитьРеализациюXDTO(ФайлОбмена, XMLСхема, Connection, ЭтотОбъект.ОрганизацияПоУмолчанию, ЭтотОбъект.КонтрагентПоУмолчанию, СтрПериода.Период, ОстаткиНаПериод, ВыгружаемыеОбъекты, ТабДанных);
	//	КонецЕсли;
	//	Если ВыгружатьПоступление = Истина Тогда
	//		ВыгрузитьПоступлениеXDTO(ФайлОбмена, XMLСхема, Connection, ЭтотОбъект.ОрганизацияПоУмолчанию, ЭтотОбъект.КонтрагентПоУмолчанию, СтрПериода.Период, ОстаткиНаПериод, ВыгружаемыеОбъекты, ТабДанных);
	//	КонецЕсли;
	//КонецЦикла;
	//
	//Для Каждого ЭлементНоменклатуры Из ВыгружаемыеОбъекты Цикл
	//	ВыгрузитьОбъекты(ФайлОбмена, XMLСхема, ЭлементНоменклатуры.Значение);
	//КонецЦикла;
	//	
	//ФайлОбмена.ЗаписатьКонецЭлемента(); // Body
	//ФайлОбмена.ЗаписатьКонецЭлемента(); // Message
	//ФайлОбмена.Закрыть();
	//MessageNo = MessageNo + 1;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьРеализациюXDTO(ФайлОбмена, XMLСхема, Соединение, ОрганизацияСсылка, КонтрагентСсылка, ДатаДокумента, ТаблицаТоваров, ВыгружаемыеОбъекты, ТабАртикулов)
	//Реализация
	Префикс = "";
	ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(ОрганизацияСсылка, Префикс);
	Номер = Префикс + "0" + Формат(ДатаДокумента, "ДФ=ddMMyyyy");
	XDTO_РеализацияТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.РеализацияТоваровУслуг"));
	
	РеализацияТоваровКлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "КлючевыеСвойства");
	РеализацияТоваровКлючевыеСвойства.Ссылка = ХэшMD5Простой(Номер);
	РеализацияТоваровКлючевыеСвойства.Дата = ДатаДокумента;
	РеализацияТоваровКлючевыеСвойства.Номер = Номер;
	
	ОрганизацияСтруктура = Новый Структура;
	//Организация.Вставить("Ссылка", "4993b015-509b-11e1-a558-001485883758");
	ОрганизацияСтруктура.Вставить("Наименование", ОрганизацияСсылка.Наименование);
	ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ОрганизацияСсылка.НаименованиеСокращенное);
	ОрганизацияСтруктура.Вставить("НаименованиеПолное", ОрганизацияСсылка.НаименованиеПолное);
	ОрганизацияСтруктура.Вставить("ИНН", ОрганизацияСсылка.ИНН);
	ОрганизацияСтруктура.Вставить("КПП", ОрганизацияСсылка.КПП);
	ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", ПолучитьИмяПеречисления(ОрганизацияСсылка.ЮридическоеФизическоеЛицо));
	Организация = ВыгрузитьКлючПоСтруктуре(РеализацияТоваровКлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
	
	XDTO_РеализацияТоваровУслуг.КлючевыеСвойства = РеализацияТоваровКлючевыеСвойства;
	XDTO_РеализацияТоваровУслуг.ВидОперации = "ПередачаНаКомиссию";
	
	Валюта = ВыгрузитьКлючПоСтруктуре(XDTO_РеализацияТоваровУслуг, ВалютаРуб, "Валюта", XMLСхема);
	
	XDTO_РеализацияТоваровУслуг.СуммаВключаетНДС = Истина;
	XDTO_РеализацияТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Подразделение");
	XDTO_РеализацияТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
	
	Контрагент = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Контрагент");
	Контрагент.Ссылка = КонвертироватьСсылкуВXDTO(КонтрагентСсылка);
	Контрагент.Наименование = КонтрагентСсылка.Наименование;
	Контрагент.НаименованиеПолное = КонтрагентСсылка.НаименованиеПолное;
	Контрагент.ИНН = КонтрагентСсылка.ИНН;
	Контрагент.КПП = КонтрагентСсылка.КПП;
	Контрагент.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
	
	Контрагент.СтранаРегистрации = ОбъектXDTOПоИмениСвойства(Контрагент, "СтранаРегистрации");
	//Контрагент.СтранаРегистрации.Ссылка = Строка(КонтрагентСсылка.СтранаРегистрации.УникальныйИдентификатор());
	Контрагент.СтранаРегистрации.Код = КонтрагентСсылка.СтранаРегистрации.Код;
	Контрагент.СтранаРегистрации.Наименование = КонтрагентСсылка.СтранаРегистрации.Наименование;
	XDTO_РеализацияТоваровУслуг.Контрагент = Контрагент;
	ВыгружаемыеОбъекты.Вставить("Контрагент_" + Контрагент.Ссылка, Контрагент);
	
	ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "ДанныеВзаиморасчетов");
	Договор = ОбъектXDTOПоИмениСвойства(ДанныеВзаиморасчетов, "Договор");
	//Договор.Ссылка = Строка(ДокументОбъект.ДоговорКонтрагента.УникальныйИдентификатор());
	Если ЭтотОбъект.Комиссия Тогда
		Договор.ВидДоговора = "СКомиссионером";
	Иначе
		Договор.ВидДоговора = "СПокупателем";
	КонецЕсли;
	Договор.Организация = Организация;
	Договор.Контрагент = Контрагент;
	Договор.ВалютаВзаиморасчетов = Валюта;
	Договор.РасчетыВУсловныхЕдиницах = Ложь;
	Договор.Наименование = "Основной";
	Договор.Дата = НачалоГода(ДатаДокумента);
	Договор.Номер = "б/н";
	ДанныеВзаиморасчетов.Договор = Договор;
	
	ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
		
	ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
	ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
	ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Договор.РасчетыВУсловныхЕдиницах;
	XDTO_РеализацияТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
	XDTO_РеализацияТоваровУслуг.Комментарий = "отгрузка на комиссию";
	XDTO_РеализацияТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
	
	//Табличная часть
	НомерСтрокиДокумента = 1;
	XDTO_РеализацияТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг, "Товары");
	Для Каждого ВыборкаТовары Из ТаблицаТоваров Цикл
		НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_РеализацияТоваровУслуг.Товары, "Строка");
		НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
			
		НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТоварСсылка", ВыборкаТовары.Номенклатура);
		СтруктураПараметров.Вставить("КодТовара", ВыборкаТовары.КодТовара);
		СтруктураПараметров.Вставить("Наименование", ВыборкаТовары.Наименование);
		СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовары.Наименование);
		СтруктураПараметров.Вставить("Артикул", ВыборкаТовары.Артикул);
		СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
		СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
		СтруктураПараметров.Вставить("СсылкаГруппы", ВыборкаТовары.ГруппаСсылка);
		СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовары.КодГруппы);
		СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовары.Группа);
		СтруктураПараметров.Вставить("ВыгружатьОбъект", Ложь);
		
		XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, СтруктураПараметров);
		НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
		
		ЕдиницаИзмерения = ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
		
		НоваяСтрока.Количество = ВыборкаТовары.Количество;
		НоваяСтрока.Сумма = ВыборкаТовары.Сумма;
		НоваяСтрока.Цена = Окр(ВыборкаТовары.Сумма / ВыборкаТовары.Количество, 2);
		СтавкаНДС = 18;
		НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
		СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
		НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		
		Если ЗначениеЗаполнено(ВыборкаТовары.ГТД) Тогда
			ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
			ДанныеГТД.НомерГТД = ВыборкаТовары.ГТД;
			
			СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеОбъекты, ДанныеГТД, ВыборкаТовары.Страна.КодАльфа3,
			ВыборкаТовары.Страна.Наименование, ВыборкаТовары.Страна.Код);
			НоваяСтрока.ДанныеГТД = ДанныеГТД;
		КонецЕсли;
		//НоваяСтрока.СчетУчета = Строка(ВыборкаТовары.СчетУчета);
		XDTO_РеализацияТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
		НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
	КонецЦикла;
	XDTO_РеализацияТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
	XDTO_РеализацияТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
	// 4. Записываем ОбъектXDTO в XML-файл.
	ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_РеализацияТоваровУслуг);
	Возврат Истина;
КонецФункции

Функция ВыгрузитьПоступлениеXDTO(ФайлОбмена, XMLСхема, Соединение, ОрганизацияСсылка, КонтрагентСсылка, ДатаДокумента, ТаблицаТоваров, ВыгружаемыеОбъекты, ТабАртикулов)
	//Реализация
	Префикс = "";
	ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(ОрганизацияСсылка, Префикс);
	Номер = Префикс + "0" + Формат(ДатаДокумента, "ДФ=ddMMyyyy");
	XDTO_ПоступлениеТоваровУслуг = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ПоступлениеТоваровУслуг"));
	
	ПоступлениеТоваровКлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "КлючевыеСвойства");
	ПоступлениеТоваровКлючевыеСвойства.Ссылка = ХэшMD5Простой(Номер);
	ПоступлениеТоваровКлючевыеСвойства.Дата = ДатаДокумента;
	ПоступлениеТоваровКлючевыеСвойства.Номер = Номер;
	
	ОрганизацияСтруктура = Новый Структура;
	//Организация.Вставить("Ссылка", "4993b015-509b-11e1-a558-001485883758");
	ОрганизацияСтруктура.Вставить("Наименование", ОрганизацияСсылка.Наименование);
	ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ОрганизацияСсылка.НаименованиеСокращенное);
	ОрганизацияСтруктура.Вставить("НаименованиеПолное", ОрганизацияСсылка.НаименованиеПолное);
	ОрганизацияСтруктура.Вставить("ИНН", ОрганизацияСсылка.ИНН);
	ОрганизацияСтруктура.Вставить("КПП", ОрганизацияСсылка.КПП);
	ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", ПолучитьИмяПеречисления(ОрганизацияСсылка.ЮридическоеФизическоеЛицо));
	Организация = ВыгрузитьКлючПоСтруктуре(ПоступлениеТоваровКлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
	
	XDTO_ПоступлениеТоваровУслуг.КлючевыеСвойства = ПоступлениеТоваровКлючевыеСвойства;
	
	XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВходящегоДокумента");
	XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.НомерВходящегоДокумента = Номер;
	XDTO_ПоступлениеТоваровУслуг.ДанныеВходящегоДокумента.ДатаВходящегоДокумента = ДатаДокумента;
	//Табличная часть
	XDTO_ПоступлениеТоваровУслуг.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Товары");
	НомерСтрокиДокумента = 1;
	Для Каждого ВыборкаТовары Из ТаблицаТоваров Цикл
		НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг.Товары, "Строка");
		
		НоваяСтрока.НомерСтрокиДокумента = НомерСтрокиДокумента;
			
		НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТоварСсылка", ВыборкаТовары.Номенклатура);
		СтруктураПараметров.Вставить("КодТовара", ВыборкаТовары.КодАртикула);
		СтруктураПараметров.Вставить("Наименование", ВыборкаТовары.НаименованиеТовара);
		СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовары.НаименованиеТовара);
		СтруктураПараметров.Вставить("Артикул", ВыборкаТовары.АртикулТовара);
		СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
		СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
		СтруктураПараметров.Вставить("СсылкаГруппы", ВыборкаТовары.ГруппаСсылка);
		СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовары.КодГруппы);
		СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовары.Группа);
		СтруктураПараметров.Вставить("ВыгружатьОбъект", Ложь);
		
		XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, СтруктураПараметров);
		НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
		
		ЕдиницаИзмерения = ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
		
		НоваяСтрока.Количество = ВыборкаТовары.Количество;
		НоваяСтрока.Сумма = ВыборкаТовары.Сумма;
		НоваяСтрока.Цена = Окр(ВыборкаТовары.Сумма / ВыборкаТовары.Количество, 2);
		СтавкаНДС = 18;
		НоваяСтрока.СтавкаНДС = "НДС" + Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
		СуммаБезНДС = 100 * НоваяСтрока.Сумма / (100 + СтавкаНДС);
		НоваяСтрока.СуммаНДС = Окр(НоваяСтрока.Сумма - СуммаБезНДС, 2);
		НоваяСтрока.ТипЗапасов = "СобственныеТовары";
		
		Если ЗначениеЗаполнено(ВыборкаТовары.ГТД) Тогда
			ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
			ДанныеГТД.НомерГТД = ВыборкаТовары.ГТД;
			СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеОбъекты, ДанныеГТД, ВыборкаТовары.Страна.КодАльфа3,
			ВыборкаТовары.Страна.Наименование, ВыборкаТовары.Страна.Код);
			НоваяСтрока.ДанныеГТД = ДанныеГТД;
		КонецЕсли;
		Если ЭтотОбъект.Комиссия Тогда
			НоваяСтрока.СчетУчета = Строка(ВыборкаТовары.СчетУчета);
		КонецЕсли;
		
		XDTO_ПоступлениеТоваровУслуг.Товары.Строка.Добавить(НоваяСтрока);
		НомерСтрокиДокумента = НомерСтрокиДокумента + 1;
	КонецЦикла;

	Валюта = ВыгрузитьКлючПоСтруктуре(XDTO_ПоступлениеТоваровУслуг, ВалютаРуб, "Валюта", XMLСхема);
	Если ЭтотОбъект.Комиссия Тогда
		XDTO_ПоступлениеТоваровУслуг.ВидОперации = "ПриемНаКомиссию";
	Иначе
		XDTO_ПоступлениеТоваровУслуг.ВидОперации = "ПокупкаУПоставщика";
	КонецЕсли;
	XDTO_ПоступлениеТоваровУслуг.СуммаВключаетНДС = Истина;
	
	XDTO_ПоступлениеТоваровУслуг.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Подразделение");
	XDTO_ПоступлениеТоваровУслуг.Подразделение.Наименование = "Основное подразделение";
	
	Контрагент = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "Контрагент");
	Контрагент.Ссылка = КонвертироватьСсылкуВXDTO(КонтрагентСсылка);
	Контрагент.Наименование = КонтрагентСсылка.Наименование;
	Контрагент.НаименованиеПолное = КонтрагентСсылка.НаименованиеПолное;
	Контрагент.ИНН = КонтрагентСсылка.ИНН;
	Контрагент.КПП = КонтрагентСсылка.КПП;
	Контрагент.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
	
	Контрагент.СтранаРегистрации = ОбъектXDTOПоИмениСвойства(Контрагент, "СтранаРегистрации");
	//Контрагент.СтранаРегистрации.Ссылка = Строка(КонтрагентСсылка.СтранаРегистрации.УникальныйИдентификатор());
	Контрагент.СтранаРегистрации.Код = КонтрагентСсылка.СтранаРегистрации.Код;
	Контрагент.СтранаРегистрации.Наименование = КонтрагентСсылка.СтранаРегистрации.Наименование;
	XDTO_ПоступлениеТоваровУслуг.Контрагент = Контрагент;
	ВыгружаемыеОбъекты.Вставить("Контрагент_" + Контрагент.ИНН + "_" + Контрагент.КПП, Контрагент);
	
	ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ПоступлениеТоваровУслуг, "ДанныеВзаиморасчетов");
	Договор = ОбъектXDTOПоИмениСвойства(ДанныеВзаиморасчетов, "Договор");
	//Договор.Ссылка = Строка(ДокументОбъект.ДоговорКонтрагента.УникальныйИдентификатор());
	Если ЭтотОбъект.Комиссия Тогда
		Договор.ВидДоговора = "СКомитентом";
	Иначе
		Договор.ВидДоговора = "СПоставщиком";
	КонецЕсли;
	Договор.Организация = Организация;
	Договор.Контрагент = Контрагент;
	Договор.ВалютаВзаиморасчетов = Валюта;
	Договор.РасчетыВУсловныхЕдиницах = Ложь;
	Договор.Наименование = "Основной";
	Договор.Дата = НачалоГода(ДатаДокумента);
	Договор.Номер = "б/н";
	ДанныеВзаиморасчетов.Договор = Договор;
	
	ДанныеВзаиморасчетов.ВалютаВзаиморасчетов = Валюта;
		
	ДанныеВзаиморасчетов.КурсВзаиморасчетов = 1;
	ДанныеВзаиморасчетов.КратностьВзаиморасчетов = 1;
	ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = Ложь;
	XDTO_ПоступлениеТоваровУслуг.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
		
	XDTO_ПоступлениеТоваровУслуг.Налогообложение = "ПродажаОблагаетсяНДС";
	XDTO_ПоступлениеТоваровУслуг.СпособПогашенияЗадолженности = "Автоматически";
	// 4. Записываем ОбъектXDTO в XML-файл.
	ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ПоступлениеТоваровУслуг);
	
	Возврат Истина;
КонецФункции

Функция ВыгрузитьГТДНекоммерцию(ФайлОбмена, XMLСхема, Соединение, ДокументСсылка, ВыгружаемыеТовары, ТабАртикулов)
	СтруктураПоиска = Новый Структура("MEREXTERNALITEMID");
	//Поступление импортного товара
	ЗапросДокументаГТД = Новый Запрос("ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка КАК ДокументСсылка,
	|	ГТДИмпорт.Дата,
	|	ГТДИмпорт.Номер,
	|	ГТДИмпорт.Организация,
	|	ГТДИмпорт.Организация.Наименование,
	|	ГТДИмпорт.Организация.НаименованиеСокращенное,
	|	ГТДИмпорт.Организация.НаименованиеПолное,
	|	ГТДИмпорт.Организация.ИНН,
	|	ГТДИмпорт.Организация.КПП,
	|	ГТДИмпорт.Организация.ЮридическоеФизическоеЛицо,
	|	ГТДИмпорт.Разделы.(
	|		НомерСтроки,
	|		ТаможеннаяСтоимость,
	|		ПошлинаВВалюте,
	|		СтавкаПошлины,
	|		СуммаПошлины,
	|		НДСВВалюте,
	|		СтавкаНДС,
	|		СуммаНДС
	|	),
	|	ГТДИмпорт.Товары.(
	|		НомерСтроки,
	|		НомерРаздела,
	|		Номенклатура,
	|		Номенклатура.Код КАК НоменклатураКод,
	|		Номенклатура.Артикул КАК НоменклатураАртикул,
	|		Номенклатура.Наименование КАК НоменклатураНаименование,
	|		Номенклатура.НаименованиеПолное КАК НоменклатураНаименованиеПолное,
	|		Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		Номенклатура.ЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|		Номенклатура.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
	|		Номенклатура.Родитель КАК НоменклатураРодитель,
	|		Номенклатура.Родитель.Код КАК НоменклатураРодительКод,
	|		Номенклатура.Родитель.Наименование КАК НоменклатураРодительНаименование,
	|		Номенклатура.ВидНоменклатуры КАК НоменклатураВидНоменклатуры,
	|		Количество,
	|		ФактурнаяСтоимость,
	|		СуммаНДС,
	|		СуммаПошлины,
	|		СтранаПроисхождения,
	|		СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|		СтранаПроисхождения.Наименование КАК СтранаПроисхожденияНаименование,
	|		СтранаПроисхождения.КодАльфа3 КАК СтранаПроисхожденияКодАльфа3,
	|		ДокументПартии,
	|		ДокументПартии.Дата,
	|		ДокументПартии.Номер,
	|		СчетУчета,
	|		СчетУчетаНДС
	|	),
	|	ГТДИмпорт.ВалютаДокумента,
	|	ГТДИмпорт.ВалютаДокумента.Код,
	|	ГТДИмпорт.ВалютаДокумента.Наименование,
	|	ГТДИмпорт.ТаможенныйСборВал,
	|	ГТДИмпорт.ТаможенныйШтрафВал,
	|	ГТДИмпорт.ТаможенныйСбор,
	|	ГТДИмпорт.ТаможенныйШтраф,
	|	ГТДИмпорт.КурсДокумента,
	|	ГТДИмпорт.КратностьДокумента,
	|	ГТДИмпорт.Контрагент,
	|	ГТДИмпорт.Контрагент.Наименование,
	|	ГТДИмпорт.Контрагент.НаименованиеПолное,
	|	ГТДИмпорт.Контрагент.ИНН,
	|	ГТДИмпорт.Контрагент.КПП,
	|	ГТДИмпорт.Контрагент.ЮридическоеФизическоеЛицо,
	|	ГТДИмпорт.Контрагент.СтранаРегистрации,
	|	ГТДИмпорт.Контрагент.СтранаРегистрации.Код,
	|	ГТДИмпорт.Контрагент.СтранаРегистрации.Наименование,
	|	ГТДИмпорт.ДоговорКонтрагента,
	|	ГТДИмпорт.ДоговорКонтрагента.ВидДоговора,
	|	ГТДИмпорт.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах,
	|	ГТДИмпорт.ДоговорКонтрагента.Наименование,
	|	ГТДИмпорт.ДоговорКонтрагента.Дата,
	|	ГТДИмпорт.ДоговорКонтрагента.Номер,
	|	ГТДИмпорт.ДоговорКонтрагентаРегл,
	|	ГТДИмпорт.ДоговорКонтрагентаРегл.ВидДоговора,
	|	ГТДИмпорт.ДоговорКонтрагентаРегл.РасчетыВУсловныхЕдиницах,
	|	ГТДИмпорт.ДоговорКонтрагентаРегл.Наименование,
	|	ГТДИмпорт.ДоговорКонтрагентаРегл.Дата,
	|	ГТДИмпорт.ДоговорКонтрагентаРегл.Номер,
	|	ГТДИмпорт.ДоговорКонтрагентаРегл.ВалютаВзаиморасчетов,
	|	ГТДИмпорт.ДоговорКонтрагентаРегл.ВалютаВзаиморасчетов.Код,
	|	ГТДИмпорт.ДоговорКонтрагентаРегл.ВалютаВзаиморасчетов.Наименование,
	|	ГТДИмпорт.КурсВзаиморасчетов,
	|	ГТДИмпорт.КратностьВзаиморасчетов,
	|	ГТДИмпорт.НомерГТД.Представление КАК НомерГТДПредставление,
	|	ГТДИмпорт.Комментарий
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|ГДЕ
	|	ГТДИмпорт.Ссылка = &ДокументСсылка");
	ЗапросДокументаГТД.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ВыборкаДокумента = ЗапросДокументаГТД.Выполнить().Выбрать();
	
	Пока ВыборкаДокумента.Следующий() Цикл
		XDTO_ТаможеннаяДекларация = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ТаможеннаяДекларация"));
		ТаможеннаяДекларацияКлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "КлючевыеСвойства");
		ТаможеннаяДекларацияКлючевыеСвойства.Ссылка = КонвертироватьСсылкуВXDTO(ВыборкаДокумента.ДокументСсылка);
		ТаможеннаяДекларацияКлючевыеСвойства.Дата = ВыборкаДокумента.Дата;
		ТаможеннаяДекларацияКлючевыеСвойства.Номер = ВыборкаДокумента.Номер;
		
		ОрганизацияСтруктура = Новый Структура;
		//Организация.Вставить("Ссылка", "4993b015-509b-11e1-a558-001485883758");
		ОрганизацияСтруктура.Вставить("Наименование", ВыборкаДокумента.ОрганизацияНаименование);
		ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ВыборкаДокумента.ОрганизацияНаименованиеСокращенное);
		ОрганизацияСтруктура.Вставить("НаименованиеПолное", ВыборкаДокумента.ОрганизацияНаименованиеПолное);
		ОрганизацияСтруктура.Вставить("ИНН", ВыборкаДокумента.ОрганизацияИНН);
		ОрганизацияСтруктура.Вставить("КПП", ВыборкаДокумента.ОрганизацияКПП);
		ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", ?(ВыборкаДокумента.ОрганизацияЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, "ЮридическоеЛицо", "ФизическоеЛицо"));
		Организация = ВыгрузитьКлючПоСтруктуре(ТаможеннаяДекларацияКлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
		
		XDTO_ТаможеннаяДекларация.КлючевыеСвойства = ТаможеннаяДекларацияКлючевыеСвойства;
		
		XDTO_РазделыГТД = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "Разделы");
		//Табличная часть
		ВыборкаРазделов = ВыборкаДокумента.Разделы.Выбрать();
		Пока ВыборкаРазделов.Следующий() Цикл
			НоваяСтрокаРазделаГТД = ОбъектXDTOПоИмениСвойства(XDTO_РазделыГТД, "Строка");
			НоваяСтрокаРазделаГТД.НомерРаздела = Формат(ВыборкаРазделов.НомерСтроки, "ЧДЦ=; ЧН=0; ЧГ=");
			
			НоваяСтрокаРазделаГТД.СтавкаНДС = ПолучитьИмяПеречисления(ВыборкаРазделов.СтавкаНДС);
			НоваяСтрокаРазделаГТД.СуммаНДС = ВыборкаРазделов.СуммаНДС;
			НоваяСтрокаРазделаГТД.СуммаПошлины = ВыборкаРазделов.СуммаПошлины;
			НоваяСтрокаРазделаГТД.ТаможеннаяСтоимость = ВыборкаРазделов.ТаможеннаяСтоимость;
			НоваяСтрокаРазделаГТД.НДСВВалюте = ВыборкаРазделов.НДСВВалюте;
			НоваяСтрокаРазделаГТД.ПошлинаВВалюте = ВыборкаРазделов.ПошлинаВВалюте;
			XDTO_РазделыГТД.Строка.Добавить(НоваяСтрокаРазделаГТД);
		КонецЦикла;
			
		XDTO_ТоварыГТД = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "Товары");
		ВыборкаТовары = ВыборкаДокумента.Товары.Выбрать();
		СтранаПроисхождения = Неопределено;
		Пока ВыборкаТовары.Следующий() Цикл
			НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ТоварыГТД, "Строка");
			НоваяСтрока.НомерСтрокиДокумента = ВыборкаТовары.НомерСтроки;
			НоваяСтрока.НомерРаздела = Формат(ВыборкаТовары.НомерРаздела, "ЧДЦ=; ЧН=0; ЧГ=");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ТоварСсылка", ВыборкаТовары.Номенклатура);
			СтруктураПараметров.Вставить("КодТовара", ВыборкаТовары.НоменклатураКод);
			СтруктураПараметров.Вставить("Наименование", ВыборкаТовары.НоменклатураНаименование);
			СтруктураПараметров.Вставить("НаименованиеПолное", ВыборкаТовары.НоменклатураНаименованиеПолное);
			СтруктураПараметров.Вставить("Артикул", ВыборкаТовары.НоменклатураАртикул);
			СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
			СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
			СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
			СтруктураПараметров.Вставить("КодГруппы", ВыборкаТовары.НоменклатураРодительКод);
			СтруктураПараметров.Вставить("НаименованиеГруппы", ВыборкаТовары.НоменклатураРодительНаименование);
			СтруктураПараметров.Вставить("ВыгружатьОбъект", Ложь);
			
			XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, СтруктураПараметров);
			НоваяСтрока.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
			
			//ЕдиницаИзмерения = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ЕдиницаИзмерения");
			//ЕдиницаИзмерения.Ссылка = Строка(ВыборкаТовары.ЕдиницаИзмерения.УникальныйИдентификатор());
			//ЕдиницаИзмерения.Код = ВыборкаТовары.ЕдиницаИзмеренияКод;
			//НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
			
			СтруктураПоступления = Новый Структура;
			СтруктураПоступления.Вставить("Ссылка", КонвертироватьСсылкуВXDTO(ВыборкаТовары.ДокументПартии));
			СтруктураПоступления.Вставить("Дата", ВыборкаТовары.ДокументПартииДата);
			СтруктураПоступления.Вставить("Номер", СокрЛП(ВыборкаТовары.ДокументПартииНомер));
			СтруктураПоступления.Вставить("Организация", Организация);
			
			ДокументПоступления = ВыгрузитьКлючПоСтруктуре(НоваяСтрока, СтруктураПоступления, "ДокументПоступления", XMLСхема);
			
			НоваяСтрока.Количество = ВыборкаТовары.Количество;
			НоваяСтрока.ТаможеннаяСтоимость = ВыборкаТовары.ФактурнаяСтоимость;
			НоваяСтрока.СуммаНДС = ВыборкаТовары.СуммаНДС;
			НоваяСтрока.СуммаПошлины = ВыборкаТовары.СуммаПошлины;
			СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеТовары, НоваяСтрока, ВыборкаТовары.СтранаПроисхожденияКодАльфа3,
			ВыборкаТовары.СтранаПроисхожденияНаименование, ВыборкаТовары.СтранаПроисхожденияКод);
			НоваяСтрока.СчетУчета = Строка(ВыборкаТовары.СчетУчета);
			НоваяСтрока.СчетУчетаНДС = Строка(ВыборкаТовары.СчетУчетаНДС);
			XDTO_ТоварыГТД.Строка.Добавить(НоваяСтрока);
		КонецЦикла;
		
		Валюта = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "Валюта");
		//Валюта.Ссылка = Строка(ВыборкаДокумента.ВалютаДокумента.УникальныйИдентификатор());
		Валюта.Код = ВыборкаДокумента.ВалютаДокументаКод;
		Валюта.Наименование = ВыборкаДокумента.ВалютаДокументаНаименование;
		
	
		XDTO_ТаможеннаяДекларация.Валюта = Валюта;
		XDTO_ТаможеннаяДекларация.ТаможенныйСбор = ВыборкаДокумента.ТаможенныйСбор;
		XDTO_ТаможеннаяДекларация.КурсДокумента = ВыборкаДокумента.КурсДокумента;
		XDTO_ТаможеннаяДекларация.КратностьДокумента = ВыборкаДокумента.КратностьДокумента;
		
		Контрагент = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "Контрагент");
		Контрагент.Ссылка = КонвертироватьСсылкуВXDTO(ВыборкаДокумента.Контрагент);
		Контрагент.Наименование = ВыборкаДокумента.КонтрагентНаименование;
		Контрагент.НаименованиеПолное = ВыборкаДокумента.КонтрагентНаименованиеПолное;
		Контрагент.ИНН = ВыборкаДокумента.КонтрагентИНН;
		Контрагент.КПП = ВыборкаДокумента.КонтрагентКПП;
		Контрагент.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
		
		Контрагент.СтранаРегистрации = ОбъектXDTOПоИмениСвойства(Контрагент, "СтранаРегистрации");
		//Контрагент.СтранаРегистрации.Ссылка = Строка(ВыборкаДокумента.КонтрагентСтранаРегистрации.УникальныйИдентификатор());
		Контрагент.СтранаРегистрации.Код = ВыборкаДокумента.КонтрагентСтранаРегистрацииКод;
		Контрагент.СтранаРегистрации.Наименование = ВыборкаДокумента.КонтрагентСтранаРегистрацииНаименование;
		XDTO_ТаможеннаяДекларация.Контрагент = Контрагент;
		ВыгружаемыеТовары.Вставить("Контрагент_" + Контрагент.Ссылка, Контрагент);
		
		ДанныеВзаиморасчетов = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "ДанныеВзаиморасчетов");
		
		Договор = ОбъектXDTOПоИмениСвойства(ДанныеВзаиморасчетов, "Договор");
		//Договор.Ссылка = Строка(ДокументОбъект.ДоговорКонтрагента.УникальныйИдентификатор());
		Договор.ВидДоговора = "Прочее";
		Договор.Организация = Организация;
		Договор.Контрагент = Контрагент;
		
		ВалютаРегл = ОбъектXDTOПоИмениСвойства(Договор, "ВалютаВзаиморасчетов");
		//ВалютаРегл.Ссылка = Строка(ВыборкаДокумента.ДоговорКонтрагентаРеглВалютаВзаиморасчетов.УникальныйИдентификатор());
		ВалютаРегл.Код = ВыборкаДокумента.ДоговорКонтрагентаРеглВалютаВзаиморасчетовКод;
		ВалютаРегл.Наименование = ВыборкаДокумента.ДоговорКонтрагентаРеглВалютаВзаиморасчетовНаименование;
		Договор.ВалютаВзаиморасчетов = ВалютаРегл;
		Договор.РасчетыВУсловныхЕдиницах = ВыборкаДокумента.ДоговорКонтрагентаРеглРасчетыВУсловныхЕдиницах;
		Договор.Наименование = ВыборкаДокумента.ДоговорКонтрагентаРеглНаименование;
		Договор.Дата = ВыборкаДокумента.ДоговорКонтрагентаРеглДата;
		Договор.Номер = ВыборкаДокумента.ДоговорКонтрагентаРеглНомер;
		ДанныеВзаиморасчетов.Договор = Договор;
		
		ДанныеВзаиморасчетов.КурсВзаиморасчетов = ВыборкаДокумента.КурсВзаиморасчетов;
		ДанныеВзаиморасчетов.КратностьВзаиморасчетов = ВыборкаДокумента.КратностьВзаиморасчетов;
		ДанныеВзаиморасчетов.РасчетыВУсловныхЕдиницах = ВыборкаДокумента.ДоговорКонтрагентаРеглРасчетыВУсловныхЕдиницах;
		//ДанныеВзаиморасчетов.СчетУчетаРасчетовСКонтрагентом = "76.05";
		//ДанныеВзаиморасчетов.СчетУчетаРасчетовПоАвансам = "76.05";
		XDTO_ТаможеннаяДекларация.ДанныеВзаиморасчетов = ДанныеВзаиморасчетов;
		
		XDTO_ТаможеннаяДекларация.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ТаможеннаяДекларация, "Подразделение");
		XDTO_ТаможеннаяДекларация.Подразделение.Наименование = "Основное подразделение";
		
		XDTO_ТаможеннаяДекларация.НомерДекларации = СокрЛП(ВыборкаДокумента.НомерГТДПредставление);
		XDTO_ТаможеннаяДекларация.Комментарий = ВыборкаДокумента.Комментарий;
		
		XDTO_ТаможеннаяДекларация.Товары = XDTO_ТоварыГТД;
		XDTO_ТаможеннаяДекларация.Разделы = XDTO_РазделыГТД;
		XDTO_ТаможеннаяДекларация.СпособПогашенияЗадолженности = "Автоматически";
		
		// 4. Записываем ОбъектXDTO в XML-файл.
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ТаможеннаяДекларация);
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьКлючОрганизацию(КлючевыеСвойства, RecordSet);
	Организация = ОбъектXDTOПоИмениСвойства(КлючевыеСвойства, "Организация");
	Организация.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_ORGID").Value);
	Наименование = RecordSet.Fields("DOC_ORGNAME").Value;
	Организация.Наименование = Наименование;
	Организация.НаименованиеСокращенное = Наименование;
	Организация.НаименованиеПолное = Наименование;
	//Если ЗначениеЗаполнено(RecordSet.Fields("DOC_ORGINNKPP").Value) Тогда
	//	ИННКПП = СтрРазделить(RecordSet.Fields("DOC_ORGINNKPP").Value, "/");
	//	Организация.ИНН = ИННКПП[0];
	//	Организация.КПП = ИННКПП[1];
	//Иначе
		Организация.ИНН = RecordSet.Fields("DOC_ORGINN").Value;
		Организация.КПП = RecordSet.Fields("DOC_ORGKPP").Value;
	//КонецЕсли;
	Организация.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
	КлючевыеСвойства.Организация = Организация;
	Возврат Организация;
КонецФункции

Функция ВыгрузитьКлючНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, ДанныеНоменклатуры, RecordsetTable, Параметры)
	Перем КодГруппы, НаименованиеГруппы, СписатьКоличество;
	ВыгружатьОбъект = Истина;
	СтруктураПараметров = Новый Структура;
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("СписатьКоличество", СписатьКоличество) Тогда
			СтруктураПараметров.Вставить("СписатьКоличество", СписатьКоличество);
		КонецЕсли;
		Параметры.Свойство("КодГруппы", КодГруппы);
		Параметры.Свойство("НаименованиеГруппы", НаименованиеГруппы);
		Если Параметры.Свойство("ВыгружатьОбъект", ВыгружатьОбъект) = Ложь Тогда
			ВыгружатьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипВыгрузкиТовара = 0 Тогда
		ПолеКода = "NAMEALIASID";
	ИначеЕсли ТипВыгрузкиТовара = 1 Тогда
		ПолеКода = "MerExternalItemId";
	ИначеЕсли ТипВыгрузкиТовара = 2 Тогда
		ПолеКода = "ItemId";
	КонецЕсли;
	Поля = Новый Структура;
	Для Каждого Field Из RecordsetTable.Fields Цикл
		Поля.Вставить(Field.Name);
	КонецЦикла;
	
	СтруктураПараметров.Вставить("ТоварСсылка", Неопределено);
	СтруктураПараметров.Вставить("КодТовара", RecordsetTable.Fields(ПолеКода).Value);
	Если Поля.Свойство("ItemId") Тогда
		СтруктураПараметров.Вставить("АльтКодТовара", "ITEM" + RecordsetTable.Fields("ItemId").Value);
	КонецЕсли;
	СтруктураПараметров.Вставить("Наименование", RecordsetTable.Fields("NAME").Value);
	СтруктураПараметров.Вставить("НаименованиеПолное", RecordsetTable.Fields("NAME").Value+", артикул "+СокрЛП(RecordsetTable.Fields("NAMEALIASNAME").Value)+", Производитель "+СокрЛП(НаименованиеГруппы));
	СтруктураПараметров.Вставить("Артикул", RecordsetTable.Fields("NAMEALIASNAME").Value);
	Если Поля.Свойство("OutId_1c") Тогда
		СтруктураПараметров.Вставить("АльтАртикул", RecordsetTable.Fields("OutId_1c").Value);
	КонецЕсли;
	СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
	СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
	СтруктураПараметров.Вставить("СсылкаГруппы", Неопределено);
	СтруктураПараметров.Вставить("КодГруппы", КодГруппы);
	СтруктураПараметров.Вставить("НаименованиеГруппы", НаименованиеГруппы);
	СтруктураПараметров.Вставить("ВыгружатьОбъект", ВыгружатьОбъект);
	
	XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеТовары, СтруктураПараметров);
	Если Параметры.Свойство("СписатьКоличество") И СтруктураПараметров.Свойство("СписатьКоличество") Тогда
		Параметры.Вставить("СписанноеКоличество", СтруктураПараметров.СписанноеКоличество);
		Параметры.СписатьКоличество = СтруктураПараметров.СписатьКоличество;
	КонецЕсли;
	ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
	Возврат ДанныеНоменклатуры.Номенклатура;
КонецФункции

Функция ВыгрузитьОбъекты(ФайлОбмена, XMLСхема, КлючевыеСвойства)
	XDTO_Объект = Неопределено;
	Если КлючевыеСвойства.Тип().Имя = "КлючевыеСвойстваНоменклатура" Тогда
		XDTO_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.Номенклатура"));
		XDTO_Объект.КлючевыеСвойства = КлючевыеСвойства;
		XDTO_Объект.ТипНоменклатуры = "Товар";
		ВыгрузитьКлючЕдиницыИзмерения(XDTO_Объект, "шт");
	ИначеЕсли КлючевыеСвойства.Тип().Имя = "КлючевыеСвойстваЕдиницаИзмерения" Тогда
		XDTO_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.ЕдиницыИзмерения"));
		XDTO_Объект.КлючевыеСвойства = КлючевыеСвойства;
		XDTO_Объект.Наименование = "шт";
		XDTO_Объект.НаименованиеПолное = "шт";
	ИначеЕсли КлючевыеСвойства.Тип().Имя = "КлючевыеСвойстваСклад" Тогда
		XDTO_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.Склады"));
		XDTO_Объект.КлючевыеСвойства = КлючевыеСвойства;
	ИначеЕсли КлючевыеСвойства.Тип().Имя = "КлючевыеСвойстваКонтрагент" Тогда
		XDTO_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.Контрагенты"));
		XDTO_Объект.КлючевыеСвойства = КлючевыеСвойства;
	ИначеЕсли КлючевыеСвойства.Тип().Имя = "КлючевыеСвойстваОрганизация" Тогда
		//XDTO_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.Организации"));
		//XDTO_Объект.КлючевыеСвойства = КлючевыеСвойства;
	ИначеЕсли КлючевыеСвойства.Тип().Имя = "КлючевыеСвойстваСтранаМира" Тогда
		XDTO_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.СтраныМира"));
		XDTO_Объект.КлючевыеСвойства = КлючевыеСвойства;
	ИначеЕсли КлючевыеСвойства.Тип().Имя = "Справочник.СтраныМира" Тогда
		XDTO_Объект = КлючевыеСвойства;
	ИначеЕсли КлючевыеСвойства.Тип().Имя = "Справочник.Номенклатура" Тогда
		XDTO_Объект = КлючевыеСвойства;
	ИначеЕсли КлючевыеСвойства.Тип().Имя = "КлючевыеСвойстваНоменклатураГруппа" Тогда
		XDTO_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.НоменклатураГруппа"));
		XDTO_Объект.КлючевыеСвойства = КлючевыеСвойства;
	ИначеЕсли КлючевыеСвойства.Тип().Имя = "КлючевыеСвойстваВалюта" Тогда
		XDTO_Объект = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.Валюты"));
		XDTO_Объект.КлючевыеСвойства = КлючевыеСвойства;
		Если КлючевыеСвойства.Наименование = "RUR" Тогда
			XDTO_Объект.НаименованиеПолное = "руб.";
			XDTO_Объект.ЗагружаетсяИзИнтернета = Ложь;
		ИначеЕсли КлючевыеСвойства.Наименование = "USD" Тогда
			XDTO_Объект.НаименованиеПолное = "Доллар США";
			XDTO_Объект.ЗагружаетсяИзИнтернета = Истина;
		ИначеЕсли КлючевыеСвойства.Наименование = "EUR" Тогда
			XDTO_Объект.НаименованиеПолное = "Евро";
			XDTO_Объект.ЗагружаетсяИзИнтернета = Истина;
		ИначеЕсли КлючевыеСвойства.Наименование = "CHF" Тогда
			XDTO_Объект.НаименованиеПолное = "Швейцарский франк";
			XDTO_Объект.ЗагружаетсяИзИнтернета = Истина;
		Иначе
			XDTO_Объект.НаименованиеПолное = КлючевыеСвойства.Наименование;
			XDTO_Объект.ЗагружаетсяИзИнтернета = Ложь;
		КонецЕсли;
	КонецЕсли;
	Если XDTO_Объект <> Неопределено Тогда
		ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_Объект);
	КонецЕсли;
	Возврат XDTO_Объект;
КонецФункции

Функция ВыгрузитьКлючЕдиницыИзмерения(Данные, Наименование)
	ЕдиницаИзмерения = ОбъектXDTOПоИмениСвойства(Данные, "ЕдиницаИзмерения");
	ЕдиницаИзмерения.Ссылка = "fe5547dc-3d84-11df-96f8-000c6ea69372";
	ЕдиницаИзмерения.Код = "796 ";
	Данные.ЕдиницаИзмерения = ЕдиницаИзмерения;
	Возврат ЕдиницаИзмерения;
КонецФункции

Функция ВыгрузитьКлючГТД(XMLСхема, Данные, RecordsetTable, ВыгружаемыеОбъекты)
	ДанныеГТД = ОбъектXDTOПоИмениСвойства(Данные, "ДанныеГТД");
	ДанныеГТД.НомерГТД = RecordsetTable.Fields("INVENTGTD").Value;
	СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеОбъекты, ДанныеГТД, RecordsetTable.Fields("COUNTRYOFORIGINID").Value,
	RecordsetTable.Fields("COUNTRY").Value, RecordsetTable.Fields("COUNTRYNUMID_MRC").Value);
	Данные.ДанныеГТД = ДанныеГТД;
	Возврат ДанныеГТД;
КонецФункции

Функция ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеОбъекты, ДанныеXDTO, Знач КодАльфа3 = "", Знач НазваниеСтраны = "", Знач КодСтраны = "");
	КодАльфа2 = "";
	Если КодАльфа3 = "UK" Тогда
		КодАльфа3 = "GBR";
		КодСтраны = "826";
		НазваниеСтраны = "СОЕДИНЕННОЕ КОРОЛЕВСТВО";
	ИначеЕсли КодАльфа3 = "USA" Тогда
		НазваниеСтраны = "СОЕДИНЕННЫЕ ШТАТЫ";
		КодСтраны = "840";
	ИначеЕсли КодАльфа3 = "KOR" Тогда
		НазваниеСтраны = "КОРЕЯ, РЕСПУБЛИКА";
		КодСтраны = "410";
	ИначеЕсли КодАльфа3 = "BGR" Тогда
		НазваниеСтраны = "БОЛГАРИЯ";
		КодСтраны = "100";
	КонецЕсли;
	Если Не ЗначениеЗаполнено(КодСтраны) Тогда
		КодСтраны = "643";
		НазваниеСтраны = "РОССИЯ";
		КодАльфа2 = "RU";
		КодАльфа3 = "RUS";
	КонецЕсли;
	
	XDTO_Страна = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.СтраныМира"));
	XDTO_Страна.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_Страна, "КлючевыеСвойства");
	
	НаименованиеПолное = НазваниеСтраны;
	НайдСтраны = ЭтотОбъект.Классификатор.НайтиСтроки(Новый Структура("Код", КодСтраны));
	Если НайдСтраны.Количество() > 0 Тогда
		НазваниеСтраны = НайдСтраны[0].Наименование;
		КодАльфа2 = НайдСтраны[0].КодАльфа2;
		КодАльфа3 = НайдСтраны[0].КодАльфа3;
		НаименованиеПолное = НайдСтраны[0].НаименованиеПолное;
	КонецЕсли;
		
	XDTO_Страна.КлючевыеСвойства.Код = КодСтраны;
	XDTO_Страна.КлючевыеСвойства.Наименование = ВРег(НазваниеСтраны);
		
	XDTO_Страна.НаименованиеПолное = НаименованиеПолное;
	XDTO_Страна.КодАльфа2 = КодАльфа2;
	XDTO_Страна.КодАльфа3 = КодАльфа3;
	ВыгружаемыеОбъекты.Вставить("СтранаПроисхождения_" + XDTO_Страна.КлючевыеСвойства.Код, XDTO_Страна);
	
	ДанныеXDTO.СтранаПроисхождения = XDTO_Страна.КлючевыеСвойства;
	Возврат ДанныеXDTO.СтранаПроисхождения;
КонецФункции

Функция ВыгрузитьКлючВалюты(Данные, RecordSet);
	
	//НоваяСтрока.Код                       = ТекущиеДанные.КодВалютыЦифровой;
	//НоваяСтрока.Наименование              = ТекущиеДанные.КодВалютыБуквенный;
	//НоваяСтрока.НаименованиеПолное        = ТекущиеДанные.Наименование;
	//Если ТекущиеДанные.Загружается Тогда
	//	НоваяСтрока.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.ЗагрузкаИзИнтернета;
	//Иначе
	//	НоваяСтрока.СпособУстановкиКурса = Перечисления.СпособыУстановкиКурсаВалюты.РучнойВвод;
	//КонецЕсли;
	//НоваяСтрока.ПараметрыПрописиНаРусском = ТекущиеДанные.ПараметрыПрописиНаРусском;
	
	
	Валюта = ОбъектXDTOПоИмениСвойства(Данные, "Валюта");
	КодВалюты = RecordSet.Fields("DOC_CUR").Value;
	Валюта.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_CUR").Value);
	Если КодВалюты = "RUR" Тогда
		Валюта.Код = "643";
		Валюта.Наименование = КодВалюты;//"руб.";
	ИначеЕсли КодВалюты = "USD" Тогда
		Валюта.Код = "840";
		Валюта.Наименование = КодВалюты;//"Доллар США";
	ИначеЕсли КодВалюты = "EUR" Тогда
		Валюта.Код = "978";
		Валюта.Наименование = КодВалюты;// "Евро";
	ИначеЕсли КодВалюты = "CHF" Тогда
		Валюта.Код = "756";
		Валюта.Наименование = КодВалюты;//"Швейцарский франк";
	Иначе
		Валюта.Наименование = КодВалюты;
	КонецЕсли;
	Данные.Валюта = Валюта;
	Возврат Валюта;
КонецФункции

Функция ВыгрузитьКлючКонтрагента(Данные, RecordSet, СтранаРегистрации = Неопределено)
	Контрагент = ОбъектXDTOПоИмениСвойства(Данные, "Контрагент");
	Наименование = RecordSet.Fields("DOC_CONTRACTORNAME").Value;
	Если Наименование = "Mercury Distribution SA" Тогда
		Наименование = "Mercury Distribution S.A.";
	Иначе
		Контрагент.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_CONTRACTORID").Value);
	КонецЕсли;
	Контрагент.Наименование = Наименование;
	Контрагент.НаименованиеПолное = Наименование;
	Контрагент.ИНН = СокрЛП(RecordSet.Fields("DOC_CONTRACTORINN").Value);
	Если СтрДлина(Контрагент.ИНН) = 12 Тогда
		Контрагент.ЮридическоеФизическоеЛицо = "ФизическоеЛицо";
	Иначе
		Контрагент.КПП = RecordSet.Fields("DOC_CONTRACTORKPP").Value;
		Контрагент.ЮридическоеФизическоеЛицо = "ЮридическоеЛицо";
	КонецЕсли;
	Если СтранаРегистрации = Неопределено Тогда
		СтранаРегистрации = ВыгрузитьКлючПоСтруктуре(Контрагент, СтранаРоссия, "СтранаРегистрации", Неопределено);
	Иначе
		Контрагент.СтранаРегистрации = СтранаРегистрации;
	КонецЕсли;
	Данные.Контрагент = Контрагент;
	Возврат Контрагент;
КонецФункции

Функция ВыгрузитьКлючПоСтруктуре(Данные, СтруктураДанных, ИмяДанных, XMLСхема)
	Если Данные = Неопределено Тогда
		ОбъектXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, ИмяДанных));
	Иначе
		ОбъектXDTO = ОбъектXDTOПоИмениСвойства(Данные, ИмяДанных);
	КонецЕсли;
	Для Каждого ЭлементСтруктуры Из СтруктураДанных Цикл
			ОбъектXDTO[ЭлементСтруктуры.Ключ] = ЭлементСтруктуры.Значение;
	КонецЦикла;
	Если Данные <> Неопределено Тогда
		Данные[ИмяДанных] = ОбъектXDTO;
	КонецЕсли;
	Возврат ОбъектXDTO;
КонецФункции

Функция ВыгрузитьКлючДоговора(ДанныеВзаиморасчетов, RecordSet, Организация = Неопределено, Контрагент = Неопределено, Валюта = Неопределено, ВидДоговора = "СПокупателем")
	Договор = ОбъектXDTOПоИмениСвойства(ДанныеВзаиморасчетов, "Договор");
	Договор.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_CONTRACTID").Value);
	Договор.ВидДоговора = ВидДоговора;
	Договор.Организация = Организация;
	Договор.Контрагент = Контрагент;
	Договор.ВалютаВзаиморасчетов = Валюта;
	Договор.РасчетыВУсловныхЕдиницах = Ложь;
	//Договор.Наименование = RecordSet.Fields("DOC_CONTRACTNAME").Value + " " + RecordSet.Fields("DOC_CONTRACTDESC").Value;
	Договор.Наименование = "Договор № " + RecordSet.Fields("DOC_CONTRACTNAME").Value + " от " + Формат(RecordSet.Fields("DOC_CONTRACTDATE").Value, "ДФ=dd.MM.yyyy");
	Договор.Дата = RecordSet.Fields.Item("DOC_CONTRACTDATE").Value;
	Договор.Номер = RecordSet.Fields("DOC_CONTRACTNUM").Value;
	ДанныеВзаиморасчетов.Договор = Договор;
	Возврат Договор;
КонецФункции

Функция ВыгрузитьКлючСклада(Данные, RecordSet, ТипСклада)
	Склад = ОбъектXDTOПоИмениСвойства(Данные, "Склад");
	Склад.Ссылка = ХэшMD5Простой(RecordSet.Fields("DOC_STOCKID").Value);
	Склад.Наименование = RecordSet.Fields("DOC_STOCKNAME").Value;
	Склад.ТипСклада = ТипСклада;
	Данные.Склад = Склад;
	Возврат Склад;
КонецФункции

Функция ВыгрузитьКлючПодразделения(Данные, КодПодразделения, НаименованиеПодразделения)
	Подразделение = ОбъектXDTOПоИмениСвойства(Данные, "Подразделение");
	Подразделение.Ссылка = ХэшMD5Простой(КодПодразделения);
	Подразделение.Наименование = НаименованиеПодразделения;
	Данные.Подразделение = Подразделение;
	Возврат Подразделение;
КонецФункции

// Возвращает объект XDTO по имени типа из пространства имен ГИСМ
//
// Параметры:
//  ИмяТипа - Строка - Имя типа
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO
//
Функция ОбъектXDTO(ИмяТипа) Экспорт
	
	Возврат ФабрикаXDTO.Создать(ТипФабрикаXDTO(ИмяТипа));
	
КонецФункции

// Возвращает тип значения (объекта) XDTO из пространства имен ГИСМ по имени
//
// Параметры:
//  ИмяТипа - Строка - Имя типа
// 
// Возвращаемое значение:
//  ТипЗначенияXDTO - Тип значения (объекта)
//
Функция ТипФабрикаXDTO(ИмяТипа) Экспорт
	
	Возврат ФабрикаXDTO.Тип("http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.3", ИмяТипа);
	
КонецФункции

Функция ФорматОбмена(Знач ВерсияФормата) Экспорт
	
	ФорматОбмена = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData";
	ЭлементыФормата = СтрРазделить(ФорматОбмена, "/");
	ЭлементыФормата.Добавить(ВерсияФормата);
	
	Возврат СтрСоединить(ЭлементыФормата, "/");
КонецФункции

Функция XMLБазоваяСхема()
	
	Возврат "http://www.1c.ru/SSL/Exchange/Message";
	
КонецФункции

// Функция - Объект XDTOПо имени свойства
//
// Параметры:
//  ОбъектXDTOРодитель - ОбъектXDTO - ОбъектXDTO в контексте которого запрашивается свойство
//  ИмяСвойства - Строка - Имя свойства
// 
// Возвращаемое значение:
//  ОбъектXDTO - Объект XDTO
//
Функция ОбъектXDTOПоИмениСвойства(ОбъектXDTOРодитель, ИмяСвойства) Экспорт
	
	Если ОбъектXDTOРодитель = Неопределено Тогда
		СвойствоXDTO = ФабрикаXDTO.Пакеты.Получить("http://v8.1c.ru/edi/edi_stnd/EnterpriseData/1.3").КорневыеСвойства.Получить(ИмяСвойства);
	Иначе
		СвойствоXDTO = ОбъектXDTOРодитель.Тип().Свойства.Получить(ИмяСвойства);
	КонецЕсли;
	
	Если СвойствоXDTO = Неопределено Тогда
		ВызватьИсключение СтрШаблон(НСтр("ru = 'Свойство %1 отсутствует в составе типов'"), ИмяСвойства);
	Иначе
		Возврат ФабрикаXDTO.Создать(СвойствоXDTO.Тип);
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьСписокДокументов() Экспорт
	Перем КоличествоЗаписей;
	ТипыДокументов = Новый Структура;
	Для Каждого СтрокаТЧ Из ЭтотОбъект.ТаблицаТиповДокументов Цикл
		Если СтрокаТЧ.Признак Тогда
			ТипыДокументов.Вставить(СтрокаТЧ.ТипДокумента);
		КонецЕсли;
	КонецЦикла;
	ADO_Connect();
	CmdListInit(ТипыДокументов);
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet = CmdList.Execute(КоличествоЗаписей);
	ТаблицаДокументов.Очистить();
	Пока RecordSet.EOF() = Ложь Цикл
		СтрокаТаб = ТаблицаДокументов.Добавить();
		Для Каждого RstField Из RecordSet.Fields Цикл
			СтрокаТаб[RstField.Name] = RstField.Value;
		КонецЦикла;
		RecordSet.MoveNext();
	КонецЦикла;
	CmdCashInit(ТипыДокументов);
	ADO_Disconnect();
	ЗапросДокументов1С = Новый Запрос("ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Ссылка КАК ДокументСсылка,
	|	ПоступлениеТоваровУслуг.Дата КАК DOC_DATE,
	|	ПоступлениеТоваровУслуг.Номер КАК DOC_ID,
	|	""ПостНекоммерция"" КАК DOC_TYPE,
	|	Валюты.Наименование КАК DOC_CUR,
	|	Контрагенты.Наименование КАК DOC_GTD,
	|	Организации.Наименование КАК DOC_JURPERS,
	|	ПоступлениеТоваровУслуг.СуммаДокумента КАК DOC_SUM,
	|	ПоступлениеТоваровУслуг.Комментарий КАК DOC_DESCR
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ПоступлениеТоваровУслуг.ВалютаДокумента = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ПоступлениеТоваровУслуг.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ПоступлениеТоваровУслуг.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПоступлениеТоваровУслуг.Проведен = ИСТИНА
	|	И НЕ ПоступлениеТоваровУслуг.НомерВходящегоДокумента ПОДОБНО ""%ВНЛ%""
	|	И &ВыводитьПостНекоммерция = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка,
	|	ГТДИмпорт.Дата,
	|	ГТДИмпорт.Номер,
	|	""ГТДНекоммерция"",
	|	Валюты.Наименование,
	|	Контрагенты.Наименование,
	|	Организации.Наименование,
	|	ГТДИмпорт.ТаможенныйСбор,
	|	ГТДИмпорт.Комментарий
	|ИЗ
	|	Документ.ГТДИмпорт КАК ГТДИмпорт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ГТДИмпорт.ВалютаДокумента = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ГТДИмпорт.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ГТДИмпорт.Контрагент = Контрагенты.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ГТДИмпортТовары.Ссылка КАК Ссылка
	|		ИЗ
	|			Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ГТДИмпорт.Товары КАК ГТДИмпортТовары
	|				ПО ПоступлениеТоваровУслуг.Ссылка = ГТДИмпортТовары.ДокументПартии
	|		ГДЕ
	|			ПоступлениеТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|			И НЕ ПоступлениеТоваровУслуг.НомерВходящегоДокумента ПОДОБНО ""%ВНЛ%""
	|	) КАК ОтборГТД
	|		ПО ГТДИмпорт.Ссылка = ОтборГТД.Ссылка
	|ГДЕ
	|	ГТДИмпорт.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ГТДИмпорт.Проведен = ИСТИНА
	|	И &ВыводитьГТДНекоммерция = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка,
	|	РеализацияТоваровУслуг.Дата,
	|	РеализацияТоваровУслуг.Номер,
	|	""РеалНекоммерция"",
	|	Валюты.Наименование,
	|	Контрагенты.Наименование,
	|	Организации.Наименование,
	|	РеализацияТоваровУслуг.СуммаДокумента,
	|	РеализацияТоваровУслуг.Комментарий
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО РеализацияТоваровУслуг.ВалютаДокумента = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО РеализацияТоваровУслуг.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО РеализацияТоваровУслуг.Контрагент = Контрагенты.Ссылка
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТабДок.Ссылка
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг.Товары КАК ТабДок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.Номенклатура КАК СпрНом
	|		ПО ТабДок.Номенклатура = СпрНом.Ссылка
	|	ГДЕ
	|		НЕ СпрНом.Наименование ПОДОБНО ""ЯЯЯ""
	|	) КАК ТовДок
	|	ПО РеализацияТоваровУслуг.Ссылка = ТовДок.Ссылка
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РеализацияТоваровУслуг.Проведен = ИСТИНА
	|	И &ВыводитьРеалНекоммерция = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Ссылка,
	|	ОтчетКомитентуОПродажах.Дата,
	|	ОтчетКомитентуОПродажах.Номер,
	|	""ОтчётКомитенту"",
	|	Валюты.Наименование,
	|	Контрагенты.Наименование,
	|	Организации.Наименование,
	|	ОтчетКомитентуОПродажах.СуммаДокумента,
	|	ОтчетКомитентуОПродажах.Комментарий
	|ИЗ
	|	Документ.ОтчетКомитентуОПродажах КАК ОтчетКомитентуОПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК Валюты
	|		ПО ОтчетКомитентуОПродажах.ВалютаДокумента = Валюты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ОтчетКомитентуОПродажах.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ОтчетКомитентуОПродажах.Контрагент = Контрагенты.Ссылка
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ОтчетКомитентуОПродажах.Проведен = ИСТИНА
	|	И &ВыводитьОтчётКомитенту = Истина");
	//|	И (РеализацияТоваровУслуг.Комментарий ПОДОБНО ""%Инвойс%""
	//|	ИЛИ РеализацияТоваровУслуг.Комментарий ПОДОБНО ""%Реализация%""
	//|	ИЛИ РеализацияТоваровУслуг.Комментарий ПОДОБНО ""%Экспортная%""
	//|	ИЛИ РеализацияТоваровУслуг.Комментарий ПОДОБНО """")
	ЗапросДокументов1С.УстановитьПараметр("НачалоПериода", НачалоПериода);
	ЗапросДокументов1С.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода));
	ЗапросДокументов1С.УстановитьПараметр("ВыводитьПостНекоммерция", ТипыДокументов.Свойство("ПостНекоммерция"));
	ЗапросДокументов1С.УстановитьПараметр("ВыводитьГТДНекоммерция", ТипыДокументов.Свойство("ГТДНекоммерция"));
	ЗапросДокументов1С.УстановитьПараметр("ВыводитьРеалНекоммерция", ТипыДокументов.Свойство("РеалНекоммерция"));
	ЗапросДокументов1С.УстановитьПараметр("ВыводитьОтчётКомитенту", ТипыДокументов.Свойство("ОтчётКомитенту"));
	ВыборкаДокументов = ЗапросДокументов1С.Выполнить().Выбрать();
	Пока ВыборкаДокументов.Следующий() Цикл
		СтрокаТаб = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, ВыборкаДокументов);
	КонецЦикла;
	Если ТипыДокументов.Свойство("ПостВнешнее") Или
		 ТипыДокументов.Свойство("РеалВнешняя") Или
		 ТипыДокументов.Свойство("ОстРеализ") Или
		 ТипыДокументов.Свойство("ОстПоступл") Или
		 ТипыДокументов.Свойство("ОстОприход") Тогда
		ТабДокументовXLS = ЭтотОбъект.ТаблицаЗакупокXLS.Выгрузить(, "КонтрагентНаименование, Организация, НомерДокумента, ДатаДокумента, НомерСчетфактуры, ТипДокумента, Сумма");
		ТабДокументовXLS.Свернуть("КонтрагентНаименование, Организация, НомерДокумента, ДатаДокумента, НомерСчетфактуры, ТипДокумента", "Сумма");
		Для Каждого СтрокаДок Из ТабДокументовXLS Цикл
			Если ЭтотОбъект.НачалоПериода <= СтрокаДок.ДатаДокумента И СтрокаДок.ДатаДокумента <= КонецДня(ЭтотОбъект.КонецПериода)
				И ТипыДокументов.Свойство(СтрокаДок.ТипДокумента) Тогда
				СтрокаТаб = ТаблицаДокументов.Добавить();
				СтрокаТаб.DOC_DATE = СтрокаДок.ДатаДокумента;
				СтрокаТаб.DOC_ID = СтрокаДок.НомерДокумента;
				СтрокаТаб.DOC_TYPE = СтрокаДок.ТипДокумента;
				СтрокаТаб.DOC_SUM = СтрокаДок.Сумма;
				СтрокаТаб.DOC_CUR = "руб.";
				СтрокаТаб.DOC_GTD = СтрокаДок.КонтрагентНаименование;
				СтрокаТаб.DOC_JURPERS = Строка(СтрокаДок.Организация);
				СтрокаТаб.DOC_DESCR = Строка(СтрокаДок.НомерСчетфактуры);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаДокументов.Сортировать("DOC_DATE");
	Возврат Истина;
КонецФункции // ВыполнитьВыгрузку()

Функция ADO_Connect() Экспорт
	
	Если Connection = Неопределено Тогда
		Попытка
			
			Connection=Новый COMОбъект("ADODB.Connection");
		
			//Если ПUseNTAuthentication = 1 Тогда
			//	СтрКоннект="Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog="+ПИмяБазы+";Data Source="+ПИмяСервера+";";
			//Иначе
			СтрКоннект="Provider=SQLOLEDB.1;Password="+ПарольБазыAxapta+";Persist Security Info=True;User ID="+ПользовательAxapta+";Initial Catalog="+ИмяБазыAxapta+";Data Source="+ИмяСервераAxapta+";";
			//КонецЕсли;
			
			Connection.ConnectionTimeOut =600;
			Connection.CursorLocation = 3;
			Connection.Open(СтрКоннект);
			
		Исключение
			
			СтрОписаниеОшибки=ОписаниеОшибки();
			
			//Если ПВызватьИсключение<>0 Тогда
				ВызватьИсключение СтрОписаниеОшибки;
			//ИначеЕсли НЕ ПустаяСтрока(СтрОписаниеОшибки) Тогда
			//	Сообщить(СтрОписаниеОшибки);
			//КонецЕсли;
		
			Возврат Ложь;
			
		КонецПопытки;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция ADO_ConnectCash() Экспорт
	
	Если ConnectionCash = Неопределено Тогда
		Попытка
			
			ConnectionCash=Новый COMОбъект("ADODB.Connection");
		
			//Если ПUseNTAuthentication = 1 Тогда
			//	СтрКоннект="Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security Info=False;Initial Catalog="+ПИмяБазы+";Data Source="+ПИмяСервера+";";
			//Иначе
			СтрКоннект="Provider=SQLOLEDB.1;Password="+ПарольБазыAxaptaCash+";Persist Security Info=True;User ID="+ПользовательAxaptaCash+";Initial Catalog="+ИмяБазыAxaptaCash+";Data Source="+ИмяСервераAxaptaCash+";";
			//КонецЕсли;
			
			ConnectionCash.ConnectionTimeOut =600;
			ConnectionCash.CursorLocation = 3;
			ConnectionCash.Open(СтрКоннект);
			
		Исключение
			
			СтрОписаниеОшибки=ОписаниеОшибки();
			
			//Если ПВызватьИсключение<>0 Тогда
				ВызватьИсключение СтрОписаниеОшибки;
			//ИначеЕсли НЕ ПустаяСтрока(СтрОписаниеОшибки) Тогда
			//	Сообщить(СтрОписаниеОшибки);
			//КонецЕсли;
		
			Возврат Ложь;
			
		КонецПопытки;
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция ADO_Disconnect() Экспорт
	
	Попытка
		Connection.Close();
	Исключение
	КонецПопытки;
	Connection = Неопределено;
	Возврат Истина;
	
КонецФункции

Функция ADO_DisconnectCash() Экспорт
	
	Попытка
		ConnectionCash.Close();
	Исключение
	КонецПопытки;
	ConnectionCash = Неопределено;
	Возврат Истина;
	
КонецФункции

Функция CmdListInit(ТипыДокументов)
	//Если CmdList = Неопределено Тогда
		CmdList=Новый COMОбъект("ADODB.Command");
		CmdList.ActiveConnection = Connection;
		CmdList.CommandText = "
		|DECLARE @T1 AS Bit, @T2 AS Bit, @T3 AS Bit, @T4 AS Bit, @T5 AS Bit, @T6 AS Bit, @T7 AS Bit, @BeginDate AS datetime, @EndDate AS datetime;
		|SET @T1 = ?;
		|SET @T2 = ?;
		|SET @T3 = ?;
		|SET @T4 = ?;
		|SET @T5 = ?;
		|SET @T6 = ?;
		|SET @T7 = ?;
		|SET @BeginDate = ?;
		|SET @EndDate = ?;
		|SELECT
		|	ExtLogist.MEREXTERNALLOGISTICID AS DOC_ID,
		|	dateadd(second, ExtLogist.CREATEDTIME, ExtLogist.TRANSDATEGTD) AS DOC_DATE,
		|	ExtLogist.CURRENCYCODEEXTERNAL AS DOC_CUR,
		|	SUM(ExtSpec.LINEAMOUNTEXTERNAL) AS DOC_SUM,
		|	ExtLogist.merInventGTD AS DOC_GTD,
		|	Customers.Name AS DOC_JURPERS,
		|	ExtLogist.DESCRIPTION AS DOC_DESCR,
		|	'Импорт' AS DOC_TYPE
		|FROM    dbo.MEREXTERNALLOGISTICTABLE AS ExtLogist
		|LEFT JOIN
		|	dbo.MEREXTERNALLOGISTICLINESP50195 as ExtSpec
		|	ON ExtLogist.MEREXTERNALLOGISTICID = ExtSpec.MEREXTERNALLOGISTICID
		|LEFT JOIN
		|	dbo.CustTable AS Customers
		|	ON ExtLogist.MERJURIDICALPERSONIDTO = Customers.AccountNum
		|WHERE (@T1 = 1) AND (POSTED = 1)
		|	AND (ExtLogist.MEREXTERNALLOGISTICTYPE = 2)
		|	AND (ExtLogist.TransDateGTDCustom BETWEEN @BeginDate AND @EndDate)
		|GROUP BY
		|	ExtLogist.MEREXTERNALLOGISTICID,
		|	dateadd(second, ExtLogist.CREATEDTIME, ExtLogist.TRANSDATEGTD),
		|	ExtLogist.CURRENCYCODEEXTERNAL,
		|	ExtLogist.merInventGTD,
		|	Customers.Name,
		|	ExtLogist.DESCRIPTION
		|UNION ALL
		|SELECT
		|	OpenOrders.OPENORDERID AS DOC_ID,
		|	dateadd(second, OpenOrders.CREATEDTIME, OpenOrders.DOCREASONTRANSDATE) AS DOC_DATE,
		|	OpenOrders.CURRENCYCODE AS DOC_CUR,
		|	SUM(OpenOrderLines.LINEPRICEAMOUNT) AS DOC_SUM,
		|	Vend.NAME AS DOC_GTD,
		|	JurPers.MERJURIDICALPERSONNAME AS DOC_JURPERS,
		|	OpenOrders.DESCRIPTION AS DOC_DESCR,
		|	'Поступление' AS DOC_TYPE
		|FROM    dbo.MEROPENORDERTABLE AS OpenOrders
		|LEFT JOIN
		|	dbo.MEROPENORDERLINE AS OpenOrderLines
		|	ON OpenOrders.OPENORDERID = OpenOrderLines.OPENORDERID
		|LEFT OUTER JOIN
		|	dbo.MERJURIDICALPERSON AS JurPers
		|	ON OpenOrders.MERJURIDICALPERSONID = JurPers.MERJURIDICALPERSONID
		|LEFT OUTER JOIN
		|	dbo.VENDTABLE AS Vend
		|	ON OpenOrders.VENDACCOUNT = Vend.ACCOUNTNUM
		|WHERE (@T2 = 1) AND (POSTED = 1)
		|	AND (OpenOrders.MEROPENORDERDOCTYPE = 18)
		|	AND (OpenOrders.DOCREASONTRANSDATE BETWEEN @BeginDate AND @EndDate)
		|GROUP BY
		|	OpenOrders.OPENORDERID,
		|	dateadd(second, OpenOrders.CREATEDTIME, OpenOrders.DOCREASONTRANSDATE),
		|	OpenOrders.CURRENCYCODE,
		|	Vend.NAME,
		|	JurPers.MERJURIDICALPERSONNAME,
		|	OpenOrders.DESCRIPTION
		|UNION ALL
		|SELECT
		|	InvoiceJour.MEREXTERNALLOGISTICID + '/' + InvoiceJour.INVOICEID AS DOC_ID,
		|	dateadd(second, InvoiceJour.CREATEDTIME, InvoiceJour.InvoiceDate) AS DOC_DATE,
		|	'RUR' AS DOC_CUR,
		|	SUM(InvoiceLines.LINEPRICEAMOUNT) AS DOC_SUM,
		|	CustomersTo.NAME AS DOC_GTD,
		|	CustomersFrom.NAME AS DOC_JURPERS,
		|	InvoiceJour.DESCRIPTION AS DOC_DESCR,
		|	'Отгрузка' AS DOC_TYPE
		|FROM
		|	dbo.MerExternalInvoiceJour AS InvoiceJour
		|LEFT JOIN
		|	dbo.MerExternalInvoiceTrans AS InvoiceLines
		|	ON InvoiceJour.MEREXTERNALLOGISTICID = InvoiceLines.MEREXTERNALLOGISTICID
		|	AND InvoiceJour.InvoiceID = InvoiceLines.InvoiceID
		|	AND InvoiceJour.ParmID = InvoiceLines.ParmID
		|LEFT JOIN
		|	dbo.CustTable AS CustomersFrom
		|	ON InvoiceJour.MEREXTERNALJURIDICALPERSONFROM = CustomersFrom.AccountNum
		|LEFT JOIN
		|	dbo.CustTable AS CustomersTo
		|	ON InvoiceJour.MEREXTERNALJURIDICALPERSONTO = CustomersTo.AccountNum
		|WHERE (@T3 = 1) AND (POSTED = 1)
		|	AND (InvoiceJour.MEREXTERNALINVOICEPROCESSTYPE = 1)
		|	AND (InvoiceJour.InvoiceDate BETWEEN @BeginDate AND @EndDate)
		|GROUP BY
		|	InvoiceJour.MEREXTERNALLOGISTICID + '/' + InvoiceJour.INVOICEID,
		|	dateadd(second, InvoiceJour.CREATEDTIME, InvoiceJour.InvoiceDate),
		|	CustomersTo.NAME,
		|	CustomersFrom.NAME,
		|	InvoiceJour.DESCRIPTION
		|UNION ALL
		|SELECT
		|	CASHREPORTS.RETAILCASHREPORTID AS DOC_ID,
		|	dateadd(second, CASHREPORTS.CREATEDTIME, CashReports.TRANSDATE) AS DOC_DATE,
		|	'RUR' AS DOC_CUR,
		|	CASHREPORTS.AMOUNTCUR AS DOC_SUM,
		|	INVENTLOCATION.NAME AS DOC_GTD,
		|	JURIDICALPERSON.MERJURIDICALPERSONNAME AS DOC_JURPERS,
		|	CASHREPORTS.DESCRIPTION AS DOC_DESCR,
		|	(CASE WHEN CASHREPORTS.MERRETAILCASHREPORTTYPE = 1 THEN 'ВозвратРозница' ELSE 'ПродажаРозница' END) AS DOC_TYPE
		|FROM
		|	dbo.MERRETAILCASHREPORTTABLE AS CASHREPORTS
		|INNER JOIN
		|	dbo.INVENTLOCATION AS INVENTLOCATION ON CASHREPORTS.INVENTLOCATIONID = INVENTLOCATION.INVENTLOCATIONID
		|LEFT JOIN
		|	dbo.INVENTLOCATION_JURIDICALT50219 AS JURIDICALHISTORY
		|	ON CASHREPORTS.INVENTLOCATIONID = JURIDICALHISTORY.INVENTLOCATIONID AND
		|	(CASHREPORTS.TRANSDATE >= JURIDICALHISTORY.FROMDATE AND (CASHREPORTS.TRANSDATE <= JURIDICALHISTORY.TODATE OR JURIDICALHISTORY.TODATE = 0))
		|LEFT JOIN 
		|	dbo.MERJURIDICALPERSON AS JURIDICALPERSON ON ISNULL(JURIDICALHISTORY.MERJURIDICALPERSONID, INVENTLOCATION.MERJURIDICALPERSONID) = JURIDICALPERSON.MERJURIDICALPERSONID
		|WHERE (1=0) AND ((@T4 = 1 AND CASHREPORTS.MERRETAILCASHREPORTTYPE != 1) OR
		|	(@T5 = 1 AND CASHREPORTS.MERRETAILCASHREPORTTYPE = 1))
		|	AND (CASHREPORTS.CANCEL = 0)
		|	AND (CASHREPORTS.SalesIdBase <> '')
		|	AND (CASHREPORTS..AMOUNTCUR <> 0)
		|	AND (CASHREPORTS.TRANSDATE BETWEEN @BeginDate AND @EndDate)
		|UNION ALL
		|SELECT
		|	DISTRIB_TABLE.RETAILCASHREPORTID AS DOC_ID,
		|	dateadd(second, DISTRIB_TABLE.CREATEDTIME, DISTRIB_TABLE.TRANSDATE) AS DOC_DATE,
		|	'RUR' AS DOC_CUR,
		|	DISTRIB_TABLE.SALESAMOUNTCUR AS DOC_SUM,
		|	ToCustomers.Name AS DOC_GTD,
		|	JURIDICALPERSON.MERJURIDICALPERSONNAME AS DOC_JURPERS,
		|	DISTRIB_TABLE.DESCRIPTION AS DOC_DESCR,
		|	(CASE WHEN DISTRIB_TABLE.MERRETAILCASHREPORTTYPE = 1 THEN 'ВозвратДистриб' ELSE 'ПродажаДистриб' END) AS DOC_TYPE
		|FROM
		|	dbo.MERRETAILCASHREPORTTABLE_50157 AS DISTRIB_TABLE
		|INNER JOIN
		|	dbo.INVENTLOCATION AS INVENTLOCATION ON DISTRIB_TABLE.INVENTLOCATIONID = INVENTLOCATION.INVENTLOCATIONID
		|LEFT JOIN
		|	dbo.CustTable AS ToCustomers
		|	ON DISTRIB_TABLE.CUSTACCOUNT = ToCustomers.AccountNum
		|LEFT JOIN 
		|	dbo.MERJURIDICALPERSON AS JURIDICALPERSON ON DISTRIB_TABLE.JURIDICALPERSON_SUPPLYER = JURIDICALPERSON.MERJURIDICALPERSONID
		|WHERE
		|	((@T6 = 1 AND DISTRIB_TABLE.MERRETAILCASHREPORTTYPE != 1) OR
		|	(@T7 = 1 AND DISTRIB_TABLE.MERRETAILCASHREPORTTYPE = 1)) AND
		|	DISTRIB_TABLE.SALESAMOUNTCUR != 0 AND
		|	(DISTRIB_TABLE.MERSALESDISTRIBUTIONSTATUS = 1 OR
		|	DISTRIB_TABLE.MERSALESDISTRIBUTIONSTATUS = 2 OR
		|	DISTRIB_TABLE.MERSALESDISTRIBUTIONSTATUS = 5)
		|	AND (DISTRIB_TABLE.TRANSDATE BETWEEN @BeginDate AND @EndDate)
		|ORDER BY
		|	DOC_DATE";
		CmdList.CommandTimeout = 0;		//120;
		CmdList.CommandType = adCmdText;
		CmdList.NamedParameters = True;
		prmT1 = CmdList.CreateParameter(, adBoolean, adParamInput, , ТипыДокументов.Свойство("Импорт"));
		CmdList.Parameters.Append(prmT1);
		prmT2 = CmdList.CreateParameter(, adBoolean, adParamInput, , ТипыДокументов.Свойство("Поступление"));
		CmdList.Parameters.Append(prmT2);
		prmT3 = CmdList.CreateParameter(, adBoolean, adParamInput, , ТипыДокументов.Свойство("Отгрузка"));
		CmdList.Parameters.Append(prmT3);
		prmT4 = CmdList.CreateParameter(, adBoolean, adParamInput, , ТипыДокументов.Свойство("ПродажаРозница"));
		CmdList.Parameters.Append(prmT4);
		prmT5 = CmdList.CreateParameter(, adBoolean, adParamInput, , ТипыДокументов.Свойство("ВозвратРозница"));
		CmdList.Parameters.Append(prmT5);
		prmT6 = CmdList.CreateParameter(, adBoolean, adParamInput, , ТипыДокументов.Свойство("ПродажаДистриб"));
		CmdList.Parameters.Append(prmT6);
		prmT7 = CmdList.CreateParameter(, adBoolean, adParamInput, , ТипыДокументов.Свойство("ВозвратДистриб"));
		CmdList.Parameters.Append(prmT7);
		prmBeginDate = CmdList.CreateParameter(, adDate, adParamInput, , НачалоПериода);
		CmdList.Parameters.Append(prmBeginDate);
		prmEndDate = CmdList.CreateParameter(, adDate, adParamInput, , КонецДня(КонецПериода));
		CmdList.Parameters.Append(prmEndDate);
	//Иначе
	//	CmdList.Parameters("BeginDate").Value = НачалоПериода;
	//	CmdList.Parameters("EndDate").Value = КонецДня(КонецПериода);
	//КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция CmdCashInit(ТипыДокументов)
	
	Запрос = Новый ПостроительЗапроса;
	Запрос.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЧеков);
	ПолеОтбора = Запрос.Отбор.Добавить("POSTED");
	ПолеОтбора.ВидСравнения = ВидСравнения.Равно;
	ПолеОтбора.Значение = Истина;
	ПолеОтбора.Использование = Истина;
	ПолеОтбора = Запрос.Отбор.Добавить("DOC_TYPE");
	ПолеОтбора.ВидСравнения = ВидСравнения.ВСписке;
	Список = Новый СписокЗначений;
	Для Каждого Элемент Из ТипыДокументов Цикл
		Список.Добавить(Элемент.Ключ);
	КонецЦикла;
	ПолеОтбора.Значение = Список;
	ПолеОтбора.Использование = Истина;
	ПолеОтбора = Запрос.Отбор.Добавить("DOC_DATE");
	ПолеОтбора.ВидСравнения = ВидСравнения.ИнтервалВключаяГраницы;
	ПолеОтбора.ЗначениеС = ЭтотОбъект.НачалоПериода;
	ПолеОтбора.ЗначениеПо = КонецДня(ЭтотОбъект.КонецПериода);
	ПолеОтбора.Использование = Истина;
	Запрос.Порядок.Добавить("DOC_DATE");
	Запрос.Порядок.Добавить("DOC_STOCKNAME");
	Запрос.ВыбранныеПоля.Очистить();
	Запрос.ВыбранныеПоля.Добавить("DOC_ID");
	Запрос.ВыбранныеПоля.Добавить("DOC_DATE");
	Запрос.ВыбранныеПоля.Добавить("DOC_CUR");
	Запрос.ВыбранныеПоля.Добавить("DOC_STOCKNAME");
	Запрос.ВыбранныеПоля.Добавить("DOC_ORGNAME");
	Запрос.ВыбранныеПоля.Добавить("DOC_TYPE");
	Запрос.ВыбранныеПоля.Добавить("TotalAmount");
	Запрос.Выполнить();
	ТабДок = Запрос.Результат.Выгрузить();
	ТабДок.Свернуть("DOC_ID, DOC_DATE, DOC_CUR, DOC_STOCKNAME, DOC_ORGNAME, DOC_TYPE", "TotalAmount");
	//ТабДок.Сортировать("DOC_DATE, DOC_STOCKNAME");
	ТабДок.Колонки.DOC_STOCKNAME.Имя = "DOC_GTD";
	ТабДок.Колонки.DOC_ORGNAME.Имя = "DOC_JURPERS";
	ТабДок.Колонки.TotalAmount.Имя = "DOC_SUM";
	
	Для Каждого СтрТаб Из ТабДок Цикл
		СтрокаТаб = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, СтрТаб);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция CmdCashInitOld(ТипыДокументов)
	//Если CmdList = Неопределено Тогда
	ADO_ConnectCash();
	CmdList=Новый COMОбъект("ADODB.Command");
	CmdList.ActiveConnection = ConnectionCash;
	CmdList.CommandText = "SELECT
	|	CASE WHEN DocType = 1 THEN DocNumber ELSE
	|	LEFT(DocNumber, 2) + LEFT(IdLocation, 3) + CONVERT(varchar(6), DocDate, 12) END AS DOC_ID,
	|	CASE WHEN DocType = 1 THEN DocDate ELSE
	|	DATEADD(DAY, DATEDIFF(day, 0, DocDate), 0) END AS DOC_DATE,
	|	DocType AS DOC_TYPE,
	|	IdLocation AS DOC_LOCID,
	|	TotalAmount AS AMOUNTCUR,
	|	ItemId AS ITEMID,
	|	Quantity AS QTY,
	|	ParentDocNumber AS DOC_PARENTID,
	|	ParentDocDate AS DOC_PARENTDATE
	|FROM dbo.Buyanov_Buh_Sales(?, ?)
	|WHERE
	|	((? = 1 AND (DocType = 0 OR DocType = 2 OR DocType = 8 OR DocType = 6 OR DocType = 9 OR DocType = 10 OR DocType = 14 OR DocType = 20)) OR
	|	(? = 1 AND (DocType = 1 OR DocType = 3 OR DocType = 7 OR DocType = 21))) AND
	|	(FiscalDocNumber != 0)";
	CmdList.CommandTimeout = 0;		//120;
	CmdList.CommandType = adCmdText;
	CmdList.NamedParameters = True;
	prmBeginDate = CmdList.CreateParameter(, adWChar, adParamInput, 32, Формат(НачалоПериода, "ДФ=yyyyMMdd"));
	CmdList.Parameters.Append(prmBeginDate);
	prmEndDate = CmdList.CreateParameter(, adWChar, adParamInput, 32, Формат(КонецПериода, "ДФ=yyyyMMdd"));
	CmdList.Parameters.Append(prmEndDate);
	prmT4 = CmdList.CreateParameter(, adBoolean, adParamInput, , ТипыДокументов.Свойство("ПродажаРозница"));
	CmdList.Parameters.Append(prmT4);
	prmT5 = CmdList.CreateParameter(, adBoolean, adParamInput, , ТипыДокументов.Свойство("ВозвратРозница"));
	CmdList.Parameters.Append(prmT5);
	rst = Новый COMОбъект("ADODB.RecordSet");
	rst = CmdList.Execute();
	
	
	RecordSet = Неопределено;
	CmdList=Новый COMОбъект("ADODB.Command");
	CmdList.ActiveConnection = Connection;
	CmdList.CommandText = "create table #CashSales_tt1 (DOC_ID nvarchar(11), DOC_DATE datetime, DOC_TYPE int, DOC_LOCID nvarchar(3), AMOUNTCUR float, ITEMID nvarchar(20),
	|QTY float, DOC_PARENTID nvarchar(11), DOC_PARENTDATE datetime);";
	CmdList.CommandTimeout = 0;		//120;
	CmdList.CommandType = adCmdText;
	CmdList.NamedParameters = True;
	CmdList.Execute();
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet.ActiveConnection = Connection;
	RecordSet.CursorLocation = adUseClient;
	RecordSet.CursorType = adOpenForwardOnly;
	RecordSet.LockType = adLockBatchOptimistic;
	
	RecordSet.Open("#CashSales_tt1", Connection, adOpenForwardOnly, adLockBatchOptimistic);
	
	RecordSet.ActiveConnection = Неопределено;
	
	Пока rst.EOF() = Ложь Цикл
	    RecordSet.AddNew();
		Для Каждого Field Из RecordSet.Fields Цикл
			RecordSet.Fields(Field.Name).Value = rst.Fields(Field.Name).Value;
		КонецЦикла;
		RecordSet.Update();
		rst.MoveNext();
	КонецЦикла;
	RecordSet.ActiveConnection = Connection;
	RecordSet.UpdateBatch();
	RecordSet.Close();
	RecordSet = Неопределено;
	
	CmdList=Новый COMОбъект("ADODB.Command");
	CmdList.ActiveConnection = Connection;
	CmdList.CommandText = "create index DOC_LOCID_ind
	|on #CashSales_tt1 (DOC_LOCID);
	|SELECT
	|	CASHREPORTS.DOC_ID,
	|	dateadd(Hour, 22, CASHREPORTS.DOC_DATE) AS DOC_DATE,
	|	'RUR' AS DOC_CUR,
	|	SUM(CASHREPORTS.AMOUNTCUR) AS DOC_SUM,
	|	INVENTLOCATION.NAME AS DOC_GTD,
	|	JURIDICALPERSON.MERJURIDICALPERSONNAME AS DOC_JURPERS,
	|	'' AS DOC_DESCR,
	|	(CASE
	|		WHEN CASHREPORTS.DOC_TYPE = 0 THEN 'ПродажаРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 1 THEN 'ВозвратРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 2 THEN 'РезервРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 3 THEN 'ВозвратРезерваРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 8 THEN 'ДопРезервРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 6 THEN 'ПредоплатаЗакРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 7 THEN 'ВозвратПредоплатыЗакРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 9 THEN 'Продажа2Розница'
	|		WHEN CASHREPORTS.DOC_TYPE = 10 THEN 'СлипРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 14 THEN 'ПогДолгаРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 20 THEN 'ПродРемонтаРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 21 THEN 'ВозвратПродРемонтаРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 30 THEN 'ОплДистрРозница'
	|		WHEN CASHREPORTS.DOC_TYPE = 31 THEN 'ВозвратОплДистрРозница'
	|	ELSE 'НеизвестныйРозница' END) AS DOC_TYPE
	|FROM
	|	#CashSales_tt1 AS CASHREPORTS
	|INNER JOIN
	|	dbo.INVENTLOCATION AS INVENTLOCATION ON CASHREPORTS.DOC_LOCID = INVENTLOCATION.INVENTLOCATIONID
	|LEFT JOIN
	|	dbo.INVENTLOCATION_JURIDICALT50219 AS JURIDICALHISTORY
	|	ON CASHREPORTS.DOC_LOCID = JURIDICALHISTORY.INVENTLOCATIONID AND
	|	(CASHREPORTS.DOC_DATE >= JURIDICALHISTORY.FROMDATE AND (CASHREPORTS.DOC_DATE <= JURIDICALHISTORY.TODATE OR JURIDICALHISTORY.TODATE = 0))
	|LEFT JOIN 
	|	dbo.MERJURIDICALPERSON AS JURIDICALPERSON ON ISNULL(JURIDICALHISTORY.MERJURIDICALPERSONID, INVENTLOCATION.MERJURIDICALPERSONID) = JURIDICALPERSON.MERJURIDICALPERSONID
	|GROUP BY
	|	CASHREPORTS.DOC_ID,
	|	CASHREPORTS.DOC_DATE,
	|	INVENTLOCATION.NAME,
	|	JURIDICALPERSON.MERJURIDICALPERSONNAME,
	|	CASHREPORTS.DOC_TYPE
	|";
	CmdList.CommandTimeout = 0;		//120;
	CmdList.CommandType = adCmdText;
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet = CmdList.Execute();
	Пока RecordSet.EOF() = Ложь Цикл
		СтрокаТаб = ТаблицаДокументов.Добавить();
		Для Каждого RstField Из RecordSet.Fields Цикл
			СтрокаТаб[RstField.Name] = RstField.Value;
		КонецЦикла;
		RecordSet.MoveNext();
	КонецЦикла;
	ADO_DisconnectCash();
	Возврат Истина;
	
КонецФункции

Функция CmdCashLoadOld(ТаблицаОРП, ТаблицаОплат)
	//Если CmdList = Неопределено Тогда
	ADO_ConnectCash();
	CmdCash=Новый COMОбъект("ADODB.Command");
	CmdCash.ActiveConnection = ConnectionCash;
	CmdCash.CommandText = "SELECT
	|	DocNumber,
	|	CASE WHEN DocType = 1 THEN DocNumber ELSE
	|	LEFT(DocNumber, 2) + LEFT(IdLocation, 3) + CONVERT(varchar(6), DocDate, 12) END AS DOC_ID,
	|	CASE WHEN DocType = 1 THEN DocDate ELSE
	|	DATEADD(DAY, DATEDIFF(day, 0, DocDate), 0) END AS DOC_DATE,
	|	DocType AS DOC_TYPE,
	|	IdLocation AS DOC_LOCID,
	|	Amount AS AMOUNTCUR,
	|	ItemId AS ITEMID,
	|	Quantity AS QTY,
	|	LEFT(ParentDocNumber, 2) + LEFT(IdLocation, 3) + CONVERT(varchar(6), ParentDocDate, 12) AS DOC_PARENTID,
	|	DATEADD(DAY, DATEDIFF(day, 0, ParentDocDate), 0) AS DOC_PARENTDATE
	|FROM dbo.Buyanov_Buh_Sales(?, ?)";
	CmdCash.CommandTimeout = 0;		//120;
	CmdCash.CommandType = adCmdText;
	CmdCash.NamedParameters = True;
	prmBeginDate = CmdCash.CreateParameter(, adWChar, adParamInput, 32, Формат(НачалоПериода, "ДФ=dd.MM.yyyy"));
	CmdCash.Parameters.Append(prmBeginDate);
	prmEndDate = CmdCash.CreateParameter(, adWChar, adParamInput, 32, Формат(КонецПериода, "ДФ=dd.MM.yyyy"));
	CmdCash.Parameters.Append(prmEndDate);
	rst = Новый COMОбъект("ADODB.RecordSet");
	rst = CmdCash.Execute();
	
	RecordSet = Неопределено;
	CmdList=Новый COMОбъект("ADODB.Command");
	CmdList.ActiveConnection = Connection;
	CmdList.CommandText = "create table #CashSales_tt1 (DocNumber nvarchar(10), DOC_ID nvarchar(11), DOC_DATE datetime, DOC_TYPE int, DOC_LOCID nvarchar(3), AMOUNTCUR float, ITEMID nvarchar(20),
	|QTY float, DOC_PARENTID nvarchar(11), DOC_PARENTDATE datetime);";
	CmdList.CommandTimeout = 0;		//120;
	CmdList.CommandType = adCmdText;
	CmdList.NamedParameters = True;
	CmdList.Execute();
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet.ActiveConnection = Connection;
	RecordSet.CursorLocation = adUseClient;
	RecordSet.CursorType = adOpenForwardOnly;
	RecordSet.LockType = adLockBatchOptimistic;
	
	RecordSet.Open("#CashSales_tt1", Connection, adOpenForwardOnly, adLockBatchOptimistic);
	
	RecordSet.ActiveConnection = Неопределено;
	
	Пока rst.EOF() = Ложь Цикл
	    RecordSet.AddNew();
		Для Каждого Field Из RecordSet.Fields Цикл
			RecordSet.Fields(Field.Name).Value = rst.Fields(Field.Name).Value;
		КонецЦикла;
		RecordSet.Update();
		rst.MoveNext();
	КонецЦикла;
	RecordSet.ActiveConnection = Connection;
	RecordSet.UpdateBatch();
	RecordSet.Close();
	RecordSet = Неопределено;
	
	CmdList=Новый COMОбъект("ADODB.Command");
	CmdList.ActiveConnection = Connection;
	CmdList.CommandText = "create index DOC_LOCID_ind on #CashSales_tt1 (DOC_LOCID);
	|create index ITEMID_ind on #CashSales_tt1 (ITEMID);
	|SELECT
	|	CashReports.DOC_ID,
	|	CashReports.DocNumber,
	|	dateadd(Hour, 22, CASHREPORTS.DOC_DATE) AS DOC_DATE,
	|	'RUR' AS DOC_CUR,
	|   CashReports.DOC_LOCID AS DOC_STOCKID,
	|   INVENTLOCATION.NAME AS DOC_STOCKNAME,
	|   CashReports.DOC_LOCID AS DOC_BRANCHID,
	|   INVENTLOCATION.NAME AS DOC_BRANCHNAME,
	|	ISNULL(JURIDICALHISTORY.MERJURIDICALPERSONID, INVENTLOCATION.MERJURIDICALPERSONID) AS DOC_ORGID,
	|	JURIDICALPERSON.FULLNAME AS DOC_ORGNAME,
	|	JURIDICALPERSON.INN AS DOC_ORGINN,
	|	JURIDICALPERSON.KPP AS DOC_ORGKPP,
	|	'' AS DOC_DESCR,
	|	(CASE WHEN CASHREPORTS.DOC_TYPE = 1 THEN 'ВозвратРозница' ELSE 'ПродажаРозница' END) AS DOC_TYPE,
	|   CashReports.DOC_PARENTID,
	|   dateadd(Hour, 22, CashReports.DOC_PARENTDATE) AS DOC_PARENTDATE,
	|	CASE WHEN INVENTTABLE.ITEMNAME = '' THEN inventItemRange.NAME ELSE INVENTTABLE.ITEMNAME END AS NAME,
	|	CASE WHEN INVENTTABLE.NAMEALIAS = '' THEN INVENTTABLE.OUTID_1C ELSE INVENTTABLE.NAMEALIAS END AS NAMEALIASNAME,
	|	CASE WHEN INVENTTABLE.NAMEALIASID = '' THEN INVENTTABLE.ITEMID ELSE INVENTTABLE.NAMEALIASID END AS NAMEALIASID,
	|	INVENTTABLE.ITEMRANGEROOT AS ITEMRANGEROOT,
	|	CashReports.QTY,
	|	CashReports.AMOUNTCUR,
	|	inventItemRange.NAME AS TMName,
	|	CASE WHEN INVENTGTDSETTLEMENT_MRC.GTD IS NULL OR INVENTGTDSETTLEMENT_MRC.GTD = '' THEN
	|		CASE WHEN MERINVENTTABLEFEATURE.MerInventGTDFull = '' THEN MERINVENTTABLEFEATURE.MerInventGTD + (CASE WHEN charindex('/', RIGHT(MERINVENTTABLEFEATURE.MerInventGTD, 4)) > 0 THEN '' ELSE '/1' END) ELSE MERINVENTTABLEFEATURE.MerInventGTDFull END
	|		ELSE INVENTGTDSETTLEMENT_MRC.GTD
	|	END AS INVENTGTD,
	|	CASE
	|		WHEN M.CountryId IS NOT NULL AND M.CountryId != '' THEN M.CountryId
	|		WHEN MGTD.CountryId IS NOT NULL AND MGTD.CountryId != '' THEN MGTD.CountryId
	|		WHEN inventItemGroup.CountryId IS NOT NULL AND inventItemGroup.CountryId != '' THEN inventItemGroup.CountryId
	|		ELSE inventItemRange.CountryId
	|	END AS COUNTRYOFORIGINID,
	|	CR.Name as Country, 
	|	CR.COUNTRYNUMID_MRC as COUNTRYNUMID_MRC
	|FROM
	|	#CashSales_tt1 AS CashReports
	|INNER JOIN
	|	dbo.INVENTLOCATION AS INVENTLOCATION ON CASHREPORTS.DOC_LOCID = INVENTLOCATION.INVENTLOCATIONID
	|INNER JOIN
	|	dbo.INVENTTABLE AS INVENTTABLE
	|	ON CASHREPORTS.ITEMID = INVENTTABLE.ITEMID
	|LEFT JOIN
	|	dbo.INVENTLOCATION_JURIDICALT50219 AS JURIDICALHISTORY
	|	ON CASHREPORTS.DOC_LOCID = JURIDICALHISTORY.INVENTLOCATIONID AND
	|	(CASHREPORTS.DOC_DATE >= JURIDICALHISTORY.FROMDATE AND (CASHREPORTS.DOC_DATE <= JURIDICALHISTORY.TODATE OR JURIDICALHISTORY.TODATE = 0))
	|LEFT JOIN 
	|	#OwnClientTable AS JURIDICALPERSON ON ISNULL(JURIDICALHISTORY.MERJURIDICALPERSONID, INVENTLOCATION.MERJURIDICALPERSONID) = JURIDICALPERSON.MERJURIDICALPERSONID
	|LEFT JOIN
	|	dbo.MERINVENTTABLEFEATURE AS MERINVENTTABLEFEATURE
	|	ON CASHREPORTS.ITEMID = MERINVENTTABLEFEATURE.ITEMID
	|LEFT JOIN
	|	dbo.INVENTGTDSETTLEMENT_MRC AS INVENTGTDSETTLEMENT_MRC
	|	ON CASHREPORTS.ITEMID = INVENTGTDSETTLEMENT_MRC.ITEMID
	|LEFT JOIN
	|	dbo.MEREXTERNALLOGISTICLINE AS M
	|	ON INVENTGTDSETTLEMENT_MRC.LINEITEMREFTABLEID = 0 AND INVENTGTDSETTLEMENT_MRC.LOGLINEREFRECID = M.RECID
	|LEFT JOIN
	|	(SELECT
	|		MT.MERINVENTGTD,
	|		ML.NAMEALIASID,
	|		MAX(ML.COUNTRYID) AS COUNTRYID
	|	FROM dbo.MEREXTERNALLOGISTICTABLE AS MT
	|	INNER JOIN
	|		dbo.MEREXTERNALLOGISTICLINE AS ML ON MT.MEREXTERNALLOGISTICID = ML.MEREXTERNALLOGISTICID
	|	GROUP BY
	|		MT.MERINVENTGTD,
	|		ML.NAMEALIASID
	|	UNION
	|	SELECT
	|		MT.INVENTGTD,
	|		MT.NAMEALIASID,
	|		MAX(MT.COUNTRYOFORIGINID) AS COUNTRYID
	|	FROM dbo.MEROPENORDERLINE AS MT
	|	GROUP BY
	|		MT.INVENTGTD,
	|		MT.NAMEALIASID) AS MGTD
	|	ON (SUBSTRING(INVENTGTDSETTLEMENT_MRC.GTD,1,23) = MGTD.MERINVENTGTD OR
	|	MERINVENTTABLEFEATURE.MerInventGTD = MGTD.MERINVENTGTD)
	|	AND INVENTTABLE.NAMEALIASID = MGTD.NAMEALIASID
	|LEFT JOIN
	|	dbo.inventItemRange AS inventItemGroup
	|	ON INVENTTABLE.ITEMRANGEID = inventItemGroup.RANGEID
	|LEFT JOIN
	|	dbo.inventItemRange AS inventItemRange
	|	ON INVENTTABLE.ITEMRANGEROOT = inventItemRange.RANGEID
	|LEFT OUTER JOIN
	|	dbo.ADDRESSCOUNTRYREGION AS CR
	|	ON (CASE
	|		WHEN M.CountryId IS NOT NULL AND M.CountryId != '' THEN M.CountryId
	|		WHEN MGTD.CountryId IS NOT NULL AND MGTD.CountryId != '' THEN MGTD.CountryId
	|		WHEN inventItemGroup.CountryId IS NOT NULL AND inventItemGroup.CountryId != '' THEN inventItemGroup.CountryId
	|		ELSE inventItemRange.CountryId
	|	END) = CR.COUNTRYREGIONID
	|";
	//|LEFT JOIN
	//|	dbo.MERNAMEALIASTABLE AS MERNAMEALIASTABLE
	//|	ON INVENTTABLE.NAMEALIASID = MERNAMEALIASTABLE.NAMEALIASID
	
	CmdList.CommandTimeout = 0;		//120;
	CmdList.CommandType = adCmdText;
	
	ТаблицаОРП = Новый ТаблицаЗначений;
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet = CmdList.Execute();
	Для Каждого RstField Из RecordSet.Fields Цикл
		ТаблицаОРП.Колонки.Добавить(RstField.Name);
	КонецЦикла;
	Пока RecordSet.EOF() = Ложь Цикл
		СтрокаТаб = ТаблицаОРП.Добавить();
		Для Каждого RstField Из RecordSet.Fields Цикл
			СтрокаТаб[RstField.Name] = RstField.Value;
		КонецЦикла;
		RecordSet.MoveNext();
	КонецЦикла;
	ТаблицаОРП.Индексы.Добавить("DOC_ID");
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	CmdCash.CommandText = "SELECT
	|	DocNumber,
	|	PaymentType,
	|	Amount
	|FROM dbo.Buyanov_Buh_SalePayments(?, ?)";
	rst = Новый COMОбъект("ADODB.RecordSet");
	rst = CmdCash.Execute();
	Для Каждого RstField Из rst.Fields Цикл
		ТаблицаОплат.Колонки.Добавить(RstField.Name);
	КонецЦикла;
	Пока rst.EOF() = Ложь Цикл
		СтрокаТаб = ТаблицаОплат.Добавить();
		Для Каждого RstField Из rst.Fields Цикл
			СтрокаТаб[RstField.Name] = RstField.Value;
		КонецЦикла;
		rst.MoveNext();
	КонецЦикла;
	ТаблицаОплат.Индексы.Добавить("DocNumber");
	
	ADO_DisconnectCash();
	Возврат Истина;
	
КонецФункции

Функция ЗаполнитьОстатки() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	&Период КАК Период,
	|	СправочникНоменклатуры.Родитель КАК ГруппаСсылка,
	|	СправочникНоменклатуры.Код КАК КодТовара,
	|	СправочникНоменклатуры.Код КАК КодАртикула,
	|	СправочникНоменклатуры.Артикул КАК АртикулТовара,
	|	СправочникНоменклатуры.Наименование КАК НаименованиеТовара,
	|	СправочникНоменклатуры.Родитель.Наименование КАК Группа,
	|	СправочникНоменклатуры.Родитель.Код КАК КодГруппы,
	|	ТабОстатков.Номенклатура,
	|	(ТабОстатков.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|	(ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		-СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.Дата < &НачалоПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.Номенклатура
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		-СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.ПометкаУдаления = Ложь
	|		//И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|		И НЕ Док.Номер ПОДОБНО ""МК0%""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.Номенклатура
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		//И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|		И НЕ Док.Номер ПОДОБНО ""МС0%""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.Номенклатура
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		//И Док.Организация = &Организация
	|		И Док.Дата < &НачалоПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.Номенклатура
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.ОприходованиеТоваров КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.Номенклатура) КАК ТовДок
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.Номенклатура
	|	ИМЕЮЩИЕ
	|		СУММА(ТовДок.Количество) > 0
	|	) КАК ТабОстатков
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|	ПО ТабОстатков.Номенклатура = СправочникНоменклатуры.Ссылка");
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ЭтотОбъект.КонецПериода) + 1);
	Запрос.УстановитьПараметр("Период", КонецДня(ЭтотОбъект.КонецПериода));
	Запрос.УстановитьПараметр("НачалоПериода", ЭтотОбъект.НачалоПериода);
	//Запрос.УстановитьПараметр("Организация", ЭтотОбъект.ОрганизацияПоУмолчанию);
	
	//СтранаПоУмолчанию = Справочники.СтраныМира.Россия;
	//Запрос = Новый Запрос("ВЫБРАТЬ
	//|    СправочникНоменклатуры.Ссылка КАК Номенклатура,
	//|    СправочникНоменклатуры.Родитель КАК ГруппаСсылка,
	//|    СправочникНоменклатуры.Код КАК КодТовара,
	//|    СправочникНоменклатуры.Код КАК КодАртикула,
	//|    СправочникНоменклатуры.Артикул КАК АртикулТовара,
	//|    СправочникНоменклатуры.Наименование КАК НаименованиеТовара,
	//|    СправочникНоменклатуры.Родитель.Наименование КАК Группа,
	//|    СправочникНоменклатуры.Родитель.Код КАК КодГруппы,
	//|    Остатки.Количество,
	//|    Остатки.Сумма,
	//|    Остатки.Счет.Код КАК СчетУчета
	//|ИЗ
	//|	(ВЫБРАТЬ
	//|		МАКСИМУМ(ХозрасчетныйОстатки_КонОст.Счет) КАК Счет,
	//|		ХозрасчетныйОстатки_КонОст.Субконто1 КАК Номенклатура,
	//|		СУММА(ХозрасчетныйОстатки_КонОст.КоличествоОстаток) КАК Количество,
	//|		СУММА(ХозрасчетныйОстатки_КонОст.СуммаОстаток) КАК Сумма
	//|	ИЗ
	//|		РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет В (&СчетаУчета), &ВидыСубконто, Субконто1 В (ВЫБРАТЬ Ссылка ИЗ Справочник.Номенклатура КАК СпрНом ГДЕ НЕ Код ПОДОБНО ""ITEM%"")) КАК ХозрасчетныйОстатки_КонОст
	//|	СГРУППИРОВАТЬ ПО
	//|	//	ХозрасчетныйОстатки_КонОст.Счет,
	//|		ХозрасчетныйОстатки_КонОст.Субконто1
	//|	) КАК Остатки
	//|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	//|	Справочник.Номенклатура КАК СправочникНоменклатуры
	//|	ПО Остатки.Номенклатура = СправочникНоменклатуры.Ссылка
	//|//ГДЕ
	//|//	НЕ СправочникНоменклатуры.Код ПОДОБНО ""ITEM%""
	//|УПОРЯДОЧИТЬ ПО
	//|	СправочникНоменклатуры.Код");
	////Запрос.УстановитьПараметр("Код", "MR03748280%");
	//Запрос.УстановитьПараметр("КонецПериода", КонецДня(КонецПериода)+1);
	//СчетаУчета = Новый Массив;
	//СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах); // 41.01
	//СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НайтиПоКоду("41.01.1")); // 41.01
	//СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); // 004.01
	//Запрос.УстановитьПараметр("СчетаУчета", СчетаУчета);
	//Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ТаблицаОстатков.Загрузить(Запрос.Выполнить().Выгрузить());
	Для Каждого СтрокаТЧ Из ТаблицаОстатков Цикл
		СтрокаТЧ.КодАртикула = СокрЛП(СтрокаТЧ.КодАртикула);
	КонецЦикла;
	//Если КодТовараВMerExternalItemId Тогда
	//	ADO_Connect();
	//	ТабДанных = СформироватьТаблицуАртикулов(Connection, ВыборкаТоваров);
	//	ВыборкаТоваров.Сбросить();
	//	ТаблицаОстатков.Очистить();
	//	СтруктураПоиска = Новый Структура("MEREXTERNALITEMIDSPECIFICATION");
	//	Пока ВыборкаТоваров.Следующий() Цикл
	//		СтрокаТЧ = ТаблицаОстатков.Добавить();
	//		ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаТоваров);
	//		СтрокаТЧ.Период = КонецДня(КонецПериода);
	//		СтрокаТЧ.MerExternalItemId = СокрЛП(ВыборкаТоваров.КодАртикула);
	//		НайденныеСтроки = ТабДанных.НайтиСтроки(Новый Структура("MEREXTERNALITEMIDSPECIFICATION", СтрокаТЧ.MerExternalItemId));
	//		Если НайденныеСтроки.Количество() > 0 Тогда
	//			СтрокаRst = НайденныеСтроки[0];
	//			СтрокаТЧ.АртикулТовара = СтрокаRst.NameAliasLogist;
	//			Если ТипВыгрузкиТовара = 0 Тогда
	//				Если ЗначениеЗаполнено(СокрЛП(СтрокаRst.NAMEALIASID)) Тогда
	//					СтрокаТЧ.КодАртикула = СокрЛП(СтрокаRst.NAMEALIASID);
	//					СтрокаТЧ.Номенклатура = Неопределено;
	//				КонецЕсли;
	//			ИначеЕсли ТипВыгрузкиТовара = 1 Тогда
	//				СтрокаТЧ.КодАртикула = СокрЛП(СтрокаRst.MEREXTERNALITEMID);
	//				СтрокаТЧ.Номенклатура = Неопределено;
	//			ИначеЕсли ТипВыгрузкиТовара = 2 Тогда
	//				Если ЗначениеЗаполнено(СокрЛП(СтрокаRst.ItemId)) Тогда
	//					СтрокаТЧ.КодАртикула = "ITEM" + СокрЛП(СтрокаRst.ItemId);
	//					СтрокаТЧ.ItemId = СокрЛП(СтрокаRst.ItemId);
	//					СтрокаТЧ.КодТовара1С = СокрЛП(СтрокаRst.OutId_1c);
	//					СтрокаТЧ.Номенклатура = Неопределено;
	//				КонецЕсли;
	//			КонецЕсли;
	//			Страна = Неопределено;
	//			Если ЗначениеЗаполнено(СтрокаRst.COUNTRYNUMID_MRC) Тогда
	//				Страна = Справочники.СтраныМира.НайтиПоКоду(СтрокаRst.COUNTRYNUMID_MRC);
	//			ИначеЕсли ЗначениеЗаполнено(СтрокаRst.CountryId) Тогда
	//				Страна = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа3", СтрокаRst.CountryId);
	//				Если Страна = Неопределено Тогда
	//					СтрокиСтран = Классификатор.НайтиСтроки(Новый Структура("КодАльфа3", СтрокаRst.CountryId));
	//					Если СтрокиСтран.Количество() > 0 Тогда
	//						СтранаОбъект = Справочники.СтраныМира.СоздатьЭлемент();
	//						ЗаполнитьЗначенияСвойств(СтранаОбъект, СтрокиСтран[0]);
	//						СтранаОбъект.Записать();
	//						Страна = СтранаОбъект.Ссылка;
	//					КонецЕсли;
	//				КонецЕсли;
	//			Иначе
	//				Страна = Справочники.СтраныМира.Россия;
	//			КонецЕсли;
	//			СтрокаТЧ.Страна = Страна;
	//			Если ЗначениеЗаполнено(СтрокаRst.GTD) Тогда
	//				СтрокаТЧ.НомерГТД = СтрокаRst.GTD;
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(СтрокаRst.Name) Тогда
	//				СтрокаТЧ.НаименованиеТовара = СтрокаRst.Name;
	//			КонецЕсли;
	//			Если ЗначениеЗаполнено(СтрокаRst.TMId) Тогда
	//				СтрокаТЧ.КодГруппы = СокрЛП(СтрокаRst.TMId);
	//				СтрокаТЧ.Группа = СтрокаRst.TMName;
	//				СтрокаТЧ.ГруппаСсылка = Неопределено;
	//			КонецЕсли;
	//			СтрокаТЧ.Группа = СтрокаRst.TMName;
	//			СтрокаТЧ.КодГруппы = СокрЛП(СтрокаТЧ.КодГруппы);
	//			СтрокаТЧ.ГруппаСсылка = Неопределено;
	//		Иначе
	//			СтрокаТЧ.КодАртикула = СокрЛП(СтрокаТЧ.КодАртикула);
	//			СтрокаТЧ.КодГруппы = СокрЛП(СтрокаТЧ.КодГруппы);
	//		КонецЕсли;
	//	КонецЦикла;
	//Иначе
		//Запрос.Текст = "ВЫБРАТЬ
		//|	Остатки.Субконто1 КАК Номенклатура,
		//|	Остатки.Субконто2 КАК НомерГТД,
		//|	Остатки.Субконто3 КАК СтранаПроисхождения,
		//|	(Остатки.КоличествоОстаток) КАК Количество
		//|ИЗ
		//|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецПериода, Счет = &СчетаУчета, &ВидыСубконто, ) КАК Остатки";
		//Запрос.УстановитьПараметр("СчетаУчета", ПланыСчетов.Хозрасчетный.ГТД);
		//МассивСубконто = Новый Массив;
		//МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		//МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НомераГТД);
		//МассивСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтраныПроисхождения);
		//Запрос.УстановитьПараметр("ВидыСубконто", МассивСубконто);
		//ТабДанных = Запрос.Выполнить().Выгрузить();
		//ТабДанных.Индексы.Добавить("Номенклатура");
	//	ТаблицаОстатков.Очистить();
	//	СтруктураПоиска = Новый Структура("Номенклатура");
	//	Пока ВыборкаТоваров.Следующий() Цикл
	//		//СтруктураПоиска.Номенклатура = ВыборкаТоваров.Номенклатура;
	//		//СтрокиГТД = ТабДанных.НайтиСтроки(СтруктураПоиска);
	//		ОстатокКоличества = ВыборкаТоваров.Количество;
	//		ОстатокСуммы = ВыборкаТоваров.Сумма;
	//		//Для Каждого СтрокаГТД Из СтрокиГТД Цикл
	//		//	Если ОстатокКоличества = 0 Тогда
	//		//		Прервать;
	//		//	КонецЕсли;
	//		//	Если СтрокаГТД.Количество = 0 Тогда
	//		//		Продолжить;
	//		//	КонецЕсли;
	//		//	КоличествоСписать = Мин(ОстатокКоличества, СтрокаГТД.Количество);
	//		//	НомерГТД = СокрЛП(Строка(СтрокаГТД.НомерГТД));
	//		//	СтранаПроисхождения = СтрокаГТД.СтранаПроисхождения;
	//		//	СтрокаГТД.Количество = СтрокаГТД.Количество - КоличествоСписать;
	//		//	СтрокаТЧ = ТаблицаОстатков.Добавить();
	//		//	ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаТоваров);
	//		//	СтрокаТЧ.КодАртикула = СокрЛП(СтрокаТЧ.КодАртикула);
	//		//	СтрокаТЧ.Период = КонецДня(КонецПериода);
	//		//	СтрокаТЧ.Количество = КоличествоСписать;
	//		//	ОстатокКоличества = ОстатокКоличества - КоличествоСписать;
	//		//	СтрокаТЧ.Сумма = Окр(КоличествоСписать * (ВыборкаТоваров.Сумма / ВыборкаТоваров.Количество), 2);
	//		//	ОстатокСуммы = ОстатокСуммы - СтрокаТЧ.Сумма;
	//		//	СтрокаТЧ.НомерГТД = НомерГТД;
	//		//	СтрокаТЧ.Страна = СтранаПроисхождения;
	//		//КонецЦикла;
	//		//Если ОстатокКоличества > 0 Тогда
	//			СтрокаТЧ = ТаблицаОстатков.Добавить();
	//			ЗаполнитьЗначенияСвойств(СтрокаТЧ, ВыборкаТоваров);
	//			СтрокаТЧ.КодАртикула = СокрЛП(СтрокаТЧ.КодАртикула);
	//			СтрокаТЧ.Период = КонецДня(КонецПериода);
	//			СтрокаТЧ.Количество = ОстатокКоличества;
	//			//СтрокаТЧ.Сумма = ОстатокСуммы;
	//			//СтрокаТЧ.Страна = СтранаПоУмолчанию;
	//		//КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ЗаполнитьОтрицательныеОстаткиВсего() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ТабОстатков.Дата КАК Период,
	|	//&Период КАК Период,
	|	СправочникНоменклатуры.Родитель КАК ГруппаСсылка,
	|	СправочникНоменклатуры.Код КАК КодТовара,
	|	СправочникНоменклатуры.Код КАК КодАртикула,
	|	СправочникНоменклатуры.Артикул КАК АртикулТовара,
	|	СправочникНоменклатуры.Наименование КАК НаименованиеТовара,
	|	СправочникНоменклатуры.Родитель.Наименование КАК Группа,
	|	СправочникНоменклатуры.Родитель.Код КАК КодГруппы,
	|	ТабОстатков.Номенклатура,
	|	ТабОстатков.СчетУчета,
	|	(ТабОстатков.Количество) КАК Количество,
	|	(ТабОстатков.Сумма) КАК Сумма,
	|	ТабОстатков.НомерГТД КАК НомерГТД,
	|	(ТабОстатков.СтранаПроисхождения) КАК Страна
	|ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(ТовДок.Дата) КАК Дата,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		СУММА(ТовДок.КоличествоОтгружено) - СУММА(ТовДок.КоличествоПолучено) КАК Количество,
	|		ВЫБОР КОГДА СУММА(ТовДок.СуммаОтгружено) = 0 ТОГДА
	|			ВЫБОР КОГДА СУММА(ТовДок.КоличествоПолучено) = 0 ТОГДА СУММА(ТовДок.КоличествоОтгружено) * СУММА(ТовДок.СуммаПолучено)
	|			ИНАЧЕ СУММА(ТовДок.КоличествоОтгружено) * СУММА(ТовДок.СуммаПолучено) / СУММА(ТовДок.КоличествоПолучено) КОНЕЦ
	|		ИНАЧЕ СУММА(ТовДок.СуммаОтгружено) КОНЕЦ КАК Сумма,
	|		МАКСИМУМ(ТовДок.НомерГТД) КАК НомерГТД,
	|		МАКСИМУМ(ТовДок.СтранаПроисхождения) КАК СтранаПроисхождения
	|	ИЗ
	|	(ВЫБРАТЬ
	|		МИНИМУМ(Док.Дата) КАК Дата,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		0 КАК КоличествоПолучено,
	|		0 КАК СуммаПолучено,
	|		СУММА(ТовДок.Количество) КАК КоличествоОтгружено,
	|		СУММА(ТовДок.Сумма) КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		МИНИМУМ(Док.Дата) КАК Дата,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		0 КАК КоличествоПолучено,
	|		0 КАК СуммаПолучено,
	|		СУММА(ТовДок.Количество) КАК КоличествоОтгружено,
	|		СУММА(ТовДок.Сумма) КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		МИНИМУМ(Док.Дата) КАК Дата,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		СУММА(ТовДок.Количество) КАК КоличествоПолучено,
	|		СУММА(Док.КурсВзаиморасчетов * ТовДок.Сумма) КАК СуммаПолучено,
	|		0 КАК КоличествоОтгружено,
	|		0 КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		МИНИМУМ(Док.Дата) КАК Дата,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		СУММА(ТовДок.Количество) КАК КоличествоПолучено,
	|		СУММА(ТовДок.Сумма) КАК СуммаПолучено,
	|		0 КАК КоличествоОтгружено,
	|		0 КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.ОприходованиеТоваров КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		МИНИМУМ(Док.Дата) КАК Дата,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		СУММА(ТовДок.Количество) КАК КоличествоПолучено,
	|		СУММА(Док.КурсВзаиморасчетов * ТовДок.Сумма) КАК СуммаПолучено,
	|		0 КАК КоличествоОтгружено,
	|		0 КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения) КАК ТовДок
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура
	|		//ТовДок.НомерГТД
	|		//ТовДок.СтранаПроисхождения
	|	ИМЕЮЩИЕ
	|		СУММА(ТовДок.КоличествоОтгружено) - СУММА(ТовДок.КоличествоПолучено) > 0
	|	) КАК ТабОстатков
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|	ПО ТабОстатков.Номенклатура = СправочникНоменклатуры.Ссылка");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ЭтотОбъект.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ЭтотОбъект.КонецПериода) + 1);
	Запрос.УстановитьПараметр("Период", ЭтотОбъект.НачалоПериода);
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.ОрганизацияПоУмолчанию);
	ЭтотОбъект.ТаблицаОстатков.Загрузить(Запрос.Выполнить().Выгрузить());
	Возврат Истина;
КонецФункции

Функция ЗаполнитьОтрицательныеОстаткиПоДням() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	&Период КАК Период,
	|	ТабОстатков.Номенклатура,
	|	ТабОстатков.СчетУчета,
	|	(ТабОстатков.Количество) КАК Количество,
	|	(ТабОстатков.Сумма) КАК Сумма,
	|	ТабОстатков.НомерГТД КАК НомерГТД,
	|	ТабОстатков.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТабПриходов#Номер#
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		СУММА(ТовДок.КоличествоОтгружено) - СУММА(ТовДок.КоличествоПолучено) КАК Количество,
	|		ВЫБОР КОГДА СУММА(ТовДок.СуммаОтгружено) = 0 ТОГДА
	|			ВЫБОР КОГДА СУММА(ТовДок.КоличествоПолучено) = 0 ТОГДА СУММА(ТовДок.КоличествоОтгружено) * СУММА(ТовДок.СуммаПолучено)
	|			ИНАЧЕ СУММА(ТовДок.КоличествоОтгружено) * СУММА(ТовДок.СуммаПолучено) / СУММА(ТовДок.КоличествоПолучено) КОНЕЦ
	|		ИНАЧЕ СУММА(ТовДок.СуммаОтгружено) КОНЕЦ КАК Сумма,
	|		МАКСИМУМ(ТовДок.НомерГТД) КАК НомерГТД,
	|		МАКСИМУМ(ТовДок.СтранаПроисхождения) КАК СтранаПроисхождения
	|	ИЗ
	|	(#ЗапросДобавленныхОстатков#ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		0 КАК КоличествоПолучено,
	|		0 КАК СуммаПолучено,
	|		СУММА(ТовДок.Количество) КАК КоличествоОтгружено,
	|		СУММА(ТовДок.Сумма) КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НАЧАЛОПЕРИОДА(Док.Дата),
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		0 КАК КоличествоПолучено,
	|		0 КАК СуммаПолучено,
	|		СУММА(ТовДок.Количество) КАК КоличествоОтгружено,
	|		СУММА(ТовДок.Сумма) КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИсключаемыеДокументы КАК ИсключаемыеДокументы
	|		ПО Док.Ссылка = ИсключаемыеДокументы.Регистратор
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|		И ИсключаемыеДокументы.Регистратор ЕСТЬ NULL
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		СУММА(ТовДок.Количество) КАК КоличествоПолучено,
	|		СУММА(Док.КурсВзаиморасчетов * ТовДок.Сумма) КАК СуммаПолучено,
	|		0 КАК КоличествоОтгружено,
	|		0 КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИсключаемыеДокументы КАК ИсключаемыеДокументы
	|		ПО Док.Ссылка = ИсключаемыеДокументы.Регистратор
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.Организация = &Организация
	|		//И (Док.Контрагент <> &Контрагент
	|		И Док.Дата < &КонецПериода
	|		И ИсключаемыеДокументы.Регистратор ЕСТЬ NULL
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		СУММА(ТовДок.Количество) КАК КоличествоПолучено,
	|		СУММА(ТовДок.Сумма) КАК СуммаПолучено,
	|		0 КАК КоличествоОтгружено,
	|		0 КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.ОприходованиеТоваров КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		СУММА(ТовДок.Количество) КАК КоличествоПолучено,
	|		СУММА(Док.КурсВзаиморасчетов * ТовДок.Сумма) КАК СуммаПолучено,
	|		0 КАК КоличествоОтгружено,
	|		0 КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Организация = &Организация
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения) КАК ТовДок
	|	СГРУППИРОВАТЬ ПО
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура
	|		//ТовДок.НомерГТД,
	|		//ТовДок.СтранаПроисхождения
	|	ИМЕЮЩИЕ
	|		СУММА(ТовДок.КоличествоОтгружено) > СУММА(ТовДок.КоличествоПолучено)
	|	) КАК ТабОстатков";
	
	ЗапросДобавленныхОстатков = "ВЫБРАТЬ
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		ТовДок.Количество КАК КоличествоПолучено,
	|		ТовДок.Сумма КАК СуммаПолучено,
	|		0 КАК КоличествоОтгружено,
	|		0 КАК СуммаОтгружено,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		ТабПриходов#Номер# КАК ТовДок
	|	ОБЪЕДИНИТЬ ВСЕ
	|	";
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ЭтотОбъект.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ЭтотОбъект.КонецПериода));
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.ОрганизацияПоУмолчанию);
	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.КонтрагентПоУмолчанию);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	Док.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ
	|	ИсключаемыеДокументы
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК Док
	|ГДЕ
	|	(Док.Номер ПОДОБНО ""МС0%""
	|	ИЛИ Док.Номер ПОДОБНО ""МК0%"")
	|	И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Док.Проведен = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Док.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК Док
	|ГДЕ
	|	Док.Номер ПОДОБНО ""МК0%""
	|	И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Док.Проведен = Истина
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	Запрос.Выполнить();
	
	//Цикл по дням
	ТекущийДень = КонецДня(ЭтотОбъект.НачалоПериода);
	НомерЗапроса = 0;
	Пока ТекущийДень <= КонецДня(ЭтотОбъект.КонецПериода) Цикл
		НомерЗапроса = НомерЗапроса + 1;
		ТекстДоб = "";
		Если НомерЗапроса > 1 Тогда
			Для i = 2 По НомерЗапроса Цикл
				ТекстДоб = ТекстДоб + СтрЗаменить(ЗапросДобавленныхОстатков, "#Номер#", Формат(i - 1, "ЧН=0; ЧГ=0"));
			КонецЦикла;
		КонецЕсли;
		Текст = СтрЗаменить(ТекстЗапроса, "#Номер#", Формат(НомерЗапроса, "ЧН=0; ЧГ=0"));
		Запрос.Текст = СтрЗаменить(Текст, "#ЗапросДобавленныхОстатков#", ТекстДоб);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ТекущийДень));
		Запрос.УстановитьПараметр("КонецПериода", КонецДня(ТекущийДень) + 1);
		Запрос.УстановитьПараметр("Период", НачалоДня(ТекущийДень) + 6 * 60 * 60);
		Запрос.Выполнить();
		ТекущийДень = ТекущийДень + 24*60*60;
	КонецЦикла;
	Текст = "ВЫБРАТЬ
	|	ТовДок.Период КАК Период,
	|	ТовДок.Номенклатура КАК Номенклатура,
	|	ТовДок.СчетУчета КАК СчетУчета,
	|	ТовДок.Количество КАК Количество,
	|	ТовДок.Сумма КАК Сумма,
	|	ТовДок.НомерГТД КАК НомерГТД,
	|	ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|ПОМЕСТИТЬ ТабПриходов
	|ИЗ
	|	(#ЗапросДобавленныхОстатков#) КАК ТовДок
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура, Период;
	|ВЫБРАТЬ
	|	ТабПриходов.Период КАК Период,
	|	СправочникНоменклатуры.Код КАК КодАртикула,
	|	СправочникНоменклатуры.Артикул КАК АртикулТовара,
	|	СправочникНоменклатуры.Наименование КАК НаименованиеТовара,
	|	СправочникНоменклатуры.НаименованиеПолное КАК НаименованиеПолноеТовара,
	|	СправочникНоменклатуры.Родитель КАК ГруппаСсылка,
	|	СправочникНоменклатуры.Родитель.Наименование КАК Группа,
	|	СправочникНоменклатуры.Родитель.Код КАК КодГруппы,
	|	ТабПриходов.Номенклатура,
	|	ТабПриходов.СчетУчета,
	|	(ТабПриходов.Количество) КАК Количество,
	|	(ТабПриходов.Сумма) КАК Сумма,
	|	ТабПриходов.НомерГТД КАК НомерГТД,
	|	ТабПриходов.СтранаПроисхождения КАК Страна
	|ИЗ
	|	ТабПриходов КАК ТабПриходов
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|	ПО ТабПриходов.Номенклатура = СправочникНоменклатуры.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	ТабПриходов.Период";
	ЗапросДобавленныхОстатков = "ВЫБРАТЬ
	|		ТовДок.Период КАК Период,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		ТовДок.Количество КАК Количество,
	|		ТовДок.Сумма КАК Сумма,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		ТабПриходов#Номер# КАК ТовДок";
	ТекстОбъединить = "
	|	ОБЪЕДИНИТЬ ВСЕ
	|	";
	ТекстДоб = "";
	Для i = 1 По НомерЗапроса Цикл
		ТекстДоб = ТекстДоб + СтрЗаменить(ЗапросДобавленныхОстатков, "#Номер#", Формат(i, "ЧН=0; ЧГ=0"));
		Если i < НомерЗапроса Тогда
			ТекстДоб = ТекстДоб + ТекстОбъединить;
		КонецЕсли;
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Текст, "#ЗапросДобавленныхОстатков#", ТекстДоб);
	ТаблицаОстатков.Загрузить(Запрос.Выполнить().Выгрузить());
	Возврат Истина;
КонецФункции

Функция ЗаполнитьПоступлениями() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТабПриходов.Период КАК Период,
	|	СправочникНоменклатуры.Родитель КАК ГруппаСсылка,
	|	СправочникНоменклатуры.Код КАК КодТовара,
	|	СправочникНоменклатуры.Артикул КАК КодТовара1С,
	|	СправочникНоменклатуры.Артикул КАК АртикулТовара,
	|	СправочникНоменклатуры.Наименование КАК НаименованиеТовара,
	|	СправочникНоменклатуры.НаименованиеПолное КАК НаименованиеПолноеТовара,
	|	СправочникНоменклатуры.Родитель.Наименование КАК Группа,
	|	СправочникНоменклатуры.Родитель.Код КАК КодГруппы,
	|	ТабПриходов.Номенклатура,
	|	ТабПриходов.СчетУчета,
	|	(ТабПриходов.Количество) КАК Количество,
	|	(ТабПриходов.Сумма) КАК Сумма,
	|	ТабПриходов.НомерГТД КАК ГТД,
	|	ТабПриходов.СтранаПроисхождения КАК Страна
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Дата КАК Период,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		СУММА(ТовДок.Количество) КАК Количество,
	|		СУММА(Док.КурсВзаиморасчетов * ТовДок.Сумма) КАК Сумма,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.Организация = &Организация
	|		И Док.Контрагент = &Контрагент
	|		И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.Дата,
	|		ТовДок.СчетУчета,
	|		ТовДок.Номенклатура,
	|		ТовДок.НомерГТД,
	|		ТовДок.СтранаПроисхождения
	|	) КАК ТабПриходов
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|	ПО ТабПриходов.Номенклатура = СправочникНоменклатуры.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	ТабПриходов.Период";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ЭтотОбъект.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ЭтотОбъект.КонецПериода));
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.ОрганизацияПоУмолчанию);
	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.КонтрагентПоУмолчанию);
	ТаблицаОстатков.Загрузить(Запрос.Выполнить().Выгрузить());
	Возврат Истина;
КонецФункции

Функция ЗаполнитьПоступленияИзДокументов() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	ТабПриходов.Контрагент,
	|	ТабПриходов.Контрагент.Наименование КАК КонтрагентНаименование,
	|	ТабПриходов.Контрагент.ИНН + ""/"" + ТабПриходов.Контрагент.КПП КАК КонтрагентИННКПП,
	|	ТабПриходов.Номенклатура,
	|	СправочникНоменклатуры.Артикул КАК КодТовара1С,
	|	СправочникНоменклатуры.Код КАК КодАртикула,
	|	СправочникНоменклатуры.Наименование КАК НаименованиеТовара,
	|	СправочникНоменклатуры.НаименованиеПолное КАК НаименованиеПолноеТовара,
	|	СправочникНоменклатуры.Артикул КАК АртикулТовара,
	|	(ТабПриходов.Количество) КАК Количество,
	|	(ТабПриходов.Цена) КАК Цена,
	|	(ТабПриходов.Сумма) КАК Сумма,
	|	(ТабПриходов.СтавкаНДС) КАК СтавкаНДС,
	|	(ТабПриходов.СуммаНДС) КАК СуммаНДС,
	|	ПРЕДСТАВЛЕНИЕ(ТабПриходов.НомерГТД) КАК НомерГТД,
	|	ТабПриходов.СтранаПроисхождения.Наименование КАК СтранаПроисхождения,
	|	ТабПриходов.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	ТабПриходов.СтранаПроисхождения.КодАльфа2 КАК СтранаПроисхожденияКодАльфа2,
	|	ТабПриходов.СтранаПроисхождения.КодАльфа3 КАК СтранаПроисхожденияКодАльфа3,
	|	ТабПриходов.ДатаДокумента,
	|	ТабПриходов.Организация,
	|	СправочникНоменклатуры.Родитель КАК ГруппаСсылка,
	|	СправочникНоменклатуры.Родитель.Код КАК КодГруппы,
	|	СправочникНоменклатуры.Родитель.Наименование КАК Группа,
	|	""ПостВнешнее"" КАК ТипДокумента,
	|	Ложь КАК Комиссия,
	|	ТабПриходов.СчетУчета,
	|	Истина КАК НеВыгружатьНоменклатуру
	|ИЗ
	|	(ВЫБРАТЬ
	|		Док.Организация КАК Организация,
	|		Док.Дата КАК ДатаДокумента,
	|		Док.Контрагент КАК Контрагент,
	|		ТовДок.Номенклатура КАК Номенклатура,
	|		ТовДок.СчетУчета КАК СчетУчета,
	|		(ТовДок.Цена) КАК Цена,
	|		(ТовДок.Количество) КАК Количество,
	|		(Док.КурсВзаиморасчетов * ТовДок.Сумма) КАК Сумма,
	|		(ТовДок.СтавкаНДС) КАК СтавкаНДС,
	|		(ТовДок.СуммаНДС) КАК СуммаНДС,
	|		ТовДок.НомерГТД КАК НомерГТД,
	|		ТовДок.СтранаПроисхождения КАК СтранаПроисхождения,
	|		ТовДок.НомерСтроки
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Организация = &Организация
	|		И Док.Контрагент = &Контрагент
	|		И Док.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	
	|	) КАК ТабПриходов
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатуры
	|	ПО ТабПриходов.Номенклатура = СправочникНоменклатуры.Ссылка
	|УПОРЯДОЧИТЬ ПО
	|	ТабПриходов.ДатаДокумента,
	|	ТабПриходов.НомерСтроки";
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ЭтотОбъект.НачалоПериода));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ЭтотОбъект.КонецПериода));
	Запрос.УстановитьПараметр("Организация", ЭтотОбъект.ОрганизацияПоУмолчанию);
	Запрос.УстановитьПараметр("Контрагент", ЭтотОбъект.КонтрагентПоУмолчанию);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаб = ТаблицаЗакупокXLS.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаб, Выборка);
		СтрокаТаб.КодАртикула = СокрЛП(СтрокаТаб.КодАртикула);
		СтрокаТаб.КодГруппы = СокрЛП(СтрокаТаб.КодГруппы);
		СтрокаТаб.АртикулТовара = СокрЛП(СтрокаТаб.АртикулТовара);
		СтрокаТаб.КодАртикула = СокрЛП(СтрокаТаб.КодАртикула);
		СтрокаТаб.СтавкаНДС = ПолучитьПредставлениеПеречисления(Выборка.СтавкаНДС);
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьОстатки() Экспорт
	СтавкаНДС = 18;
	Контрагент = ЭтотОбъект.КонтрагентПоУмолчанию;
	КонтрагентНаименование = ЭтотОбъект.КонтрагентПоУмолчанию.Наименование;
	КонтрагентИННКПП = ЭтотОбъект.КонтрагентПоУмолчанию.ИНН + "/" + ЭтотОбъект.КонтрагентПоУмолчанию.КПП;
	Префикс = "";
	ПрефиксацияОбъектовСобытия.ПриОпределенииПрефиксаОрганизации(ЭтотОбъект.ОрганизацияПоУмолчанию, Префикс);
	НомерДокумента = "ОСТ" + Формат(НачалоПериода, "ДФ=ddMMyyyy");
	Для Каждого СтрокаТаб Из ТаблицаОстатков Цикл
		СтрокаТЧ = ТаблицаЗакупокXLS.Добавить();
		СтрокаТЧ.Контрагент = Контрагент;
		СтрокаТЧ.КонтрагентНаименование = КонтрагентНаименование;
		СтрокаТЧ.КонтрагентИННКПП = КонтрагентИННКПП;
		СтрокаТЧ.Номенклатура = СтрокаТаб.Номенклатура;
		СтрокаТЧ.КодАртикула = СтрокаТаб.КодАртикула;
		СтрокаТЧ.НаименованиеТовара = СтрокаТаб.НаименованиеТовара;
		СтрокаТЧ.АртикулТовара = СтрокаТаб.АртикулТовара;
		Если СтрокаТаб.Количество = 0 Тогда
			СтрокаТЧ.Количество = 1;
		Иначе
			СтрокаТЧ.Количество = СтрокаТаб.Количество;
		КонецЕсли;
		СтрокаТЧ.Цена = СтрокаТаб.Сумма / СтрокаТЧ.Количество;
		СтрокаТЧ.Сумма = СтрокаТаб.Сумма;
		СтрокаТЧ.СтавкаНДС = Формат(СтавкаНДС, "ЧДЦ=; ЧН=0; ЧГ=0");
		СуммаБезНДС = 100 * СтрокаТаб.Сумма / (100 + СтавкаНДС);
		СтрокаТЧ.СуммаНДС = Окр(СтрокаТаб.Сумма - СуммаБезНДС, 2);
		СтрокаТЧ.НомерГТД = СтрокаТаб.НомерГТД;
		СтрокаТЧ.СтранаПроисхождения = СтрокаТаб.Страна.Наименование;
		СтрокаТЧ.СтранаПроисхожденияКод = СтрокаТаб.Страна.Код;
		СтрокаТЧ.СтранаПроисхожденияКодАльфа2 = СтрокаТаб.Страна.КодАльфа2;
		СтрокаТЧ.СтранаПроисхожденияКодАльфа3 = СтрокаТаб.Страна.КодАльфа3;
		СтрокаТЧ.НомерДокумента = НомерДокумента;
		СтрокаТЧ.ДатаДокумента = СтрокаТаб.Период;
		СтрокаТЧ.Организация = ЭтотОбъект.ОрганизацияПоУмолчанию;
		СтрокаТЧ.ГруппаСсылка = СтрокаТаб.ГруппаСсылка;
		СтрокаТЧ.КодГруппы = СтрокаТаб.КодГруппы;
		СтрокаТЧ.Группа = СтрокаТаб.Группа;
		СтрокаТЧ.ТипДокумента = "ОстОприход";
		СтрокаТЧ.Комиссия = ЭтотОбъект.Комиссия;
		Если СтрокаТЧ.Комиссия Тогда
			СтрокаТЧ.СчетУчета = "004.01";
		Иначе
			СтрокаТЧ.СчетУчета = СтрокаТаб.СчетУчета;
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьОстаткиOld(ИмяФайлаВыгрузки) Экспорт
	ФайлОбмена = Новый ЗаписьXML;
	ФайлОбмена.ОткрытьФайл(ИмяФайлаВыгрузки);
	ФайлОбмена.ЗаписатьОбъявлениеXML();
	
	// Записываем элемент <Message>
	ФайлОбмена.ЗаписатьНачалоЭлемента("Message");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("msg", "http://www.1c.ru/SSL/Exchange/Message");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	// Записываем элемент <Header>
	Header = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Header"));
	XMLСхема = ФорматОбмена(Version);
	Header.Format = XMLСхема;
	Header.CreationDate = ТекущаяДата();
	
	Confirmation = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLБазоваяСхема(), "Confirmation"));
	//Если КомпонентыОбмена.ЭтоОбменЧерезПланОбмена Тогда
		Confirmation.ExchangePlan = "СинхронизацияДанныхЧерезУниверсальныйФормат";
		Confirmation.To = Message_To;
		Confirmation.From = Message_From;
		Confirmation.MessageNo = MessageNo;
		Confirmation.ReceivedNo = ReceivedNo;
	//КонецЕсли;
	Header.Confirmation = Confirmation;
		
	Header.AvailableVersion.Добавить(Version);
	
	ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, Header);
	
	// Записываем элемент <Body>
	ФайлОбмена.ЗаписатьНачалоЭлемента("Body");
	ФайлОбмена.ЗаписатьСоответствиеПространстваИмен("", XMLСхема);
	
	ВыгружаемыеОбъекты = Новый Соответствие;
	
	ТабПериодов = ЭтотОбъект.ТаблицаОстатков.Выгрузить(, "Период");
	ТабПериодов.Свернуть("Период");
	
	Для Каждого СтрПериода Из ТабПериодов Цикл
		ВыгрузитьОстаткиXDTO(ФайлОбмена, XMLСхема, Connection, СтрПериода.Период, ВыгружаемыеОбъекты);
	КонецЦикла;
	Для Каждого ЭлементНоменклатуры Из ВыгружаемыеОбъекты Цикл
		ВыгрузитьОбъекты(ФайлОбмена, XMLСхема, ЭлементНоменклатуры.Значение);
	КонецЦикла;
		
	ФайлОбмена.ЗаписатьКонецЭлемента(); // Body
	ФайлОбмена.ЗаписатьКонецЭлемента(); // Message
	ФайлОбмена.Закрыть();
	MessageNo = MessageNo + 1;
	Возврат Истина;
КонецФункции

Функция ВыгрузитьОстаткиXDTO(ФайлОбмена, XMLСхема, Соединение, НачалоПериода, ВыгружаемыеОбъекты)
	//Остатки
	
	XDTO_ОприходованиеТоваров = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Документ.ОприходованиеТоваров"));
	Номер = "ОСТ" + Формат(НачалоПериода, "ДФ=ddMMyyyy");
	
	XDTO_ОприходованиеТоваров.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_ОприходованиеТоваров, "КлючевыеСвойства");
	XDTO_ОприходованиеТоваров.КлючевыеСвойства.Ссылка = ХэшMD5Простой(Номер);
	XDTO_ОприходованиеТоваров.КлючевыеСвойства.Дата = НачалоПериода-1;
	XDTO_ОприходованиеТоваров.КлючевыеСвойства.Номер = Номер;
	
	ОрганизацияСтруктура = Новый Структура;
	ОрганизацияСтруктура.Вставить("Наименование", ОрганизацияПоУмолчанию.Наименование);
	ОрганизацияСтруктура.Вставить("НаименованиеСокращенное", ОрганизацияПоУмолчанию.НаименованиеСокращенное);
	ОрганизацияСтруктура.Вставить("НаименованиеПолное", ОрганизацияПоУмолчанию.НаименованиеПолное);
	ОрганизацияСтруктура.Вставить("ИНН", ОрганизацияПоУмолчанию.ИНН);
	ОрганизацияСтруктура.Вставить("КПП", ОрганизацияПоУмолчанию.КПП);
	ОрганизацияСтруктура.Вставить("ЮридическоеФизическоеЛицо", ПолучитьИмяПеречисления(ОрганизацияПоУмолчанию.ЮридическоеФизическоеЛицо));
	Организация = ВыгрузитьКлючПоСтруктуре(XDTO_ОприходованиеТоваров.КлючевыеСвойства, ОрганизацияСтруктура, "Организация", XMLСхема);
	
	ВыгружаемыеОбъекты.Вставить("Организация_" + Организация.ИНН, Организация);
	
	XDTO_ОприходованиеТоваров.Подразделение = ОбъектXDTOПоИмениСвойства(XDTO_ОприходованиеТоваров, "Подразделение");
	XDTO_ОприходованиеТоваров.Подразделение.Наименование = "Основное подразделение";
	
	Склад = ОбъектXDTOПоИмениСвойства(XDTO_ОприходованиеТоваров, "Склад");
	Склад.Ссылка = "fe5547d4-3d84-11df-96f8-000c6ea69372";
	Склад.Наименование = "Основной склад";
	Склад.ТипСклада = "Оптовый";
	XDTO_ОприходованиеТоваров.Склад = Склад;
	ВыгружаемыеОбъекты.Вставить("Склад_" + Склад.Ссылка, Склад);
	
	XDTO_ОприходованиеТоваров.Сумма = ТаблицаОстатков.Итог("Сумма");
	//Табличная часть
	XDTO_ОприходованиеТоваров.Товары = ОбъектXDTOПоИмениСвойства(XDTO_ОприходованиеТоваров, "Товары");
	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("MEREXTERNALITEMID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	ТабДанных.Колонки.Добавить("NAMEALIASID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	
	Для Каждого СтрокаТЧ Из ТаблицаОстатков Цикл
		НоваяСтрока = ОбъектXDTOПоИмениСвойства(XDTO_ОприходованиеТоваров.Товары, "Строка");
		
		НоваяСтрока.ДанныеНоменклатуры = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеНоменклатуры");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТоварСсылка", СтрокаТЧ.Номенклатура);
		СтруктураПараметров.Вставить("КодТовара", СтрокаТЧ.КодАртикула);
		СтруктураПараметров.Вставить("Наименование", СтрокаТЧ.НаименованиеТовара);
		СтруктураПараметров.Вставить("НаименованиеПолное", СтрокаТЧ.НаименованиеТовара);
		СтруктураПараметров.Вставить("Артикул", СтрокаТЧ.АртикулТовара);
		СтруктураПараметров.Вставить("ТипНоменклатуры", "Товар");
		СтруктураПараметров.Вставить("ВидНоменклатуры", "Товары");
		СтруктураПараметров.Вставить("СсылкаГруппы", СтрокаТЧ.ГруппаСсылка);
		СтруктураПараметров.Вставить("КодГруппы", СтрокаТЧ.КодГруппы);
		СтруктураПараметров.Вставить("НаименованиеГруппы", СтрокаТЧ.Группа);
		СтруктураПараметров.Вставить("ВыгружатьОбъект", Истина);
		
		XDTO_Номенклатура = ПолучитьXDTOНоменклатуры(XMLСхема, ТабДанных, ВыгружаемыеОбъекты, СтруктураПараметров);
		НоваяСтрока.ДанныеНоменклатуры.Номенклатура = XDTO_Номенклатура.КлючевыеСвойства;
		
		ЕдиницаИзмерения = ВыгрузитьКлючЕдиницыИзмерения(НоваяСтрока, "шт");
		ВыгружаемыеОбъекты.Вставить("ЕдиницаИзмерения_" + ЕдиницаИзмерения.Код, ЕдиницаИзмерения);
		Если СтрокаТЧ.Количество = 0 Тогда
			НоваяСтрока.Количество = 1;
		Иначе
			НоваяСтрока.Количество = СтрокаТЧ.Количество;
		КонецЕсли;
		НоваяСтрока.Сумма = СтрокаТЧ.Сумма;
		Если НоваяСтрока.Количество = 0 Тогда
			НоваяСтрока.Цена = НоваяСтрока.Сумма;
		Иначе
			НоваяСтрока.Цена = Окр(НоваяСтрока.Сумма / НоваяСтрока.Количество, 2);
		КонецЕсли;
		
		НоваяСтрока.ТипЗапасов = "ПокупныеИзделия";
		
		ДанныеГТД = ОбъектXDTOПоИмениСвойства(НоваяСтрока, "ДанныеГТД");
		ДанныеГТД.НомерГТД = СтрокаТЧ.НомерГТД;
		
		СтранаПроисхождения = ВыгрузитьКлючСтраны(XMLСхема, ВыгружаемыеОбъекты, ДанныеГТД, СтрокаТЧ.Страна.КодАльфа3, СтрокаТЧ.Страна.Наименование, СтрокаТЧ.Страна.Код);
		
		НоваяСтрока.ДанныеГТД = ДанныеГТД;
		НоваяСтрока.СчетУчета = СтрокаТЧ.СчетУчета;
		
		XDTO_ОприходованиеТоваров.Товары.Строка.Добавить(НоваяСтрока);
		
	КонецЦикла;
	
	// 4. Записываем ОбъектXDTO в XML-файл.
	ФабрикаXDTO.ЗаписатьXML(ФайлОбмена, XDTO_ОприходованиеТоваров);
	Возврат Истина;
КонецФункции

Функция ЗагрузитьСправочникAxaptaOld() Экспорт
	ADO_Connect();
	
	Cmd=Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Connection;
	Cmd.CommandText = "SELECT
	|	INVENTTABLE.ITEMID,
	|	INVENTTABLE.ITEMNAME,
	|	MERNAMEALIASTABLE.NAMEALIASID AS NAMEALIASID,
	|	INVENTTABLE.NAMEALIAS,
	|	INVENTTABLE.ID_1C,
	|	INVENTTABLE.OUTID_1C,
	|	INVENTITEMRANGE.RANGEID AS ITEMRANGEROOT,
	|	INVENTITEMRANGE.NAME AS ITEMRANGEROOTNAME,
	|	INVENTTABLE.DESCRIPTION
	|	--INVENTGTDSETTLEMENT_MRC.GTD,
	|	--INVENTGTDSETTLEMENT_MRC.EXTERNALLOGISTICID,
	|	--INVENTGTDSETTLEMENT_MRC.NAMEALIASLOGISTICID,
	|	--INVENTGTDSETTLEMENT_MRC.NAMEALIASLOGIST
	|	--INVENTGTDSETTLEMENT_MRC.NAMEALIASID AS Expr4,
	|	--INVENTGTDSETTLEMENT_MRC.NAMEALIAS AS Expr5,
	|FROM
	|	dbo.INVENTTABLE AS INVENTTABLE
	|LEFT JOIN
	|	dbo.MERNAMEALIASTABLE AS MERNAMEALIASTABLE
	|	ON INVENTTABLE.NAMEALIASID = MERNAMEALIASTABLE.NAMEALIASID
	|--LEFT JOIN
	|--	dbo.INVENTGTDSETTLEMENT_MRC AS INVENTGTDSETTLEMENT_MRC
	|--	ON INVENTTABLE.ITEMID = INVENTGTDSETTLEMENT_MRC.ITEMID
	|LEFT JOIN
	|	dbo.INVENTITEMRANGE AS INVENTITEMRANGE
	|	ON MERNAMEALIASTABLE.ITEMRANGEID = INVENTITEMRANGE.RANGEID
	|	OR INVENTTABLE.ITEMRANGEID = INVENTITEMRANGE.RANGEID
	|UNION ALL
	|SELECT
	|	INVENTTABLE.ITEMID,
	|	MERNAMEALIASTABLE.NAME AS ITEMNAME,
	|	MERNAMEALIASTABLE.NAMEALIASID AS NAMEALIASID,
	|	MERNAMEALIASTABLE.NAMEALIAS,
	|	MERNAMEALIASTABLE.ID_1C,
	|	MERNAMEALIASTABLE.OUTID_1C,
	|	INVENTITEMRANGE.RANGEID,
	|	INVENTITEMRANGE.NAME AS ITEMRANGENAME,
	|	MERNAMEALIASTABLE.DESCRIPTION
	|FROM
	|	dbo.MERNAMEALIASTABLE AS MERNAMEALIASTABLE
	|LEFT JOIN
	|	dbo.INVENTTABLE AS INVENTTABLE
	|	ON MERNAMEALIASTABLE.NAMEALIASID = INVENTTABLE.NAMEALIASID
	|LEFT JOIN
	|	dbo.INVENTITEMRANGE AS INVENTITEMRANGE
	|	ON MERNAMEALIASTABLE.ITEMRANGEID = INVENTITEMRANGE.RANGEID
	|WHERE
	|	INVENTTABLE.NAMEALIASID IS NULL";
	Cmd.CommandTimeout = 0;		//120;
	Cmd.CommandType = adCmdText;
	Cmd.NamedParameters = True;
	rst = Новый COMОбъект("ADODB.RecordSet");
	rst = Cmd.Execute();
	КолонкиТаблицыКодовТовара = ТаблицаКодовТовара.ВыгрузитьКолонки().Колонки;
	КолонкиТаблицыКодовТовара.Удалить(КолонкиТаблицыКодовТовара.Найти("НомерСтроки"));
	КолонкиТаблицыКодовТовара.Удалить(КолонкиТаблицыКодовТовара.Найти("MerExternalItemId"));
	Пока rst.EOF() = Ложь Цикл
		СтрокаДанных = ТаблицаКодовТовара.Добавить();
		Для Каждого Колонка Из КолонкиТаблицыКодовТовара Цикл
			СтрокаДанных[Колонка.Имя] = rst.Fields(Колонка.Имя).Value;
		КонецЦикла;
		rst.MoveNext();
	КонецЦикла;
	//ТабДанных.Индексы.Добавить("MEREXTERNALITEMID");
	Возврат Истина;
КонецФункции

Функция ЗагрузитьТаблицуВнешнихПродаж(ТаблицаXLS) Экспорт
	ТаблицаXLS.Колонки["К_1"].Имя = "КонтрагентНаименование";
	ТаблицаXLS.Колонки["К_2"].Имя = "КонтрагентИННКПП";
	ТаблицаXLS.Колонки["К_3"].Имя = "КодТовара1С";
	ТаблицаXLS.Колонки["К_4"].Имя = "НаименованиеТовара";
	ТаблицаXLS.Колонки["К_5"].Имя = "АртикулТовара";
	ТаблицаXLS.Колонки["К_6"].Имя = "Количество";
	ТаблицаXLS.Колонки["К_7"].Имя = "Цена";
	ТаблицаXLS.Колонки["К_8"].Имя = "Сумма";
	ТаблицаXLS.Колонки["К_9"].Имя = "СтавкаНДС";
	ТаблицаXLS.Колонки["К_10"].Имя = "СуммаНДС";
	ТаблицаXLS.Колонки["К_11"].Имя = "НомерГТД";
	ТаблицаXLS.Колонки["К_12"].Имя = "СтранаПроисхождения";
	ТаблицаXLS.Колонки["К_13"].Имя = "СтранаПроисхожденияКод";
	ТаблицаXLS.Колонки["К_14"].Имя = "НомерДокумента";
	ТаблицаXLS.Колонки["К_15"].Имя = "ДатаДокумента";
	ТаблицаXLS.Колонки["К_16"].Имя = "НомерСчетфактуры";
	
	ТабДанных = СформироватьТаблицуКодов(Connection, ТаблицаXLS, "КодТовара1С", "OutId_1c");
	
	СтруктураПоиска = Новый Структура("OUTID_1C");

	Для Каждого СтрокаТаб Из ТаблицаXLS Цикл
		СтрокаТЧ = ТаблицаЗакупокXLS.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаб);
		СтруктураПоиска.OUTID_1C = СокрЛП(СтрокаТаб.КодТовара1С);
		СтрокаТЧ.НомерДокумента = СокрЛП(СтрокаТЧ.НомерДокумента);
		СтрокаТЧ.Организация = ОрганизацияПоУмолчанию;
		СтрокаТЧ.ТипДокумента = ТипДокументаПоУмолчанию;
		Если Комиссия Тогда
			СтрокаТЧ.СчетУчета = "004.01";
		Иначе
			СтрокаТЧ.СчетУчета = "41.01";
		КонецЕсли;
		СтрокаТЧ.Комиссия = КодТовараВMerExternalItemId;
		НайденныеСтроки = ТабДанных.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если ТипВыгрузкиТовара = 0 Тогда
				СтрокаТЧ.КодАртикула = НайденныеСтроки[0].NAMEALIASID;
			ИначеЕсли ТипВыгрузкиТовара = 1 Тогда
				СтрокаТЧ.КодАртикула = НайденныеСтроки[0].MerExternalItemId;
			ИначеЕсли ТипВыгрузкиТовара = 2 Тогда
				СтрокаТЧ.КодАртикула = "ITEM" + НайденныеСтроки[0].ItemId;
			КонецЕсли;
			СтрокаТЧ.ItemId = НайденныеСтроки[0].ItemId;
			СтрокаТЧ.MerExternalItemId = НайденныеСтроки[0].MerExternalItemId;
			СтрокаТЧ.Группа = НайденныеСтроки[0].TMName;
			СтрокаТЧ.КодГруппы = НайденныеСтроки[0].TMId;
			СтрокаТЧ.НаименованиеПолноеТовара = СтрокаТЧ.НаименованиеТовара+", артикул "+СокрЛП(СтрокаТЧ.АртикулТовара)+", Производитель "+СокрЛП(СтрокаТЧ.Группа);
			СтрокаТЧ.АртикулТовара = СокрЛП(СтрокаТаб.КодТовара1С);
		КонецЕсли;
	КонецЦикла;
	//ТаблицаЗакупокXLS.Загрузить(ТаблицаXLS);
	ТаблицаXLS = Неопределено;
	
КонецФункции

Функция ЗагрузитьТаблицуЗаморозок(ТаблицаXLS) Экспорт
	ТаблицаXLS.Колонки["К_1"].Имя = "ДатаДокумента";
	ТаблицаXLS.Колонки["К_2"].Имя = "КонтрагентНаименование";
	ТаблицаXLS.Колонки["К_4"].Имя = "КонтрагентИННКПП";
	ТаблицаXLS.Колонки["К_5"].Имя = "ОрганизацияНаименование";
	ТаблицаXLS.Колонки["К_6"].Имя = "КодТовара1С";
	ТаблицаXLS.Колонки["К_7"].Имя = "НаименованиеТовара";
	ТаблицаXLS.Колонки["К_8"].Имя = "АртикулТовара";
	ТаблицаXLS.Колонки["К_9"].Имя = "Количество";
	ТаблицаXLS.Колонки["К_10"].Имя = "Цена";
	ТаблицаXLS.Колонки["К_11"].Имя = "Сумма";
	ТаблицаXLS.Колонки["К_13"].Имя = "НомерГТД";
	ТаблицаXLS.Колонки["К_15"].Имя = "СтранаПроисхождения";
	ТаблицаXLS.Колонки["К_17"].Имя = "СтранаПроисхожденияКод";
	М = Новый Массив;
	М.Добавить(ТипЗнч(Справочники.Организации.ПустаяСсылка()));
	ТаблицаXLS.Колонки.Добавить("Организация", Новый ОписаниеТипов(М));
	ТаблицаXLS.Колонки.Добавить("ТипДокумента", Новый ОписаниеТипов("Строка"));
	ТаблицаXLS.ЗаполнитьЗначения(ТипДокументаПоУмолчанию, "ТипДокумента");
	ЗапросОрганизации = Новый Запрос("ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование ПОДОБНО &Организация");
	ЗапросОрганизации.УстановитьПараметр("Организация", "");
	ПредОрганизация = Неопределено;
	
	Для Каждого СтрокаТаб Из ТаблицаXLS Цикл
		ЗначениеПараметра = "%" + СтрокаТаб.ОрганизацияНаименование + "%";
		Если ЗапросОрганизации.Параметры.Организация <> ЗначениеПараметра Тогда
			ЗапросОрганизации.УстановитьПараметр("Организация", ЗначениеПараметра);
			Выборка = ЗапросОрганизации.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтрокаТаб.Организация = Выборка.Ссылка;
				ПредОрганизация = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			СтрокаТаб.Организация = ПредОрганизация;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДанных = СформироватьТаблицуКодов(Connection, ТаблицаXLS, "КодТовара1С", "OutId_1c");
	
	СтруктураПоиска = Новый Структура("OUTID_1C");

	Для Каждого СтрокаТаб Из ТаблицаXLS Цикл
		СтрокаТЧ = ТаблицаЗакупокXLS.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаб);
		СтруктураПоиска.OUTID_1C = СокрЛП(СтрокаТаб.КодТовара1С);
		НайденныеСтроки = ТабДанных.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если ТипВыгрузкиТовара = 0 Тогда
				СтрокаТЧ.КодАртикула = НайденныеСтроки[0].NAMEALIASID;
			ИначеЕсли ТипВыгрузкиТовара = 1 Тогда
				СтрокаТЧ.КодАртикула = НайденныеСтроки[0].MerExternalItemId;
			ИначеЕсли ТипВыгрузкиТовара = 2 Тогда
				СтрокаТЧ.КодАртикула = "ITEM" + НайденныеСтроки[0].ItemId;
			КонецЕсли;
			СтрокаТЧ.КодАртикула = НайденныеСтроки[0].NAMEALIASID;
			СтрокаТЧ.ItemId = НайденныеСтроки[0].ItemId;
			СтрокаТЧ.MerExternalItemId = НайденныеСтроки[0].MerExternalItemId;
			СтрокаТЧ.Группа = НайденныеСтроки[0].TMName;
			СтрокаТЧ.КодГруппы = НайденныеСтроки[0].TMId;
		КонецЕсли;
		СтрокаТЧ.НаименованиеПолноеТовара = СтрокаТЧ.НаименованиеТовара+", артикул "+СокрЛП(СтрокаТЧ.АртикулТовара)+", Производитель "+СокрЛП(СтрокаТЧ.Группа);
	КонецЦикла;
	//ТаблицаЗакупокXLS.Загрузить(ТаблицаXLS);
	ТаблицаXLS = Неопределено;
	
КонецФункции

Функция СформироватьТаблицуКодов(Connection, Таблица_OutId_1c, ИмяПоляТаблицы, ИмяПоляПоиска) Экспорт
	ADO_Connect();
	
	RecordSet = Неопределено;
	Cmd=Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Connection;
	Cmd.CommandText = "create table #ArtImport (OutId_1c nvarchar(14));";
	Cmd.CommandTimeout = 0;		//120;
	Cmd.CommandType = adCmdText;
	Cmd.NamedParameters = True;
	Cmd.Execute();
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet.ActiveConnection = Connection;
	RecordSet.CursorLocation = adUseClient;
	RecordSet.CursorType = adOpenForwardOnly;
	RecordSet.LockType = adLockBatchOptimistic;
	
	RecordSet.Open("#ArtImport", Connection, adOpenForwardOnly, adLockBatchOptimistic);
	
	RecordSet.ActiveConnection = Неопределено;
	
	Для Каждого СтрокаТаб Из Таблица_OutId_1c Цикл
	    RecordSet.AddNew();
		RecordSet.Fields("OutId_1c").Value = СокрЛП(СтрокаТаб[ИмяПоляТаблицы]);
		RecordSet.Update();
	КонецЦикла;
	
	RecordSet.ActiveConnection = Connection;
	RecordSet.UpdateBatch();
	RecordSet.Close();
	RecordSet = Неопределено;
	
	Cmd=Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Connection;
	Cmd.CommandText = "create index OutId_1c_ind
	|on #ArtImport (OutId_1c);
	|SELECT
	|	INVENTTABLE.ItemId,
	|	INVENTTABLE.OutId_1c,
	|	INVENTTABLE.ITEMNAME,
	|	INVENTTABLE.NAMEALIASID,
	|	CASE WHEN MEL.MerExternalItemIdSpecification IS NULL AND MOTS.OrderTransId IS NOT NULL THEN MOTS.OrderTransId
	|	WHEN MEL.MerExternalItemIdSpecification IS NULL AND MOTS.OrderTransId IS NULL THEN 'ITEM' + INVENTTABLE.ItemId
	|	WHEN MEL.MerExternalItemIdSpecification = '' THEN MEL.MerExternalItemId
	|	ELSE MEL.MerExternalItemIdSpecification END AS MerExternalItemId,
	|	INVENTTABLE.ITEMRANGEROOT AS TMId,
	|	TM.NAME AS TMName
	|FROM [INVENTTABLE] AS INVENTTABLE
	|INNER JOIN
	|	#ArtImport AS ArtImport
	|	ON INVENTTABLE." + ИмяПоляПоиска + " = ArtImport.OutId_1c
	|LEFT OUTER JOIN
	|	dbo.INVENTITEMRANGE AS TM
	|	ON INVENTTABLE.ITEMRANGEROOT = TM.RANGEID
	|LEFT JOIN
	|	(SELECT
	|		MOOLI.ItemId,
	|		MEL.MerExternalItemIdSpecification,
	|		MEL.MerExternalItemId
	|	FROM
	|		MerOpenOrderLineItem AS MOOLI
	|	INNER JOIN
	|		MerOrderTrans AS MOT
	|		ON MOOLI.ReasonMerinventTransId = MOT.OrderTransId
	|	INNER JOIN
	|		MerOrderTrans AS MOTS
	|		ON MOT.OrderTransBatchBase = MOTS.OrderTransBatch
	|	INNER JOIN
	|		MEREXTERNALLOGISTICLINE AS MEL
	|		ON MOTS.OrderTransId = MEL.InventTransId
	|	) AS MEL
	|	ON INVENTTABLE.ItemId = MEL.ItemId
	|LEFT JOIN
	|	(SELECT
	|		MOOLI.ItemId,
	|		MOTS.OrderTransId
	|	FROM
	|		MerOpenOrderLineItem AS MOOLI
	|	INNER JOIN
	|		MerOrderTrans AS MOT
	|		ON MOOLI.ReasonMerinventTransId = MOT.OrderTransId
	|	INNER JOIN
	|		MerOrderTrans AS MOTS
	|		ON MOT.OrderTransBatchBase = MOTS.OrderTransBatch
	|	LEFT JOIN
	|		MEREXTERNALLOGISTICLINE AS MEL
	|		ON MOTS.OrderTransId = MEL.InventTransId
	|	WHERE
	|		MEL.InventTransId IS NULL
	|	) AS MOTS
	|	ON INVENTTABLE.ItemId = MOTS.ItemId";
	Cmd.CommandTimeout = 0;		//120;
	Cmd.CommandType = adCmdText;
	
	rst = Новый COMОбъект("ADODB.RecordSet");
	rst = Cmd.Execute();
	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("ItemId", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(14)));
	ТабДанных.Колонки.Добавить("OutId_1c", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(14)));
	ТабДанных.Колонки.Добавить("ITEMNAME", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ТабДанных.Колонки.Добавить("MerExternalItemId", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(14)));
	ТабДанных.Колонки.Добавить("NAMEALIASID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	ТабДанных.Колонки.Добавить("TMName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ТабДанных.Колонки.Добавить("TMId", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(4)));
	Пока rst.EOF() = Ложь Цикл
		СтрокаДанных = ТабДанных.Добавить();
		Для Каждого Колонка Из ТабДанных.Колонки Цикл
			СтрокаДанных[Колонка.Имя] = rst.Fields(Колонка.Имя).Value;
		КонецЦикла;
		rst.MoveNext();
	КонецЦикла;
	ADO_Disconnect();
	ТабДанных.Индексы.Добавить("ItemId");
	ТабДанных.Индексы.Добавить("OutId_1c");
	Возврат ТабДанных;
КонецФункции	

Функция ЗагрузитьТаблицуZОтчетов(ТаблицаXLS) Экспорт
	ТаблицаXLS.Колонки["К_1"].Имя = "Дата";
	ТаблицаXLS.Колонки["К_3"].Имя = "НаименованиеМагазина";
	ТаблицаXLS.Колонки["К_4"].Имя = "Сумма";
	ТаблицаXLS.Колонки["К_5"].Имя = "СуммаВозврата";
	ТаблицаXLS.Колонки["К_6"].Имя = "Организация";
	ТаблицаXLS.Колонки["К_8"].Имя = "КодМагазина";
	ЗапросОрганизации = Новый Запрос("ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Наименование ПОДОБНО &Организация");
	ЗапросОрганизации.УстановитьПараметр("Организация", "");
	ПредОрганизация = Неопределено;
	тДатаНачала = Дата("30010101");
	тДатаКонца = Дата("00010101");
	Для Каждого СтрокаТаб Из ТаблицаXLS Цикл
		СтрокаТаб.Дата = НачалоДня(СтрокаТаб.Дата);
		СтрокаТаб.КодМагазина = Формат(Число(СтрокаТаб.КодМагазина), "ЧЦ=3; ЧВН=");
		Если ТипЗнч(СтрокаТаб.Сумма) = Тип("Число") Тогда
			СтрокаТаб.Сумма = Число(СтрокаТаб.Сумма);
		Иначе
			СтрокаТаб.Сумма = 0;
		КонецЕсли;
		Если ТипЗнч(СтрокаТаб.СуммаВозврата) <> Тип("Неопределено") Тогда
			СтрокаТаб.СуммаВозврата = Число(СтрокаТаб.СуммаВозврата);
		Иначе
			СтрокаТаб.СуммаВозврата = 0;
		КонецЕсли;
		Если тДатаНачала > СтрокаТаб.Дата Тогда
			тДатаНачала = СтрокаТаб.Дата;
		КонецЕсли;
		Если тДатаКонца < СтрокаТаб.Дата Тогда
			тДатаКонца = СтрокаТаб.Дата;
		КонецЕсли;
		ЗначениеПараметра = "%" + СтрокаТаб.Организация + "%";
		Если ЗапросОрганизации.Параметры.Организация <> ЗначениеПараметра Тогда
			ЗапросОрганизации.УстановитьПараметр("Организация", ЗначениеПараметра);
			Выборка = ЗапросОрганизации.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				СтрокаТаб.Организация = Выборка.Ссылка;
				ПредОрганизация = Выборка.Ссылка;
			КонецЕсли;
		Иначе
			СтрокаТаб.Организация = ПредОрганизация;
		КонецЕсли;
	КонецЦикла;
	ТаблицаXLS.Колонки.Добавить("СуммаЧековПродаж", Новый ОписаниеТипов("Число"));
	ТаблицаXLS.Колонки.Добавить("СуммаЧековВозвратов", Новый ОписаниеТипов("Число"));
	ТаблицаXLS.Колонки.Добавить("РазницаПродаж", Новый ОписаниеТипов("Число"));
	ТаблицаXLS.Колонки.Добавить("РазницаВозвратов", Новый ОписаниеТипов("Число"));
	ТаблицаXLS.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка"));
	ТаблицаXLS.Колонки.Добавить("КоличествоЧеков", Новый ОписаниеТипов("Число"));
	ТаблицаXLS.Колонки.Добавить("НераспЗаморозка", Новый ОписаниеТипов("Булево"));
	//ТаблицаXLS.Колонки.Добавить("МассивЧеков");
	
	//ТаблицаXLS.Сортировать("КодМагазина, Дата");
	ADO_Connect();
	
	ADO_ConnectCash();
	CmdList=Новый COMОбъект("ADODB.Command");
	CmdList.ActiveConnection = ConnectionCash;
	CmdList.CommandText = "SELECT
	|	TabSales.DocNumber,
	|	TabSales.DocDate,
	|	TabSales.DocType,
	|	TabSales.IdLocation,
	|	TabSales.TotalAmount,
	|	TabSales.ItemId,
	|	TabSales.Quantity,
	|	TabSales.ParentDocNumber,
	|	TabSales.ParentDocDate,
	|	TabSales.FiscalDocNumber,
	|	TabPayments.PAY_CASH,
	|	TabPayments.PAY_CARD
	|FROM dbo.Buyanov_Buh_Sales(?, ?) AS TabSales
	|LEFT JOIN
	|	(SELECT
	|		TabPayments.DocNumber,
	|		SUM(CASE WHEN TabPayments.PaymentType != 6 THEN TabPayments.Amount ELSE 0 END) AS PAY_CASH,
	|		SUM(CASE WHEN TabPayments.PaymentType = 6 THEN TabPayments.Amount ELSE 0 END) AS PAY_CARD
	|	FROM
	|		dbo.Buyanov_Buh_SalePayments(?, ?) AS TabPayments
	|	GROUP BY
	|		TabPayments.DocNumber
	|	) AS TabPayments
	|	ON TabSales.DocNumber = TabPayments.DocNumber
	|";
	CmdList.CommandTimeout = 0;		//120;
	CmdList.CommandType = adCmdText;
	CmdList.NamedParameters = True;
	prmBeginDate = CmdList.CreateParameter(, adWChar, adParamInput, 32, Формат(тДатаНачала, "ДФ=yyyyMMdd"));
	CmdList.Parameters.Append(prmBeginDate);
	prmEndDate = CmdList.CreateParameter(, adWChar, adParamInput, 32, Формат(тДатаКонца, "ДФ=yyyyMMdd"));
	CmdList.Parameters.Append(prmEndDate);
	prmBeginDate = CmdList.CreateParameter(, adWChar, adParamInput, 32, Формат(тДатаНачала, "ДФ=yyyyMMdd"));
	CmdList.Parameters.Append(prmBeginDate);
	prmEndDate = CmdList.CreateParameter(, adWChar, adParamInput, 32, Формат(тДатаКонца, "ДФ=yyyyMMdd"));
	CmdList.Parameters.Append(prmEndDate);
	rst = Новый COMОбъект("ADODB.RecordSet");
	rst = CmdList.Execute();
	///////////
	RecordSet = Неопределено;
	CmdList=Новый COMОбъект("ADODB.Command");
	CmdList.ActiveConnection = Connection;
	CmdList.CommandText = "create table #CashSales_tt1 (DocNumber nvarchar(10), DocDate datetime, DocType int, IdLocation nvarchar(3), TotalAmount float, ItemId nvarchar(20),
	|Quantity float, ParentDocNumber nvarchar(10), ParentDocDate datetime, FiscalDocNumber int, PAY_CASH float, PAY_CARD float);";
	CmdList.CommandTimeout = 0;		//120;
	CmdList.CommandType = adCmdText;
	CmdList.NamedParameters = True;
	CmdList.Execute();
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet.ActiveConnection = Connection;
	RecordSet.CursorLocation = adUseClient;
	RecordSet.CursorType = adOpenForwardOnly;
	RecordSet.LockType = adLockBatchOptimistic;
	
	RecordSet.Open("#CashSales_tt1", Connection, adOpenForwardOnly, adLockBatchOptimistic);
	
	RecordSet.ActiveConnection = Неопределено;
	
	Пока rst.EOF() = Ложь Цикл
	    RecordSet.AddNew();
		Для Каждого Field Из RecordSet.Fields Цикл
			RecordSet.Fields(Field.Name).Value = rst.Fields(Field.Name).Value;
		КонецЦикла;
		RecordSet.Update();
		rst.MoveNext();
	КонецЦикла;
	ADO_DisconnectCash();
	RecordSet.ActiveConnection = Connection;
	RecordSet.UpdateBatch();
	RecordSet.Close();
	RecordSet = Неопределено;
	
	CmdList=Новый COMОбъект("ADODB.Command");
	CmdList.ActiveConnection = Connection;
	CmdList.CommandText = "create index IdLocation_ind on #CashSales_tt1 (IdLocation);
	|create index ItemId_ind on #CashSales_tt1 (ItemId);
	|SELECT
	|	CashReports.DocNumber,
	|	CashReports.DocDate,
	|	CashReports.DocType,
	|	CashReports.IdLocation,
	|	CashReports.TotalAmount,
	|	CashReports.ItemId,
	|	CashReports.Quantity,
	|	CashReports.ParentDocNumber,
	|	CashReports.ParentDocDate,
	|	CASE WHEN INVENTTABLE.ITEMGROUPID = 'Услуги' THEN 0 ELSE CashReports.FiscalDocNumber END AS FiscalDocNumber,
	|	'RUR' AS DOC_CUR,
	|   CashReports.IdLocation AS DOC_STOCKID,
	|   INVENTLOCATION.NAME AS DOC_STOCKNAME,
	|   CashReports.IdLocation AS DOC_BRANCHID,
	|   INVENTLOCATION.NAME AS DOC_BRANCHNAME,
	|	CASE WHEN INVENTTABLE.ITEMNAME = '' THEN inventItemRange.NAME ELSE INVENTTABLE.ITEMNAME END AS NAME,
	|	CASE WHEN INVENTTABLE.NAMEALIAS = '' THEN INVENTTABLE.OUTID_1C ELSE INVENTTABLE.NAMEALIAS END AS NAMEALIASNAME,
	|	CASE WHEN INVENTTABLE.NAMEALIASID = '' THEN INVENTTABLE.ITEMID ELSE INVENTTABLE.NAMEALIASID END AS NAMEALIASID,
	|	INVENTTABLE.OUTID_1C,
	|	CASE WHEN MEL.MerExternalItemIdSpecification IS NULL AND MOTS.OrderTransId IS NOT NULL THEN MOTS.OrderTransId
	|	WHEN MEL.MerExternalItemIdSpecification IS NULL AND MOTS.OrderTransId IS NULL THEN 'ITEM' + CashReports.ItemId
	|	WHEN MEL.MerExternalItemIdSpecification = '' THEN MEL.MerExternalItemId
	|	ELSE MEL.MerExternalItemIdSpecification END AS MerExternalItemId,
	|	INVENTTABLE.ITEMRANGEROOT AS ITEMRANGEROOT,
	|	CashReports.Quantity AS QTY,
	|	CashReports.TotalAmount AS AMOUNTCUR,
	|	inventItemRange.NAME AS TMName,
	|	CASE WHEN INVENTGTDSETTLEMENT_MRC.GTD IS NULL OR INVENTGTDSETTLEMENT_MRC.GTD = '' THEN
	|		CASE WHEN MERINVENTTABLEFEATURE.MerInventGTDFull = '' THEN MERINVENTTABLEFEATURE.MerInventGTD + (CASE WHEN charindex('/', RIGHT(MERINVENTTABLEFEATURE.MerInventGTD, 4)) > 0 THEN '' ELSE '/1' END) ELSE MERINVENTTABLEFEATURE.MerInventGTDFull END
	|		ELSE INVENTGTDSETTLEMENT_MRC.GTD
	|	END AS INVENTGTD,
	|	CASE
	|		WHEN M.CountryId IS NOT NULL AND M.CountryId != '' THEN M.CountryId
	|		WHEN MGTD.CountryId IS NOT NULL AND MGTD.CountryId != '' THEN MGTD.CountryId
	|		WHEN inventItemGroup.CountryId IS NOT NULL AND inventItemGroup.CountryId != '' THEN inventItemGroup.CountryId
	|		ELSE inventItemRange.CountryId
	|	END AS COUNTRYOFORIGINID,
	|	CR.Name as Country, 
	|	CR.COUNTRYNUMID_MRC as COUNTRYNUMID_MRC,
	|	CashReports.PAY_CASH AS PAY_CASH,
	|	CashReports.PAY_CARD AS PAY_CARD
	|FROM
	|	#CashSales_tt1 AS CashReports
	|INNER JOIN
	|	dbo.INVENTLOCATION AS INVENTLOCATION ON CASHREPORTS.IdLocation = INVENTLOCATION.INVENTLOCATIONID
	|LEFT JOIN
	|	dbo.INVENTTABLE AS INVENTTABLE
	|	ON CashReports.ItemId = INVENTTABLE.ITEMID
	|LEFT JOIN
	|	(SELECT
	|		MOOLI.ItemId,
	|		MEL.MerExternalItemIdSpecification,
	|		MEL.MerExternalItemId
	|	FROM
	|		MerOpenOrderLineItem AS MOOLI
	|	INNER JOIN
	|		MerOrderTrans AS MOT
	|		ON MOOLI.ReasonMerinventTransId = MOT.OrderTransId
	|	INNER JOIN
	|		MerOrderTrans AS MOTS
	|		ON MOT.OrderTransBatchBase = MOTS.OrderTransBatch
	|	INNER JOIN
	|		MEREXTERNALLOGISTICLINE AS MEL
	|		ON MOTS.OrderTransId = MEL.InventTransId
	|	) AS MEL
	|	ON INVENTTABLE.ItemId = MEL.ItemId
	|LEFT JOIN
	|	(SELECT
	|		MOOLI.ItemId,
	|		MOTS.OrderTransId
	|	FROM
	|		MerOpenOrderLineItem AS MOOLI
	|	INNER JOIN
	|		MerOrderTrans AS MOT
	|		ON MOOLI.ReasonMerinventTransId = MOT.OrderTransId
	|	INNER JOIN
	|		MerOrderTrans AS MOTS
	|		ON MOT.OrderTransBatchBase = MOTS.OrderTransBatch
	|	LEFT JOIN
	|		MEREXTERNALLOGISTICLINE AS MEL
	|		ON MOTS.OrderTransId = MEL.InventTransId
	|	WHERE
	|		MEL.InventTransId IS NULL
	|	) AS MOTS
	|	ON INVENTTABLE.ItemId = MOTS.ItemId
	|LEFT JOIN
	|	dbo.MERINVENTTABLEFEATURE AS MERINVENTTABLEFEATURE
	|	ON CASHREPORTS.ItemId = MERINVENTTABLEFEATURE.ITEMID
	|LEFT JOIN
	|	dbo.INVENTGTDSETTLEMENT_MRC AS INVENTGTDSETTLEMENT_MRC
	|	ON CASHREPORTS.ItemId = INVENTGTDSETTLEMENT_MRC.ITEMID
	|LEFT JOIN
	|	dbo.MEREXTERNALLOGISTICLINE AS M
	|	ON INVENTGTDSETTLEMENT_MRC.LINEITEMREFTABLEID = 0 AND INVENTGTDSETTLEMENT_MRC.LOGLINEREFRECID = M.RECID
	|LEFT JOIN
	|	(SELECT
	|		ML.MERINVENTGTD,
	|		ML.NAMEALIASID,
	|		MAX(ML.COUNTRYID) AS COUNTRYID
	|	FROM
	|		(SELECT
	|			MT.MERINVENTGTD,
	|			ML.NAMEALIASID,
	|			MAX(ML.COUNTRYID) AS COUNTRYID
	|		FROM dbo.MEREXTERNALLOGISTICTABLE AS MT
	|		INNER JOIN
	|			dbo.MEREXTERNALLOGISTICLINE AS ML ON MT.MEREXTERNALLOGISTICID = ML.MEREXTERNALLOGISTICID
	|		GROUP BY
	|			MT.MERINVENTGTD,
	|			ML.NAMEALIASID
	|		UNION
	|		SELECT
	|			MT.INVENTGTD,
	|			MT.NAMEALIASID,
	|			MAX(MT.COUNTRYOFORIGINID) AS COUNTRYID
	|		FROM dbo.MEROPENORDERLINE AS MT
	|		GROUP BY
	|			MT.INVENTGTD,
	|			MT.NAMEALIASID) AS ML
	|	GROUP BY
	|		ML.MERINVENTGTD,
	|		ML.NAMEALIASID
	|	) AS MGTD
	|	ON (SUBSTRING(INVENTGTDSETTLEMENT_MRC.GTD,1,23) = MGTD.MERINVENTGTD OR
	|	MERINVENTTABLEFEATURE.MerInventGTD = MGTD.MERINVENTGTD)
	|	AND INVENTTABLE.NAMEALIASID = MGTD.NAMEALIASID
	|LEFT JOIN
	|	dbo.inventItemRange AS inventItemGroup
	|	ON INVENTTABLE.ITEMRANGEID = inventItemGroup.RANGEID
	|LEFT JOIN
	|	dbo.inventItemRange AS inventItemRange
	|	ON INVENTTABLE.ITEMRANGEROOT = inventItemRange.RANGEID
	|LEFT OUTER JOIN
	|	dbo.ADDRESSCOUNTRYREGION AS CR
	|	ON (CASE
	|		WHEN M.CountryId IS NOT NULL AND M.CountryId != '' THEN M.CountryId
	|		WHEN MGTD.CountryId IS NOT NULL AND MGTD.CountryId != '' THEN MGTD.CountryId
	|		WHEN inventItemGroup.CountryId IS NOT NULL AND inventItemGroup.CountryId != '' THEN inventItemGroup.CountryId
	|		ELSE inventItemRange.CountryId
	|	END) = CR.COUNTRYREGIONID
	|";
	
	CmdList.CommandTimeout = 0;		//120;
	CmdList.CommandType = adCmdText;
	
	rst = Новый COMОбъект("ADODB.RecordSet");
	rst = CmdList.Execute();
	ТаблицаЧеков.Очистить();
	Пока rst.EOF() = Ложь Цикл
		СтрокаДанных = ТаблицаЧеков.Добавить();
		Для Каждого Field Из rst.Fields Цикл
			СтрокаДанных[Field.Name] = Field.Value;
		КонецЦикла;
		rst.MoveNext();
	КонецЦикла;
	rst = Неопределено;
	//////////
	СтрZОтчет = Неопределено;
	Для Каждого СтрокаЧека Из ТаблицаЧеков Цикл
		ДеньЧека = НачалоДня(СтрокаЧека.DocDate);
		КодМагазина = СтрокаЧека.IdLocation;
		Если СтрZОтчет = Неопределено ИЛИ НачалоДня(СтрZОтчет.Дата) <> ДеньЧека Или СтрZОтчет.КодМагазина <> КодМагазина Тогда
			НайденныеСтроки = ТаблицаXLS.НайтиСтроки(Новый Структура("Дата, КодМагазина", ДеньЧека, КодМагазина));
			Если НайденныеСтроки.Количество() > 0 Тогда
				СтрZОтчет = НайденныеСтроки[0];
			Иначе
				СтрZОтчет = Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если СтрZОтчет <> Неопределено Тогда
			СтрокаЧека.DOC_ORGNAME = СтрZОтчет.Организация.Наименование;
			СтрокаЧека.DOC_ORGINN = СтрZОтчет.Организация.ИНН;
			СтрокаЧека.DOC_ORGKPP = СтрZОтчет.Организация.КПП;
			
			ТипЧека = СтрокаЧека.DocType;
			СуммаЧека = СтрокаЧека.TotalAmount;
			СтрZОтчет.КоличествоЧеков = СтрZОтчет.КоличествоЧеков + 1;
			
			Если ТипыЧековПродаж.Получить(ТипЧека) <> Неопределено Тогда
				СтрокаЧека.DOC_TYPE = "ПродажаРозница";
				СтрокаЧека.DOC_ID = "ПР" + Лев(СтрокаЧека.IdLocation, 3) + Формат(СтрокаЧека.DocDate, "ДФ=yyMMdd");
				СтрокаЧека.DOC_DATE = НачалоДня(СтрокаЧека.DocDate);
				Если ТипыЧековУслуг.Получить(ТипЧека) = Неопределено И СтрокаЧека.FiscalDocNumber <> 0 Тогда
					СтрZОтчет.СуммаЧековПродаж = СтрZОтчет.СуммаЧековПродаж + СуммаЧека;
					СтрокаЧека.Posted = Истина;
				КонецЕсли;
			ИначеЕсли ТипыЧековВозвратов.Получить(ТипЧека) <> Неопределено Тогда
				СтрокаЧека.DOC_TYPE = "ВозвратРозница";
				СтрокаЧека.DOC_ID = СтрокаЧека.DocNumber;
				СтрокаЧека.DOC_DATE = СтрокаЧека.DocDate;
				СтрокаЧека.DOC_PARENTID = "ПР" + Лев(СтрокаЧека.IdLocation, 3) + Формат(СтрокаЧека.ParentDocDate, "ДФ=yyMMdd");
				СтрокаЧека.DOC_PARENTDATE = НачалоДня(СтрокаЧека.ParentDocDate);
				//Если ТипыЧековУслуг.Получить(ТипЧека) = Неопределено И СтрокаЧека.FiscalDocNumber <> 0 Тогда
					СтрZОтчет.СуммаЧековВозвратов = СтрZОтчет.СуммаЧековВозвратов + СуммаЧека;
					СтрокаЧека.Posted = Истина;
				//КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаЧека.ItemId) Тогда
					Строки = ТаблицаЧеков.НайтиСтроки(Новый Структура("DOC_ID, ItemId, DOC_TYPE", СтрокаЧека.DOC_PARENTID, СокрЛП(СтрокаЧека.ItemId), "ПродажаРозница"));
					Если Строки.Количество() > 0 Тогда
						Строки[0].Заморозка = Истина;
					КонецЕсли;
				КонецЕсли;
			Иначе
				СтрокаЧека.DOC_ID = СтрокаЧека.DocNumber;
				СтрокаЧека.DOC_DATE = СтрокаЧека.DocDate;
				СтрZОтчет.Примечание = СтрZОтчет.Примечание + "Неизвестный тип чека " + ТипЧека + "!";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	СтрокиЗаморозок = ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("ТипДокумента", "Заморозки"));
	Для Каждого СтрокаЗаморозки Из СтрокиЗаморозок Цикл
		Строки = ТаблицаЧеков.НайтиСтроки(Новый Структура("DOC_DATE, IdLocation, OutId_1c, Заморозка, DOC_TYPE", НачалоДня(СтрокаЗаморозки.ДатаДокумента), СтрокаЗаморозки.КонтрагентИННКПП, СокрЛП(СтрокаЗаморозки.КодТовара1С), Ложь, "ПродажаРозница"));
		Если Строки.Количество() = 0 Тогда
			СтрокаЧека = ТаблицаЧеков.Добавить();
			СтрокаЧека.DOC_DATE = НачалоДня(СтрокаЗаморозки.ДатаДокумента);
			СтрокаЧека.DocType = 0;
			СтрокаЧека.DocDate = СтрокаЗаморозки.ДатаДокумента;
			СтрокаЧека.IdLocation = СтрокаЗаморозки.КонтрагентИННКПП;
			СтрокаЧека.DOC_STOCKID = СтрокаЗаморозки.КонтрагентИННКПП;
			СтрокаЧека.DOC_STOCKNAME = СтрокаЗаморозки.КонтрагентНаименование;
			СтрокаЧека.DOC_BRANCHID = СтрокаЗаморозки.КонтрагентИННКПП;
			СтрокаЧека.DOC_BRANCHNAME = СтрокаЗаморозки.КонтрагентНаименование;
			СтрокаЧека.INVENTGTD = СтрокаЗаморозки.НомерГТД;
			СтрокаЧека.Country = СтрокаЗаморозки.СтранаПроисхождения;
			СтрокаЧека.COUNTRYNUMID_MRC = СтрокаЗаморозки.СтранаПроисхожденияКод;
			СтрокаЧека.NAMEALIASNAME = СтрокаЗаморозки.АртикулТовара;
			СтрокаЧека.NAME = СтрокаЗаморозки.НаименованиеТовара;
			СтрокаЧека.ItemId = СтрокаЗаморозки.ItemId;
			СтрокаЧека.OutId_1c = СокрЛП(СтрокаЗаморозки.КодТовара1С);
			СтрокаЧека.MerExternalItemId = СтрокаЗаморозки.MerExternalItemId;
			СтрокаЧека.NAMEALIASID = СтрокаЗаморозки.КодАртикула;
			СтрокаЧека.TMName = СтрокаЗаморозки.Группа;
			СтрокаЧека.ITEMRANGEROOT = СтрокаЗаморозки.КодГруппы;
			СтрокаЧека.Quantity = СтрокаЗаморозки.Количество;
			СтрокаЧека.TotalAmount = СтрокаЗаморозки.Сумма;
			СтрокаЧека.Posted = Ложь;
			СтрокаЧека.DOC_ID = "ПР" + Лев(СтрокаЧека.IdLocation, 3) + Формат(СтрокаЧека.DocDate, "ДФ=yyMMdd");
			СтрокаЧека.DOC_ORGNAME = СтрокаЗаморозки.Организация.Наименование;
			СтрокаЧека.DOC_ORGINN = СтрокаЗаморозки.Организация.ИНН;
			СтрокаЧека.DOC_ORGKPP = СтрокаЗаморозки.Организация.КПП;
			СтрокаЧека.DOC_TYPE = "ПродажаРозница";
			СтрокаЧека.DOC_CUR = "RUR";
			СтрокаЧека.Заморозка = Истина;
			//Выкидываем чеки на сумму заморозки
			СтрокиЧеков = ТаблицаЧеков.НайтиСтроки(Новый Структура("DOC_DATE, IdLocation, Заморозка, DOC_TYPE, POSTED", НачалоДня(СтрокаЗаморозки.ДатаДокумента), СтрокаЗаморозки.КонтрагентИННКПП, Ложь, "ПродажаРозница", Истина));
			Если СтрокиЧеков.Количество() > 0 Тогда
				ТабЧековЗаДень = ТаблицаЧеков.Выгрузить(СтрокиЧеков, "НомерСтроки, POSTED, DocType, Заморозка, TotalAmount, PAY_CASH, PAY_CARD");
				ТабЧековЗаДень.Сортировать("TotalAmount");
				i = ТабЧековЗаДень.Количество();
				СуммаЗаморозки = СтрокаЧека.TotalAmount;
				Пока i > 0 Цикл
					СтЧек = ТабЧековЗаДень[i-1];
					Если СтЧек.TotalAmount > СуммаЗаморозки Тогда
						ТабЧековЗаДень.Удалить(i-1);
					КонецЕсли;
					i = i - 1;
				КонецЦикла;
				МассивСтЧеков = Новый Массив;
				i = ТабЧековЗаДень.Количество();
				Проход = 0;
				Пока i > 0 Цикл
					СтЧек = ТабЧековЗаДень[i-1];
					Если СтЧек.TotalAmount <= СуммаЗаморозки И СтЧек.Заморозка = Ложь И
						(((ТипыЧековПредоплат.Получить(СтЧек.DocType) <> Неопределено ИЛИ
						 ТипыЧековУслуг.Получить(СтЧек.DocType) <> Неопределено) И Проход = 0) ИЛИ
						(Проход = 1)) Тогда
						МассивСтЧеков.Добавить(СтЧек.НомерСтроки);
						СуммаЗаморозки = СуммаЗаморозки - СтЧек.TotalAmount;
						ТабЧековЗаДень.Удалить(i-1);
					КонецЕсли;
					i = i - 1;
					//Если i = 0 И СуммаЗаморозки > 1000 И ТабЧековЗаДень.Количество() > 0 Тогда
					//	i = ТабЧековЗаДень.Количество();
					//	Проход = 1;
					//КонецЕсли;
				КонецЦикла;
				Если СуммаЗаморозки > 0 И ТабЧековЗаДень.Количество() Тогда
					МассивПоиска = ТабЧековЗаДень.ВыгрузитьКолонку("TotalAmount");
					Результат = Новый Массив;
					Choice(МассивПоиска, Результат, СуммаЗаморозки);
					Если Результат.Количество() > 0 Тогда
						i = ТабЧековЗаДень.Количество();
						Проход = 0;
						Пока i > 0 Цикл
							СтЧек = ТабЧековЗаДень[i-1];
							Если СтЧек.TotalAmount <= СуммаЗаморозки И СтЧек.Заморозка = Ложь И
								((Результат.Найти(СтЧек.TotalAmount) <> Неопределено И Проход = 0)
								ИЛИ Проход = 1) Тогда
								МассивСтЧеков.Добавить(СтЧек.НомерСтроки);
								СуммаЗаморозки = СуммаЗаморозки - СтЧек.TotalAmount;
								ТабЧековЗаДень.Удалить(i-1);
							КонецЕсли;
							i = i - 1;
							Если i = 0 И Проход = 0 И СуммаЗаморозки > 0 И ТабЧековЗаДень.Количество() > 0 Тогда
								i = ТабЧековЗаДень.Количество();
								Проход = 1;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				ТабЧековЗаДень = ТаблицаЧеков.Выгрузить(СтрокиЧеков, "НомерСтроки, POSTED, DocType, TotalAmount, PAY_CASH, PAY_CARD");
				ТабЧековЗаДень.Сортировать("TotalAmount");
				Если СуммаЗаморозки > 0 И ТабЧековЗаДень.Количество() Тогда
					СуммаЧеков = ТабЧековЗаДень.Итог("TotalAmount");
					СуммаКорректировки = -1 * СуммаЗаморозки;
					СтЧек = Неопределено;
					ОстатокСуммаКорректировки = СуммаКорректировки;
					Для Каждого СтЧек Из ТабЧековЗаДень Цикл
						СуммаКорректировкиПоСтроке = Окр(СуммаКорректировки *(СтЧек.TotalAmount / СуммаЧеков), 2);
						ТаблицаЧеков[СтЧек.НомерСтроки - 1].TotalAmount = ТаблицаЧеков[СтЧек.НомерСтроки - 1].TotalAmount + СуммаКорректировкиПоСтроке;
						СтЧек.TotalAmount = ТаблицаЧеков[СтЧек.НомерСтроки - 1].TotalAmount;
						ОстатокСуммаКорректировки = ОстатокСуммаКорректировки - СуммаКорректировкиПоСтроке;
					КонецЦикла;
					Если ОстатокСуммаКорректировки <> 0 И СтЧек <> Неопределено Тогда
						ТаблицаЧеков[СтЧек.НомерСтроки - 1].TotalAmount = ТаблицаЧеков[СтЧек.НомерСтроки - 1].TotalAmount + ОстатокСуммаКорректировки;
						СтЧек.TotalAmount = ТаблицаЧеков[СтЧек.НомерСтроки - 1].TotalAmount;
						ОстатокСуммаКорректировки = 0;
					КонецЕсли;
					СуммаКорректировки = ОстатокСуммаКорректировки;
					СуммаЗаморозки = -1 * СуммаКорректировки;
				КонецЕсли;
				//Товары выкинутые из за заморозки
				//если продан товар, то нужно услуги заменить на них
				ЧекиУслуг = ТаблицаЧеков.НайтиСтроки(Новый Структура("DOC_TYPE, POSTED, DocType", "ПродажаРозница", Истина, 20));
				ТабЧековУслуг = ТаблицаЧеков.Выгрузить(ЧекиУслуг, "DOC_DATE, DocDate, DocNumber, ItemId, IdLocation, POSTED, DocType");
				ТабЧековУслуг.Сортировать("DOC_DATE, DocDate");
				Для Каждого Элемент Из МассивСтЧеков Цикл
					//Ищем чек услуги сначала в том же магазине, потом во всех
					СтрИскЧека = ТаблицаЧеков[Элемент - 1];
					//На заморозку кидаем оплату
					СтрокаЧека.PAY_CARD = СтрокаЧека.PAY_CARD + СтрИскЧека.PAY_CARD;
					СтрокаЧека.PAY_CASH = СтрокаЧека.PAY_CASH + СтрИскЧека.PAY_CASH;
					СуммаКорректировки = СтрИскЧека.TotalAmount;
					Для ТипПоиска = 0 По 1 Цикл
						Если СуммаКорректировки = 0 Тогда
							Прервать;
						КонецЕсли;
						//Ищем чеки позже исключенного в списке за день
						НомПоз = 1;
						Пока СуммаКорректировки <> 0 И НомПоз < ТабЧековУслуг.Количество() Цикл
							СтрокаТаб = ТабЧековУслуг[НомПоз - 1];
							Если (СтрокаТаб.DOC_DATE >= СтрИскЧека.DOC_DATE И СтрокаТаб.IdLocation = СтрИскЧека.IdLocation И ТипПоиска = 0) Или
								 (СтрокаТаб.DOC_DATE >= СтрИскЧека.DOC_DATE И ТипПоиска = 1) Тогда
								СтрЭлем = ТаблицаЧеков.НайтиСтроки(Новый Структура("DocNumber, ItemId", СтрокаТаб.DocNumber, СтрокаТаб.ItemId));
								ЧекУслуги = СтрЭлем[0];
								//Перенос чека товара вместо услуги
								СтрИскЧека.DOC_DATE = ЧекУслуги.Дата;
								СтрИскЧека.DOC_ID = "ПР" + Лев(ЧекУслуги.IdLocation, 3) + Формат(ЧекУслуги.DOC_DATE, "ДФ=yyMMdd");
								СтрИскЧека.IdLocation = ЧекУслуги.IdLocation;
								СтрИскЧека.TotalAmount = ЧекУслуги.TotalAmount;
								СтрИскЧека.PAY_CASH = ЧекУслуги.PAY_CASH;
								СтрИскЧека.PAY_CARD = ЧекУслуги.PAY_CARD;
								//чек услуги исключаем
								ЧекУслуги.POSTED = Ложь;
								СуммаКорректировки = 0;
							КонецЕсли;
							НомПоз = НомПоз + 1;
						КонецЦикла;
					КонецЦикла;
					//Если не нашли услуг, просто исключаем
					Если СуммаКорректировки <> 0 Тогда
						СтрИскЧека.POSTED = Ложь;
						Если ЗначениеЗаполнено(СтрИскЧека.ItemId) Тогда
							Сообщить("Товар " + СтрИскЧека.ItemId + " на сумму " + СтрИскЧека.TotalAmount + " исключён для продажи заморозки");
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				СтрокаЧека.POSTED = Истина;
			КонецЕсли;
			СтрокиZОтчета = ТаблицаXLS.НайтиСтроки(Новый Структура("Дата, КодМагазина", СтрокаЧека.DOC_DATE, СтрокаЧека.IdLocation));
			Если СтрокиZОтчета.Количество() > 0 Тогда
				СтрZОтчет = СтрокиZОтчета[0];
				//СтрZОтчет.СуммаЧековПродаж = СтрZОтчет.СуммаЧековПродаж + СтрокаЧека.TotalAmount;
				СтрZОтчет.НераспЗаморозка = Истина;
				СтрZОтчет.КоличествоЧеков = СтрZОтчет.КоличествоЧеков + 1;
			КонецЕсли;
		Иначе
			Строки[0].Заморозка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЗапросДвижений = Новый Запрос;
	ЧекиОтчетов = ТаблицаЧеков.НайтиСтроки(Новый Структура("Posted", Истина));
	ТабЧеков = ТаблицаЧеков.Выгрузить(ЧекиОтчетов, "DOC_ID, DOC_DATE, DOC_TYPE, MerExternalItemId, ItemId, Quantity");
	ЗапросДвижений.УстановитьПараметр("ТабЧеков", ТабЧеков);
	ЗапросДвижений.УстановитьПараметр("КонецПериода", КонецДня(ЭтотОбъект.КонецПериода) + 1);
	ЗапросДвижений.Текст = "ВЫБРАТЬ
	|	ТабЧеков.DOC_ID КАК DOC_ID,
	|	ТабЧеков.DOC_DATE КАК DOC_DATE,
	|	ТабЧеков.DOC_TYPE КАК DOC_TYPE,
	|	ТабЧеков.MerExternalItemId КАК MerExternalItemId,
	|	""ITEM"" + ТабЧеков.ItemId КАК ItemId,
	|	ТабЧеков.Quantity КАК Quantity
	|ПОМЕСТИТЬ ТабЧеков
	|ИЗ
	|	&ТабЧеков КАК ТабЧеков
	|ИНДЕКСИРОВАТЬ ПО
	|	DOC_TYPE, MerExternalItemId;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабЧеков.MerExternalItemId КАК Код
	|ПОМЕСТИТЬ ТабКодов
	|ИЗ
	|	ТабЧеков КАК ТабЧеков
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТабЧеков.ItemId
	|ИЗ
	|	ТабЧеков КАК ТабЧеков
	|ИНДЕКСИРОВАТЬ ПО
	|	Код;
	|ВЫБРАТЬ
	|		Док.Дата КАК Период,
	|		ТабКодов.Код,
	|		-СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрТов
	|		ПО ТовДок.Номенклатура = СпрТов.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКодов КАК ТабКодов
	|		ПО СпрТов.Код ПОДОБНО ТабКодов.Код + ""%""
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТабКодов.Код,
	|		Док.Дата
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Док.DOC_DATE КАК Период,
	|		Док.MerExternalItemId,
	|		-СУММА(ЕСТЬNULL(Док.Quantity,0)) КАК Количество
	|	ИЗ
	|		ТабЧеков КАК Док
	|	ГДЕ
	|		Док.DOC_TYPE = ""ПродажаРозница""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.MerExternalItemId,
	|		Док.DOC_DATE
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Док.DOC_DATE КАК Период,
	|		Док.MerExternalItemId,
	|		СУММА(ЕСТЬNULL(Док.Quantity,0)) КАК Количество
	|	ИЗ
	|		ТабЧеков КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрТов
	|		ПО СпрТов.Код ПОДОБНО Док.MerExternalItemId + ""%""
	|	ГДЕ
	|		Док.DOC_TYPE = ""ВозвратРозница""
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Док.MerExternalItemId,
	|		Док.DOC_DATE
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Док.Дата КАК Период,
	|		ТабКодов.Код,
	|		-СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрТов
	|		ПО ТовДок.Номенклатура = СпрТов.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКодов КАК ТабКодов
	|		ПО СпрТов.Код ПОДОБНО ТабКодов.Код + ""%""
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТабКодов.Код,
	|		Док.Дата
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Док.Дата КАК Период,
	|		ТабКодов.Код,
	|		СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.ПоступлениеТоваровУслуг КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеТоваровУслуг.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрТов
	|		ПО ТовДок.Номенклатура = СпрТов.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКодов КАК ТабКодов
	|		ПО СпрТов.Код ПОДОБНО ТабКодов.Код + ""%""
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТабКодов.Код,
	|		Док.Дата
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Док.Дата КАК Период,
	|		ТабКодов.Код,
	|		СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.ОприходованиеТоваров КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОприходованиеТоваров.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрТов
	|		ПО ТовДок.Номенклатура = СпрТов.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКодов КАК ТабКодов
	|		ПО СпрТов.Код ПОДОБНО ТабКодов.Код + ""%""
	|	ГДЕ
	|		Док.Проведен = ИСТИНА
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТабКодов.Код,
	|		Док.Дата
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		Док.Дата КАК Период,
	|		ТабКодов.Код,
	|		СУММА(ТовДок.Количество) КАК Количество
	|	ИЗ
	|		Документ.ВозвратТоваровОтПокупателя КАК Док
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровОтПокупателя.Товары КАК ТовДок
	|		ПО Док.Ссылка = ТовДок.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрТов
	|		ПО ТовДок.Номенклатура = СпрТов.Ссылка
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабКодов КАК ТабКодов
	|		ПО СпрТов.Код ПОДОБНО ТабКодов.Код + ""%""
	|	ГДЕ
	|		Док.ПометкаУдаления = Ложь
	|		И Док.Дата < &КонецПериода
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ТабКодов.Код,
	|		Док.Дата";
	ТабДвижений = ЗапросДвижений.Выполнить().Выгрузить();
	ТабДвижений.Индексы.Добавить("Период");
	ТабДвижений.Индексы.Добавить("Код");
	ЗапросОстатков = Новый ПостроительЗапроса;
	ЗапросОстатков.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТабДвижений);
	
	Для Каждого СтрZОтчет Из ТаблицаXLS Цикл
		СтрZОтчет.РазницаПродаж = СтрZОтчет.Сумма - СтрZОтчет.СуммаЧековПродаж;
		СтрZОтчет.РазницаВозвратов = СтрZОтчет.СуммаВозврата - СтрZОтчет.СуммаЧековВозвратов;
		ЧекиОтчета = ТаблицаЧеков.НайтиСтроки(Новый Структура("DOC_DATE, IdLocation, DOC_TYPE", СтрZОтчет.Дата, СтрZОтчет.КодМагазина, "ПродажаРозница"));
		Если СтрZОтчет.РазницаПродаж < 0 Тогда
			МассивСумм = Новый Массив();
			МассивЧеков = Новый Массив();
			Для Каждого Элемент Из ЧекиОтчета Цикл
				Если ТипыЧековПродаж.Получить(Элемент.DocType) <> Неопределено И
					 ТипыЧековУслуг.Получить(Элемент.DocType) = Неопределено И
					 Элемент.FiscalDocNumber <> 0 Тогда
					МассивСумм.Добавить(Элемент.TotalAmount);
					МассивЧеков.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
			СтрZОтчет.Примечание = СтрZОтчет.Примечание + "Не вошли чеки ";
			СтрZОтчет.Примечание = СтрZОтчет.Примечание + НайтиНевошедшиеЧеки(МассивСумм, -СтрZОтчет.РазницаПродаж, МассивЧеков, СтрZОтчет.Сумма, ЧекиОтчета, Ложь);
		ИначеЕсли СтрZОтчет.РазницаПродаж > 0 Тогда
			МассивСумм = Новый Массив();
			МассивЧеков = Новый Массив();
			Для Каждого Элемент Из ЧекиОтчета Цикл
				Если ТипыЧековПродаж.Получить(Элемент.DocType) <> Неопределено И
					 (ТипыЧековУслуг.Получить(Элемент.DocType) <> Неопределено ИЛИ
					 Элемент.FiscalDocNumber = 0) Тогда
					МассивСумм.Добавить(Элемент.TotalAmount);
					МассивЧеков.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
			СтрZОтчет.Примечание = СтрZОтчет.Примечание + "Вошли чеки ";
			СтрZОтчет.Примечание = СтрZОтчет.Примечание + НайтиНевошедшиеЧеки(МассивСумм, СтрZОтчет.РазницаПродаж, МассивЧеков, СтрZОтчет.Сумма, ЧекиОтчета, Истина);
		КонецЕсли;
		ЧекиВозвратов = ТаблицаЧеков.НайтиСтроки(Новый Структура("DOC_DATE, IdLocation, DOC_TYPE", СтрZОтчет.Дата, СтрZОтчет.КодМагазина, "ВозвратРозница"));
		Если СтрZОтчет.РазницаВозвратов <> 0 Тогда
			СтрZОтчет.Примечание = СтрZОтчет.Примечание + "Не найдены возвраты на сумму (" + СтрZОтчет.РазницаВозвратов + "), ";;
		КонецЕсли;
		//Распределим предоплаты на продажи реального товара
		МассивЧековПредоплат = Новый Массив;//чеки предоплат за день по тт
		СуммаКорректировки = 0;//сумма чеков предоплат
		МассивЧековРаспределения = Новый Массив;//чеки продаж за день по тт, на которые можно распределить предоплату
		СуммаЧеков = 0;//сумма чеков продаж для распределения
		Для Каждого Элемент Из ЧекиОтчета Цикл
			Если ТипыЧековПродаж.Получить(Элемент.DocType) <> Неопределено И Элемент.posted = Истина И Элемент.Заморозка = Ложь Тогда
				Если ТипыЧековПредоплат.Получить(Элемент.DocType) <> Неопределено Тогда
					СуммаКорректировки = СуммаКорректировки + Элемент.TotalAmount;
					МассивЧековПредоплат.Добавить(Элемент);
					//СуммаНал = СуммаНал + Элемент.PAY_CASH;
					//СуммаБезнал = СуммаБезнал + Элемент.PAY_CARD;
				Иначе
					МассивЧековРаспределения.Добавить(Элемент);
					СуммаЧеков = СуммаЧеков + Элемент.TotalAmount;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		//Оплата предоплат, которую нужно перенести на продажи
		СуммаНал = 0;
		СуммаБезнал = 0;
		Для Каждого Элемент Из МассивЧековПредоплат Цикл
			Элемент.posted = Ложь;
			СуммаНал = СуммаНал + Элемент.PAY_CASH;
			СуммаБезнал = СуммаБезнал + Элемент.PAY_CARD;
		КонецЦикла;
		Если СуммаКорректировки > 0 Тогда
			Если СуммаЧеков > 0 Тогда
				//если есть чеки продаж (сумма) за текущую смену,
				//просто распределяем сумму предоплаты на оставшиеся чеки
				ПоследнийЭлемент = Неопределено;
				ОстатокСуммаКорректировки = СуммаКорректировки;
				Для Каждого Элемент Из МассивЧековРаспределения Цикл
					СуммаКорректировкиПоСтроке = Окр(СуммаКорректировки *(Элемент.TotalAmount / СуммаЧеков), 2);
					Элемент.TotalAmount = Элемент.TotalAmount + СуммаКорректировкиПоСтроке;
					Элемент.PAY_CASH = СуммаНал;
					СуммаНал = 0;
					Элемент.PAY_CARD = СуммаБезнал;
					СуммаБезнал = 0;
					ОстатокСуммаКорректировки = ОстатокСуммаКорректировки - СуммаКорректировкиПоСтроке;
					ПоследнийЭлемент = Элемент;
				КонецЦикла;
				Если ОстатокСуммаКорректировки <> 0 И ПоследнийЭлемент <> Неопределено Тогда
					ПоследнийЭлемент.TotalAmount = ПоследнийЭлемент.TotalAmount + ОстатокСуммаКорректировки;
				КонецЕсли;
				СуммаКорректировки = ОстатокСуммаКорректировки;
			Иначе
				//если за текущую смену нет продаж,
				//ищем чеки за другой день по тт, желательно близко к этому
				МассивЧековРаспределения = Новый Массив;
				ЧекиЗаВсеДни = ТаблицаЧеков.НайтиСтроки(Новый Структура("IdLocation, DOC_TYPE", СтрZОтчет.КодМагазина, "ПродажаРозница"));
				ТабЧековЗаВсеДни = ТаблицаЧеков.Выгрузить(ЧекиЗаВсеДни, "DOC_DATE, DocDate, DocNumber, ItemId");
				ТабЧековЗаВсеДни.Сортировать("DOC_DATE, DocDate");
				Для ТипПоиска = 0 По 3 Цикл
					Если СуммаКорректировки = 0 Тогда
						Прервать;
					КонецЕсли;
					Если ТипПоиска = 0 Или ТипПоиска = 2 Тогда
						//Ищем чеки раньше предоплаты в списке за день
						НомПоз = ТабЧековЗаВсеДни.Количество();
					Иначе
						//Ищем чеки позже предоплаты в списке за день
						НомПоз = 1;
					КонецЕсли;
					Пока СуммаКорректировки <> 0 И (НомПоз > 0 И (ТипПоиска = 0 Или ТипПоиска = 2)) Или (НомПоз < ТабЧековЗаВсеДни.Количество() И (ТипПоиска = 1 Или ТипПоиска = 3)) Цикл
						СтрокаТаб = ТабЧековЗаВсеДни[НомПоз - 1];
						Если (СтрокаТаб.DOC_DATE < СтрZОтчет.Дата И (ТипПоиска = 0 Или ТипПоиска = 2)) Или (СтрокаТаб.DOC_DATE > СтрZОтчет.Дата И (ТипПоиска = 1 Или ТипПоиска = 3)) Тогда
							СтрЭлем = ТаблицаЧеков.НайтиСтроки(Новый Структура("DocNumber, ItemId", СтрокаТаб.DocNumber, СтрокаТаб.ItemId));
							Элемент = СтрЭлем[0];
							//Выбираем проведённые продажи товара
							Если Элемент.POSTED И Элемент.Заморозка = Ложь
								И ТипыЧековПродаж.Получить(Элемент.DocType) <> Неопределено
								И ТипыЧековПредоплат.Получить(Элемент.DocType) = Неопределено
								И ТипыЧековУслуг.Получить(Элемент.DocType) = Неопределено Тогда
								//И Элемент.TotalAmount <= СуммаКорректировки Тогда
								ЧекиДня = ТаблицаЧеков.НайтиСтроки(Новый Структура("DOC_DATE, IdLocation, POSTED, Заморозка, DOC_TYPE", Элемент.DOC_DATE, Элемент.IdLocation, Истина, Ложь, "ПродажаРозница"));
								Если ЧекиДня.Количество() > 1 Тогда
									Если ТипПоиска = 0 Или ТипПоиска = 1 Тогда
										//Получим остаток на дату предоплаты для выбранного товара
										ЗапросОстатков.Отбор.Сбросить();
										ПолеОтбора = ЗапросОстатков.Отбор.Добавить("Код");
										ПолеОтбора.ВидСравнения = ВидСравнения.ВСписке;
										СписокКодов = Новый СписокЗначений;
										СписокКодов.Добавить(Элемент.MerExternalItemId);
										СписокКодов.Добавить("ITEM" + Элемент.ItemId);
										ПолеОтбора.Значение = СписокКодов;
										ПолеОтбора.Использование = Истина;
										ПолеОтбора = ЗапросОстатков.Отбор.Добавить("Период");
										ПолеОтбора.ВидСравнения = ВидСравнения.Меньше;
										ПолеОтбора.Значение = СтрZОтчет.Дата + 22*60*60;
										ПолеОтбора.Использование = Истина;
										ЗапросОстатков.Выполнить();
										ТабОстатков = ЗапросОстатков.Результат.Выгрузить();
										ТабОстатков.Свернуть("Код", "Количество");
										КоличествоОстаток = 0;
										Если ТабОстатков.Количество() > 0 Тогда
											КоличествоОстаток = ТабОстатков[0].Количество;
										КонецЕсли;
									Иначе
										КоличествоОстаток = Элемент.Quantity;
									КонецЕсли;
									//Если остатка не хватает, нельзя переносить чек в текущий день
									Если КоличествоОстаток >= Элемент.Quantity Тогда
										//Переносим чек в текущий день (нужно бы ещё также перенести в таблице движений!)
										//Удаляем его из списка, чтобы потом скорректировать сумму остальных на сумму выдернутого чека
										ЧекиДня.Удалить(ЧекиДня.Найти(Элемент));
										Элемент.DOC_DATE = СтрZОтчет.Дата;
										Элемент.DOC_ID = "ПР" + Лев(Элемент.IdLocation, 3) + Формат(Элемент.DOC_DATE, "ДФ=yyMMdd");
										//Запоминаем сумму чека перед изменением, чтобы потом скорректировать смену из которой его выдернули
										СуммаКоррПоСтр = Элемент.TotalAmount;
										Элемент.TotalAmount = СуммаКорректировки;
										Элемент.Posted = Истина;
										СуммаКорректировки = 0;
										Элемент.PAY_CASH = СуммаНал;
										СуммаНал = 0;
										Элемент.PAY_CARD = СуммаБезнал;
										СуммаБезнал = 0;
										//Корректируем смену из которой выдернули чек
										ТабИтог = ТаблицаЧеков.Выгрузить(ЧекиДня, "TotalAmount");
										ТабИтог.Свернуть(, "TotalAmount");
										//Сумма смены после "выдергивания"
										СуммаЧеков = ТабИтог[0].TotalAmount;
										ПоследнийЭлемент = Неопределено;
										//Сумма, на которую следует откорректировать
										ОстатокСуммыКорр = СуммаКоррПоСтр;
										Для Каждого ЭлементРаспр Из ЧекиДня Цикл
											СуммаКорректировкиПоСтроке = Окр(СуммаКоррПоСтр *(ЭлементРаспр.TotalAmount / СуммаЧеков), 2);
											ЭлементРаспр.TotalAmount = ЭлементРаспр.TotalAmount + СуммаКорректировкиПоСтроке;
											ОстатокСуммыКорр = ОстатокСуммыКорр - СуммаКорректировкиПоСтроке;
											ПоследнийЭлемент = ЭлементРаспр;
										КонецЦикла;
										//Если остался "хвост" от округления, добавляем на последний элемент
										Если ОстатокСуммыКорр <> 0 И ПоследнийЭлемент <> Неопределено Тогда
											ПоследнийЭлемент.TotalAmount = ПоследнийЭлемент.TotalAmount + ОстатокСуммыКорр;
										КонецЕсли;
										Прервать;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
							Если Элемент.POSTED = Ложь И Элемент.DOC_DATE = Дата("00010101")
								И ТипыЧековПродаж.Получить(Элемент.DocType) <> Неопределено
								И ТипыЧековПредоплат.Получить(Элемент.DocType) = Неопределено
								И ТипыЧековУслуг.Получить(Элемент.DocType) = Неопределено Тогда
								//И Элемент.TotalAmount <= СуммаКорректировки
								Элемент.DOC_DATE = СтрZОтчет.Дата;
								Элемент.DOC_ID = "ПР" + Лев(Элемент.IdLocation, 3) + Формат(Элемент.DOC_DATE, "ДФ=yyMMdd");
								Элемент.TotalAmount = СуммаКорректировки;
								Элемент.Posted = Истина;
								Элемент.PAY_CASH = СуммаНал;
								СуммаНал = 0;
								Элемент.PAY_CARD = СуммаБезнал;
								СуммаБезнал = 0;
								СуммаКорректировки = 0;
								Прервать;
							КонецЕсли;
						КонецЕсли;
						Если (ТипПоиска = 0 Или ТипПоиска = 2) Тогда
							НомПоз = НомПоз - 1;
						Иначе
							НомПоз = НомПоз + 1;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				//Если СуммаКорректировки > 0 Тогда
				//	Для Каждого СтрокаТаб Из ТабЧековЗаВсеДни Цикл
				//		Элемент = ТаблицаЧеков[СтрокаТаб.НомерСтроки - 1];
				//		Если Элемент.POSTED И Элемент.Заморозка = Ложь И Элемент.DOC_DATE >= СтрZОтчет.Дата
				//			И ТипыЧековПродаж.Получить(Элемент.DocType) <> Неопределено
				//			И ТипыЧековПредоплат.Получить(Элемент.DocType) = Неопределено
				//			И ТипыЧековУслуг.Получить(Элемент.DocType) = Неопределено Тогда
				//			//И Элемент.TotalAmount <= СуммаКорректировки Тогда
				//			ЧекиДня = ТаблицаЧеков.НайтиСтроки(Новый Структура("DOC_DATE, IdLocation, POSTED, Заморозка, DOC_TYPE", Элемент.DOC_DATE, Элемент.IdLocation, Истина, Ложь, "ПродажаРозница"));
				//			Если ЧекиДня.Количество() > 1 Тогда
				//				ЧекиДня.Удалить(ЧекиДня.Найти(Элемент));
				//				Элемент.DOC_DATE = СтрZОтчет.Дата;
				//				Элемент.DOC_ID = "ПР" + Лев(Элемент.IdLocation, 3) + Формат(Элемент.DOC_DATE, "ДФ=yyMMdd");
				//				СуммаКоррПоСтр = Элемент.TotalAmount;
				//				Элемент.TotalAmount = СуммаКорректировки;
				//				Элемент.Posted = Истина;
				//				СуммаКорректировки = 0;
				//				Элемент.PAY_CASH = СуммаНал;
				//				СуммаНал = 0;
				//				Элемент.PAY_CARD = СуммаБезнал;
				//				СуммаБезнал = 0;
				//				//Распределить сумму
				//				ТабИтог = ТаблицаЧеков.Выгрузить(ЧекиДня, "TotalAmount");
				//				ТабИтог.Свернуть(, "TotalAmount");
				//				СуммаЧеков = ТабИтог[0].TotalAmount;
				//				ПоследнийЭлемент = Неопределено;
				//				ОстатокСуммыКорр = СуммаКоррПоСтр;
				//				Для Каждого ЭлементРаспр Из ЧекиДня Цикл
				//					СуммаКорректировкиПоСтроке = Окр(СуммаКоррПоСтр *(ЭлементРаспр.TotalAmount / СуммаЧеков), 2);
				//					ЭлементРаспр.TotalAmount = ЭлементРаспр.TotalAmount + СуммаКорректировкиПоСтроке;
				//					ОстатокСуммыКорр = ОстатокСуммыКорр - СуммаКорректировкиПоСтроке;
				//					ПоследнийЭлемент = ЭлементРаспр;
				//				КонецЦикла;
				//				Если ОстатокСуммыКорр <> 0 И ПоследнийЭлемент <> Неопределено Тогда
				//					ПоследнийЭлемент.TotalAmount = ПоследнийЭлемент.TotalAmount + ОстатокСуммыКорр;
				//				КонецЕсли;
				//				Прервать;
				//			КонецЕсли;
				//		КонецЕсли;
				//		Если Элемент.POSTED = Ложь И Элемент.DOC_DATE = Дата("00010101")
				//			И ТипыЧековПродаж.Получить(Элемент.DocType) <> Неопределено
				//			И ТипыЧековПредоплат.Получить(Элемент.DocType) = Неопределено
				//			И ТипыЧековУслуг.Получить(Элемент.DocType) = Неопределено Тогда
				//			//И Элемент.TotalAmount <= СуммаКорректировки
				//			Элемент.DOC_DATE = СтрZОтчет.Дата;
				//			Элемент.DOC_ID = "ПР" + Лев(Элемент.IdLocation, 3) + Формат(Элемент.DOC_DATE, "ДФ=yyMMdd");
				//			Элемент.TotalAmount = СуммаКорректировки;
				//			Элемент.Posted = Истина;
				//			Элемент.PAY_CASH = СуммаНал;
				//			СуммаНал = 0;
				//			Элемент.PAY_CARD = СуммаБезнал;
				//			СуммаБезнал = 0;
				//			СуммаКорректировки = 0;
				//			Прервать;
				//		КонецЕсли;
				//	КонецЦикла;
				//КонецЕсли;
				Для Каждого Элемент Из МассивЧековПредоплат Цикл
					Элемент.POSTED = Ложь;
				КонецЦикла;
				Если СуммаКорректировки > 0 Тогда
					СтрZОтчет.Примечание = СтрZОтчет.Примечание + "предоплата не распределена, ";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	ZОтчетыXLS.Загрузить(ТаблицаXLS);
	ТаблицаXLS = Неопределено;
	
КонецФункции

Функция НайтиНевошедшиеЧеки(МассивСумм, Сумма, МассивЧеков, ОбщаяСумма, ОбщийМассивЧеков, ВключатьЧеки = Истина)
	Результат = Новый Массив;
	МассивПоиска = Новый Массив(Новый ФиксированныйМассив(МассивСумм));
	//Choice(МассивПоиска, Результат, Сумма);
	//РезСумма = 0;
	//Для Каждого Элемент Из Результат Цикл
	//	РезСумма = РезСумма + Элемент;
	//КонецЦикла;
	Если МассивСумм.Количество() > 1 И МассивСумм.Количество() <= 23 Тогда
		SHBruteSum(МассивПоиска, Результат, Сумма);
	ИначеЕсли МассивСумм.Количество() > 23 Тогда
		СуммаЧеков = 0;
		Для Каждого Элемент Из МассивЧеков Цикл
			Если Элемент.FiscalDocNumber = 0 И СуммаЧеков < Сумма Тогда
				СуммаЧеков = СуммаЧеков + Элемент.TotalAmount;
				Результат.Добавить(Элемент.TotalAmount);
			КонецЕсли;
			Если СуммаЧеков >= Сумма Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		//Результат = LongSumEl(МассивПоиска, Сумма);
	Иначе
		СуммаЧеков = 0;
		Для Каждого Элемент Из МассивЧеков Цикл
			Если СуммаЧеков < Сумма Тогда
				СуммаЧеков = СуммаЧеков + Элемент.TotalAmount;
				Результат.Добавить(Элемент.TotalAmount);
			КонецЕсли;
			Если СуммаЧеков >= Сумма Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Описание = "";
	Если Результат.Количество() = 0 Тогда
		МассивПоиска = Новый Массив();
		Для Каждого Элемент Из ОбщийМассивЧеков Цикл
			МассивПоиска.Добавить(Элемент.TotalAmount);
		КонецЦикла;
		Результат = Новый Массив;
		Если МассивПоиска.Количество() > 1 И МассивПоиска.Количество() <= 23 И ОбщаяСумма < 5000000 Тогда
			SHBruteSum(МассивПоиска, Результат, ОбщаяСумма);
		ИначеЕсли МассивПоиска.Количество() = 1 Тогда
			СуммаЧеков = 0;
			Для Каждого Элемент Из ОбщийМассивЧеков Цикл
				Если СуммаЧеков < ОбщаяСумма Тогда
					СуммаЧеков = СуммаЧеков + Элемент.TotalAmount;
					Результат.Добавить(Элемент.TotalAmount);
				КонецЕсли;
				Если СуммаЧеков >= ОбщаяСумма Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если Результат.Количество() = 0 Тогда
			Описание = Описание + "не найдены чеки на сумму (" + ОбщаяСумма + "), ";
			//КолЧеков = 0;
			СуммаЧеков = 0;
			СуммаНал = 0;
			СуммаБезнал = 0;
			Для Каждого Элемент Из ОбщийМассивЧеков Цикл
				Если Элемент.POSTED = Истина Тогда
					//КолЧеков = КолЧеков + 1;
					СуммаЧеков = СуммаЧеков + Элемент.TotalAmount;
					СуммаНал = СуммаНал + Элемент.PAY_CASH;
					СуммаБезнал = СуммаБезнал + Элемент.PAY_CARD;
				КонецЕсли;
			КонецЦикла;
			Если ВключатьЧеки Тогда
				СуммаКорректировки = Сумма;
			Иначе
				СуммаКорректировки = -1 * Сумма;
			КонецЕсли;
			ОстатокСуммаКорректировки = СуммаКорректировки;
			Если СуммаЧеков > 0 Тогда
				ПоследнийЭлемент = Неопределено;
				Для Каждого Элемент Из ОбщийМассивЧеков Цикл
					Если Элемент.POSTED = Истина Тогда
						СуммаКорректировкиПоСтроке = Окр(СуммаКорректировки *(Элемент.TotalAmount / СуммаЧеков), 2);
						Элемент.TotalAmount = Элемент.TotalAmount + СуммаКорректировкиПоСтроке;
						Элемент.PAY_CASH = СуммаНал;
						СуммаНал = 0;
						Элемент.PAY_CARD = СуммаБезнал;
						СуммаБезнал = 0;
						ОстатокСуммаКорректировки = ОстатокСуммаКорректировки - СуммаКорректировкиПоСтроке;
						ПоследнийЭлемент = Элемент;
					КонецЕсли;
				КонецЦикла;
				Если ОстатокСуммаКорректировки <> 0 И ПоследнийЭлемент <> Неопределено Тогда
					ПоследнийЭлемент.TotalAmount = ПоследнийЭлемент.TotalAmount + ОстатокСуммаКорректировки;
				КонецЕсли;
				СуммаКорректировки = ОстатокСуммаКорректировки;
			КонецЕсли;
		Иначе
			ЧекНеНайден = Ложь;
			Для Каждого Элемент Из ОбщийМассивЧеков Цикл
				СуммаЧека = Элемент.TotalAmount;
				Инд = Результат.Найти(СуммаЧека);
				Если ТипЗнч(Инд) <> Тип("Число") Тогда
					Элемент.Posted = ВключатьЧеки;
					Описание = Описание + Элемент.DocNumber + "(" + Элемент.DocType + "," + Элемент.FiscalDocNumber + "), ";
				Иначе
					Результат.Удалить(Инд);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		ЧекНеНайден = Ложь;
		Для Каждого Элемент Из МассивЧеков Цикл
			СуммаЧека = Элемент.TotalAmount;
			Инд = Результат.Найти(СуммаЧека);
			Если ТипЗнч(Инд) = Тип("Число") Тогда
				Элемент.Posted = ВключатьЧеки;
				Описание = Описание + Элемент.DocNumber + "(" + Элемент.DocType + "," + Элемент.FiscalDocNumber + "), ";
				Результат.Удалить(Инд);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Описание = Лев(Описание, СтрДлина(Описание) - 2);
	Возврат Описание;
КонецФункции

Функция ЗагрузитьТаблицуВнешнихПоступлений(ТаблицаXLS) Экспорт
	ТаблицаXLS.Колонки["К_2"].Имя = "НаименованиеТовара";
	ТаблицаXLS.Колонки["К_3"].Имя = "АртикулТовара";
	ТаблицаXLS.Колонки["К_4"].Имя = "Группа";
	ТаблицаXLS.Колонки["К_6"].Имя = "КодТовара1С";
	ТаблицаXLS.Колонки["К_7"].Имя = "ItemId";
	ТаблицаXLS.Колонки["К_11"].Имя = "НомерГТД";
	ТаблицаXLS.Колонки["К_12"].Имя = "СтранаПроисхожденияКодАльфа2";
	ТаблицаXLS.Колонки["К_15"].Имя = "Сумма";
	
	ТабДанных = СформироватьТаблицуКодов(Connection, ТаблицаXLS, "ItemId", "ItemId");
	
	СтруктураПоиска = Новый Структура("ItemId");

	КонтрагентНаименование = КонтрагентПоУмолчанию.Наименование;
	КонтрагентИННКПП = КонтрагентПоУмолчанию.ИНН + "/" + КонтрагентПоУмолчанию.КПП;
	Для Каждого СтрокаТаб Из ТаблицаXLS Цикл
		СтрокаТЧ = ТаблицаЗакупокXLS.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, СтрокаТаб);
		СтруктураПоиска.ItemId = СокрЛП(СтрокаТаб.ItemId);
		НайденныеСтроки = ТабДанных.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаТЧ.КодАртикула = "ITEM" + СтрокаТаб.ItemId;
			СтрокаТЧ.НаименованиеТовара = НайденныеСтроки[0].ITEMNAME;
			СтрокаТЧ.КодГруппы = НайденныеСтроки[0].TMId;
			СтрокаТЧ.Группа = НайденныеСтроки[0].TMName;
			СтрокаТЧ.MerExternalItemId = НайденныеСтроки[0].MerExternalItemId;
		КонецЕсли;
		СтрокаТЧ.НаименованиеПолноеТовара = СтрокаТЧ.НаименованиеТовара+", артикул "+СокрЛП(СтрокаТЧ.АртикулТовара)+", Производитель "+СокрЛП(СтрокаТЧ.Группа);
		СтрокаТЧ.АртикулТовара = СтрокаТЧ.КодТовара1С;
		СтрокаТЧ.Организация = ОрганизацияПоУмолчанию;
		СтрокаТЧ.ТипДокумента = "ПостВнешнее";
		СтрокаТЧ.КонтрагентНаименование = КонтрагентНаименование;
		СтрокаТЧ.КонтрагентИННКПП = КонтрагентИННКПП;
		СтрокаТЧ.Количество = 1;
		СтрокаТЧ.Цена = СтрокаТЧ.Сумма;
		СтрокаТЧ.Комиссия = Ложь;
		СтрокаТЧ.СчетУчета = "41.01";
		СтрокаТЧ.СтавкаНДС = "18";
		СуммаБезНДС = 100 * СтрокаТЧ.Сумма / (100 + Число(СтрокаТЧ.СтавкаНДС));
		СтрокаТЧ.СуммаНДС = Окр(СтрокаТЧ.Сумма - СуммаБезНДС, 2);
		СтрокаТаб.СтранаПроисхожденияКодАльфа2 = ВРег(СтрокаТаб.СтранаПроисхожденияКодАльфа2);
		Если СтрокаТаб.СтранаПроисхожденияКодАльфа2 = "UK" Тогда
			СтрокаТЧ.СтранаПроисхожденияКодАльфа2 = "GBR";
		ИначеЕсли СтрокаТаб.СтранаПроисхожденияКодАльфа2 = "EU" Тогда
			СтрокаТЧ.СтранаПроисхожденияКодАльфа2 = "CHE";
		КонецЕсли;
		НайдСтраны = ЭтотОбъект.Классификатор.НайтиСтроки(Новый Структура("КодАльфа3", СтрокаТЧ.СтранаПроисхожденияКодАльфа2));
		Если НайдСтраны.Количество() > 0 Тогда
			СтрокаТЧ.СтранаПроисхождения = НайдСтраны[0].Наименование;
			СтрокаТЧ.СтранаПроисхожденияКод = НайдСтраны[0].Код;
			СтрокаТЧ.СтранаПроисхожденияКодАльфа2 = НайдСтраны[0].КодАльфа2;
			СтрокаТЧ.СтранаПроисхожденияКодАльфа3 = НайдСтраны[0].КодАльфа3;
		КонецЕсли;
	КонецЦикла;
	ТаблицаXLS = Неопределено;
	
КонецФункции

Функция РаспределитьПоступления(Направление = -1) Экспорт
	Если Направление = -1 Тогда
		id = ТаблицаСуммДокументов.Количество();
		Пока id > 0 Цикл
			СтрокаДокумента = ТаблицаСуммДокументов[id - 1];
			НезаполненныеСтроки = ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("НомерДокумента, ТипДокумента", "", "ПостВнешнее"));
			i = НезаполненныеСтроки.Количество();
			ДокументЗаполнен = Ложь;
			Пока i > 0 Цикл
				СтрокаТаб = НезаполненныеСтроки[i - 1];
				Если СтрокаДокумента.Сумма - СтрокаДокумента.Распределено > СтрокаТаб.Сумма Тогда
					СтрокаТаб.НомерДокумента = СтрокаДокумента.Номер;
					СтрокаТаб.НомерСчетфактуры = СтрокаДокумента.Номер;
					СтрокаТаб.ДатаДокумента = СтрокаДокумента.Дата;
					СтрокаДокумента.Распределено = СтрокаДокумента.Распределено + СтрокаТаб.Сумма;
				Иначе
					ДокументЗаполнен = Истина;
					//Прервать;
				КонецЕсли;
				Если СтрокаДокумента.Сумма = СтрокаДокумента.Распределено Тогда
					Прервать;
				КонецЕсли;
				i = i - 1;
			КонецЦикла;
			Если СтрокаДокумента.Сумма > СтрокаДокумента.Распределено И ДокументЗаполнен Тогда
				СтрокиДок = ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("НомерДокумента, ТипДокумента", СтрокаДокумента.Номер, "ПостВнешнее"));
				ТабСумм = ТаблицаЗакупокXLS.Выгрузить(СтрокиДок, "НомерСтроки, Сумма");
				ТабСумм.Сортировать("Сумма Убыв");
				МаксСтрока = ТаблицаЗакупокXLS[ТабСумм[0].НомерСтроки - 1];
				МаксСтрока.Сумма = МаксСтрока.Сумма + (СтрокаДокумента.Сумма - СтрокаДокумента.Распределено);
				МаксСтрока.Цена = МаксСтрока.Сумма / МаксСтрока.Количество;
			КонецЕсли;
			id = id - 1;
		КонецЦикла;
	ИначеЕсли Направление = 1 Тогда
		КолДок = ТаблицаСуммДокументов.Количество();
		id = 0;
		Пока id < КолДок Цикл
			СтрокаДокумента = ТаблицаСуммДокументов[id];
			НезаполненныеСтроки = ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("НомерДокумента, ТипДокумента", "", "ПостВнешнее"));
			КолСтр = НезаполненныеСтроки.Количество();
			i = 0;
			ДокументЗаполнен = Ложь;
			Пока i < КолСтр Цикл
				СтрокаТаб = НезаполненныеСтроки[i];
				Если СтрокаДокумента.Сумма - СтрокаДокумента.Распределено > СтрокаТаб.Сумма Тогда
					СтрокаТаб.НомерДокумента = СтрокаДокумента.Номер;
					СтрокаТаб.НомерСчетфактуры = СтрокаДокумента.Номер;
					СтрокаТаб.ДатаДокумента = СтрокаДокумента.Дата;
					СтрокаДокумента.Распределено = СтрокаДокумента.Распределено + СтрокаТаб.Сумма;
				Иначе
					ДокументЗаполнен = Истина;
					//Прервать;
				КонецЕсли;
				Если СтрокаДокумента.Сумма = СтрокаДокумента.Распределено Тогда
					Прервать;
				КонецЕсли;
				i = i + 1;
			КонецЦикла;
			Если СтрокаДокумента.Сумма > СтрокаДокумента.Распределено И ДокументЗаполнен Тогда
				СтрокиДок = ТаблицаЗакупокXLS.НайтиСтроки(Новый Структура("НомерДокумента, ТипДокумента", СтрокаДокумента.Номер, "ПостВнешнее"));
				ТабСумм = ТаблицаЗакупокXLS.Выгрузить(СтрокиДок, "НомерСтроки, Сумма");
				ТабСумм.Сортировать("Сумма Убыв");
				МаксСтрока = ТаблицаЗакупокXLS[ТабСумм[0].НомерСтроки - 1];
				МаксСтрока.Сумма = МаксСтрока.Сумма + (СтрокаДокумента.Сумма - СтрокаДокумента.Распределено);
				МаксСтрока.Цена = МаксСтрока.Сумма / МаксСтрока.Количество;
			КонецЕсли;
			id = id + 1;
		КонецЦикла;
	КонецЕсли;
КонецФункции

Функция ЗагрузитьСуммыПоступлений(ТаблицаXLS) Экспорт
	ТаблицаXLS.Колонки["К_4"].Имя = "Номер";
	ТаблицаXLS.Колонки["К_3"].Имя = "Дата";
	ТаблицаXLS.Колонки["К_1"].Имя = "Сумма";
	ТаблицаXLS.Колонки["К_2"].Имя = "Распределено";
	М = Новый Массив;
	ТаблицаСуммДокументов.Загрузить(ТаблицаXLS);
	ТаблицаXLS = Неопределено;
	
КонецФункции

Функция ПолучитьГТД(НомерГТД, Создавать = Ложь) Экспорт
	ЗапросГТД = Новый Запрос("ВЫБРАТЬ
	|	НомераГТД.Ссылка
	|ИЗ
	|	Справочник.НомераГТД КАК НомераГТД
	|ГДЕ
	|	НомераГТД.Код ПОДОБНО &НомерГТД");
	ЗапросГТД.УстановитьПараметр("НомерГТД", СокрЛП(НомерГТД) + "%");
	Результат = ЗапросГТД.Выполнить();
	Если Результат.Пустой() = Ложь Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Ссылка;
	ИначеЕсли Создавать = Истина Тогда
		ОбъектГТД = Справочники.НомераГТД.СоздатьЭлемент();
		ОбъектГТД.Код = СокрЛП(НомерГТД);
		ОбъектГТД.Записать();
		Возврат ОбъектГТД.Ссылка;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

Функция ВыполнитьЗапросADO(Connection, CommandText, КодДокумента = Неопределено, КодИнвойса = Неопределено, КодПараметра = Неопределено)
	RecordSet = Неопределено;
	Cmd=Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Connection;
	Cmd.CommandText = CommandText;
	Cmd.CommandTimeout = 0;		//120;
	Cmd.CommandType = adCmdText;
	Cmd.NamedParameters = True;
	Если ЗначениеЗаполнено(КодДокумента) Тогда
		prmBeginDate = Cmd.CreateParameter(, adWChar, adParamInput, СтрДлина(КодДокумента), КодДокумента);
		Cmd.Parameters.Append(prmBeginDate);
	КонецЕсли;
	Если ЗначениеЗаполнено(КодИнвойса) Тогда
		prmInvoiceId = Cmd.CreateParameter(, adWChar, adParamInput, СтрДлина(КодИнвойса), КодИнвойса);
		Cmd.Parameters.Append(prmInvoiceId);
	КонецЕсли;
	Если ЗначениеЗаполнено(КодПараметра) Тогда
		prmParmId = Cmd.CreateParameter(, adWChar, adParamInput, СтрДлина(КодПараметра), КодПараметра);
		Cmd.Parameters.Append(prmParmId);
	КонецЕсли;
	Попыток = 20;
	Если ЗначениеЗаполнено(КодДокумента) Тогда
		RecordSet = Новый COMОбъект("ADODB.RecordSet");
		RecordSet.CursorLocation = adUseClient;
		RecordSet.CursorType = adOpenStatic;
		RecordSet.LockType = adLockReadOnly;
		Пока Попыток > 0 Цикл
			Попытка
				RecordSet.Open(Cmd);
				Попыток = 0;
			Исключение
				Инфо = ИнформацияОбОшибке();
				Если Найти(Инфо.Причина.Описание, "lock") = 0 Тогда
					Попыток = 0;
				КонецЕсли;
				Попыток = Попыток - 1;
				Если Попыток = 0 Тогда
					ВызватьИсключение Инфо.Описание;
				КонецЕсли;
			КонецПопытки;
		КонецЦикла;
	Иначе
		//Cmd.ActiveConnection = Connection;
		Cmd.Execute();
	КонецЕсли;
	Возврат RecordSet;
КонецФункции

Функция СократитьНомер(input)
	Номер = "";
	Префикс = "";
	RegExp = Новый COMОбъект("VBScript.RegExp");
	RegExp.IgnoreCase = Ложь;
	RegExp.Global = Истина;
	RegExp.MultiLine = Ложь;	
	RegExp.Pattern = "(\D*)\d*";
	Matches=RegExp.Execute(input);
	Если Matches.Count() > 0 Тогда
		Префикс = Matches.Item(0).SubMatches.Item(0);
	КонецЕсли;
	RegExp.Pattern = "\D*(\d*)";
	Matches=RegExp.Execute(input);
	Если Matches.Count() > 0 Тогда
		Номер = Формат(Число(Matches.Item(0).SubMatches.Item(0)),"ЧЦ=4; ЧДЦ=; ЧН=0; ЧВН=; ЧГ=0");
	КонецЕсли;
	Возврат Префикс + Номер;
КонецФункции

// Метод "Microsoft ADODB"/
//
// Параметры:
//        ФайлEXCEL - Полное имя файла (путь к файлу с именем файла и расширением).
//        ИмяЛиста - Имя выбранного листа файла EXCEL.
//        СтрокаЗаголовка (по умолчанию = 1) - Номер строки EXCEL, в которой расположены заголовки колонок.
//            Не используется, т.к. в СтрокеСоединения указано HDR=YES, а не HDR=NO.
//       В обработке 1-я строка анализируется для сопоставления колонок EXCEL с реквизитами 1С (справочники, докуметны, регистры).
//        НачСтрока (по-умолчанию = 0) - Номер начальной строки, начиная с которой считываются данные из EXCEL.
//        КонСтрока (по-умолчанию = 0) - Номер конечной строки, которой заканчиваются считываемые данные из EXCEL.
//            Если НачСтрока=0 и КонСтрока=0, то считывается вся таблица, находящаяся на листе EXCEL.
//        КолвоСтрокExcel - Количество строк на листе "ИмяЛиста" EXCEL. Возвращается в вызываемую процедуру.
//        ПодключениеADODB - тип драйвера ADODB для подключения к EXCEL.
//
// Возвращаемые значения:
//         ТаблицаРезультат - Результат считывания с листа "ИмяЛиста" EXCEL.
//
Функция ЗагрузитьМетодом_MSADODB(Знач ФайлEXCEL, Знач ИмяЛиста, Знач СтрокаЗаголовка = 1, НачСтрока = 0, КонСтрока = 0, КолвоСтрокExcel, 
 Знач ПодключениеADODB = "MicrosoftJetOLEDB40") Экспорт
    Перем СonnectionString, ADODBConnection, ADODBRecordset, ТекстЗапроса;
    Перем КолвоКолонокExcel, Поле, Колонка, ИмяКолонки;
    Перем НоваяСтрока, НомерСтроки;
    Перем ТаблицаРезультат;
    
    // Нумерация MS ADODB начинается с 1.
    
    // Переменная "СтрокаЗаголовка", не используется, т.к. HDR=YES, а не HDR=NO.
    // HDR=YES:
    // 1. Считывание заголовков колонок с 1-ой строки.
    // 2. Считываемые данные со 2-ой и последующих строк типизированы. Для варианта HDR=NO: считываемые данные - строка.
    
    // Строка соединения - определение драйвера, который будет использован для подключения к файлу EXCEL.
    Если ПодключениеADODB = "MicrosoftACEOLEDB12" Тогда
        
        // ACE.OLEDB.12.0 - Для использования данного подключения необходимо дополнительное ПО:
        // Microsoft Access Database Engine 2010 Redistributable 32/64 bit.
        СonnectionString = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source= " + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 12.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    Иначе
        
        // Jet.OLEDB.4.0 - Стандартное подключение, как правило, не требующее установки дополнительного ПО. 
        // Рекомендуется установить последний Service Pack Windows.
        СonnectionString = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source= "  + СокрЛП(ФайлEXCEL) + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;""";
        
        // Еще один вариант.
        //СтрокаСоединения = "Driver={Microsoft Excel Driver (*.xls)};Dbq=" + СокрЛП(ФайлEXCEL) + ";";
        
    КонецЕсли;
    
    Попытка
        // Инициализация основного объекта ADODB.Connection. Открытие соединения.
        ADODBConnection = Новый COMОбъект("ADODB.Connection");
        ADODBConnection.ConnectionString =  СonnectionString;
        ADODBConnection.Open();
        // Импирически определенный параметр для правильного определения количества строк листа.
        ADODBConnection.CursorLocation = 3;    // По-умолчанию 2.
    Исключение
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    ТекстЗапроса = "SELECT * FROM [" + ИмяЛиста + "$]";
    
    // Создание Recordset. Дочерний объект ADODBConnection. Набор записей по запросу.
    Попытка
        ADODBRecordset = Новый COMОбъект("ADODB.Recordset");
        ADODBRecordset.Open(ТекстЗапроса, ADODBConnection);
        
        // Проверка заполненности листа.
        Если (ADODBRecordset.EOF ИЛИ ADODBRecordset.BOF) Тогда
            КолвоСтрокExcel = 0;
            Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
            
            // Завершение работы.
            // Закрытие Объектов.
            ADODBRecordset.Close();
            ADODBConnection.Close();
            ADODBRecordset   = Неопределено;
            ADODBConnection = Неопределено;
            
            Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
        КонецЕсли;
        
        // Импирически определенные параметры для правильного определения количества строк листа.
        ADODBRecordset.AbsolutePage     = 1;
        ADODBRecordset.AbsolutePosition = 1;
    Исключение
        Сообщить(НСтр("ru = '"+ОписаниеОшибки()+"'"), СтатусСообщения.Внимание);
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецПопытки;
    
    // Параметр, возвращаемый в вызывающую процедуру.
    КолвоСтрокExcel = ADODBRecordset.RecordCount + 1;    // (+1) - учет Строки-Заголовока, которая "съедается".
    КолвоКолонокExcel = ADODBRecordset.Fields.Count;
    
    // Проверка заполненности листа.
     Если КолвоСтрокExcel <= 2 Тогда
        КолвоСтрокExcel = 0;
        Сообщить(НСтр("ru = '" + ИмяЛиста + ": не содержит данных.'"), СтатусСообщения.Внимание);
        
        // Завершение работы.
        // Закрытие Объектов.
        ADODBRecordset.Close();
        ADODBConnection.Close();
        ADODBRecordset   = Неопределено;
        ADODBConnection = Неопределено;
        
        Возврат Новый ТаблицаЗначений;    // В случае ошибки возвращаем пустую таблицу значений.
    КонецЕсли;
    
    // Создание результирующей таблицы, в которую будут записываться считанные из EXCEL данные.
    ТаблицаРезультат = Новый ТаблицаЗначений;
    
    // Формирование колонок результирующей таблицы.
    
    // "НомерСтроки" - для наглядности и удобства.
    // В зависимости от разрабатываемой обработки.
    // "Сопоставлено" - может быть другим.
    // Здесь же могут быть добавлены другие колонки, не формируемые из содержимого файла EXCEL.
    ТаблицаРезультат.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"), "№", 4);
    ТаблицаРезультат.Колонки.Добавить("Сопоставлено", Новый ОписаниеТипов("Булево"), "Сопоставлено", 1);
    Для ит = 1 ПО КолвоКолонокExcel Цикл
        
        Поле = ADODBRecordset.Fields.Item(ит - 1);
        ИмяКолонки = "К_" + ит;
        Колонка = ТаблицаРезультат.Колонки.Добавить(ИмяКолонки, , СокрЛП(СтрЗаменить(Поле.Name, "#", ".")));
        // Замена "#" на ".", т.к. при считывании ADODB "." в имени колонки заменяется на "#".
        
    КонецЦикла;
    
    // ТаблицаРезультат: 1-я строка - Строка-Заголовок.
    
    // Добавление этой строки обусловлено исключительно из соображений идентичности содержимого файла EXCEL и ТаблицыЗначений,
    // выводимой на форме Обработки, и дальнейшей обработки строки заголовка
    // с целью сопоставления колонок EXCEL и реквизитов 1С: для Справочников, ПВХ, Регистров, Документов.
    
    // Если в Вашей обработке в результирующей таблице в качестве 1-ой строки не нужна Строка-Заголовок, то
    // следует закомментировать следующий цикл:
    НоваяСтрока = ТаблицаРезультат.Добавить();
    НоваяСтрока.НомерСтроки = 1;
    Для ит = 1 ПО КолвоКолонокExcel Цикл
        
        ИмяКолонки = "К_" + ит;
        Колонка = ТаблицаРезультат.Колонки.Найти(ИмяКолонки);
        НоваяСтрока[ИмяКолонки] = Колонка.Заголовок;
        
    КонецЦикла;
    
    // ТаблицаРезультат: Формирование строк по указанному диапазону: НачСтрока - КонСтрока.
    
    НомерСтроки = 1;
    Пока ADODBRecordset.EOF() = 0 Цикл
        
        НомерСтроки = НомерСтроки + 1;
        
        Если НомерСтроки < НачСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            ADODBRecordset.MoveNext();             // Следующая строка.
            Продолжить;
        КонецЕсли;
        
        Если КонСтрока > 0 И НомерСтроки > КонСтрока Тогда    // Номер строки вне диапазона считываемых строк.
            Прервать;
        КонецЕсли;
        
        НоваяСтрока = ТаблицаРезультат.Добавить();
        НоваяСтрока.НомерСтроки = НомерСтроки;
        
        Для ит = 1 ПО КолвоКолонокExcel Цикл
            
            Поле = ADODBRecordset.Fields.Item(ит - 1);
                
            Если Поле.ActualSize = 0 Тогда        // Пустое поле EXCEL.
                Продолжить;
            КонецЕсли;
                
            ЗначениеЯчейки = СокрЛП(Поле.Value);        // Учитывая параметр HDR=YES в строке соединения, данные считываются в соответствии с их типом.
            
            ИмяКолонки = "К_" + ит;
            НоваяСтрока[ИмяКолонки] = ЗначениеЯчейки;
            
            // Используется при формировании таблицы на форме обработки.
            ШиринаКолонки = ТаблицаРезультат.Колонки[ИмяКолонки].Ширина;
            ДлинаСтроки      = СтрДлина(СокрЛП(ЗначениеЯчейки));
            ТаблицаРезультат.Колонки[ИмяКолонки].Ширина = ?(ШиринаКолонки < ДлинаСтроки, ДлинаСтроки, ШиринаКолонки);
                
        КонецЦикла;
        
        ADODBRecordset.MoveNext();   // Следующая строка.
        
    КонецЦикла;
    
    //УдалитьКолонкиСНулевойШириной(ТаблицаРезультат);
    
    // Завершение работы.
    // Закрытие Объектов.
    ADODBRecordset.Close();
    ADODBConnection.Close();
    ADODBRecordset   = Неопределено;
    ADODBConnection = Неопределено;
    
    Возврат ТаблицаРезультат;
    
КонецФункции

// РАСШИРЕНИЕ ПОДСИСТЕМЫ "ДЛИТЕЛЬНЫЕ ОПЕРАЦИИ"

// Возвращает Истина, если подсистема существует.
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка. Полное имя объекта метаданных подсистема без слов "Подсистема.".
//                        Например: "СтандартныеПодсистемы.БазоваяФункциональность".
//
// Пример вызова необязательной подсистемы:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
//  	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
//  	МодульУправлениеДоступом.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево.
//
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы) Экспорт
	
	ИменаПодсистем = ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает соответствие имен подсистем и значения Истина;
Функция ИменаПодсистем() Экспорт
	
	Возврат Новый ФиксированноеСоответствие(ИменаПодчиненныхПодсистем(Метаданные));
	
КонецФункции

Функция ИменаПодчиненныхПодсистем(РодительскаяПодсистема)
	
	Имена = Новый Соответствие;
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Имена.Вставить(ТекущаяПодсистема.Имя, Истина);
		ИменаПодчиненных = ИменаПодчиненныхПодсистем(ТекущаяПодсистема);
		
		Для каждого ИмяПодчиненной Из ИменаПодчиненных Цикл
			Имена.Вставить(ТекущаяПодсистема.Имя + "." + ИмяПодчиненной.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

Функция ВерсияБСПСоответствуетТребованиям() Экспорт
	
	Попытка
		МодульСтандартныеПодсистемыСервер = ОбщийМодуль("СтандартныеПодсистемыСервер");
	Исключение
		// Модуль не существует
		МодульСтандартныеПодсистемыСервер = Неопределено;
	КонецПопытки;
	Если МодульСтандартныеПодсистемыСервер = Неопределено Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	ВерсияБСП = МодульСтандартныеПодсистемыСервер.ВерсияБиблиотеки();
	Возврат НомерВерсииВЧисло(ВерсияБСП) >= НомерВерсииВЧисло("2.3.3.9");
	
КонецФункции

Функция НомерВерсииВЧисло(НомерВерсии)
	ЧастиНомера = СтрРазделить(НомерВерсии, ".", Ложь);
	Если ЧастиНомера.Количество() <> 4 Тогда
		Возврат 0;
	КонецЕсли;
	Результат = 0;
	Для Каждого ЧастьНомера Из ЧастиНомера Цикл
		Результат = Результат * 1000 + Число(ЧастьНомера);
	КонецЦикла;
	Возврат Результат;
КонецФункции

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль.
//
Функция ОбщийМодуль(Имя) Экспорт
	
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru = 'Общий модуль ""%1"" не найден.'"), Имя);
	КонецЕсли;
	
	Возврат Модуль;
	
КонецФункции

Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено)
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	
	Возврат СтрокаПодстановки;
КонецФункции

Функция ПолучитьИмяПеречисления(ЗначениеПеречисления)
	Если ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
		ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьПредставлениеПеречисления(ЗначениеПеречисления)
	Если ЗначениеЗаполнено(ЗначениеПеречисления) Тогда
		ИмяПеречисления = ЗначениеПеречисления.Метаданные().Имя;
		ИндексЗначенияПеречисления = Перечисления[ИмяПеречисления].Индекс(ЗначениеПеречисления);
		Возврат Сред(Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[ИндексЗначенияПеречисления].Имя, 4);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ПолучитьНДСПоПредставлению(Представление)
	ИмяПеречисления = Неопределено;
	Для Каждого СтавкаНДС Из Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления Цикл
		Если "Ставка " + СтавкаНДС.Синоним = Представление Тогда
			ИмяПеречисления = СтавкаНДС.Имя;
			Прервать;
		КонецЕсли;
		Если СтавкаНДС.Имя = "НДС" + Представление Тогда
			ИмяПеречисления = СтавкаНДС.Имя;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат ИмяПеречисления;
КонецФункции

Функция СформироватьТаблицуАртикулов(Connection, ВыборкаТоваров, ТаблицаКодов = Неопределено, ПолеПоиска = "MerExternalItemId")
	//Соответствия кодов товаров
	RecordSet = Неопределено;
	Cmd=Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Connection;
	Cmd.CommandText = "create table #ArtImport (ItemId nvarchar(20));";
	Cmd.CommandTimeout = 0;		//120;
	Cmd.CommandType = adCmdText;
	Cmd.NamedParameters = True;
	Cmd.Execute();
	
	RecordSet = Новый COMОбъект("ADODB.RecordSet");
	RecordSet.ActiveConnection = Connection;
	RecordSet.CursorLocation = adUseClient;
	RecordSet.CursorType = adOpenForwardOnly;
	RecordSet.LockType = adLockBatchOptimistic;
	
	RecordSet.Open("#ArtImport", Connection, adOpenForwardOnly, adLockBatchOptimistic);
	
	RecordSet.ActiveConnection = Неопределено;
	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("MEREXTERNALITEMID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	ТабДанных.Колонки.Добавить("MEREXTERNALITEMIDSPECIFICATION", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	ТабДанных.Колонки.Добавить("NAMEALIASID", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	ТабДанных.Колонки.Добавить("NAME", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(150)));
	ТабДанных.Колонки.Добавить("NameAliasLogist", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТабДанных.Колонки.Добавить("GTD", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТабДанных.Колонки.Добавить("TMName", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ТабДанных.Колонки.Добавить("TMId", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(4)));
	ТабДанных.Колонки.Добавить("CountryId", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3)));
	ТабДанных.Колонки.Добавить("COUNTRY", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
	ТабДанных.Колонки.Добавить("COUNTRYNUMID_MRC", Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3)));
	Пока ВыборкаТоваров.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаТоваров.КодТовара) Тогда
		    RecordSet.AddNew();
			RecordSet.Fields("ItemId").Value = СокрЛП(ВыборкаТоваров.КодТовара);
			RecordSet.Update();
		КонецЕсли;
	КонецЦикла;
	Если ТаблицаКодов <> Неопределено Тогда
		Для Каждого СтрокаТЧ Из ТаблицаКодов Цикл
			Если ЗначениеЗаполнено(СтрокаТЧ.КодАртикула) Тогда
			    RecordSet.AddNew();
				RecordSet.Fields("ItemId").Value = СокрЛП(СтрокаТЧ.КодАртикула);
				RecordSet.Update();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	RecordSet.ActiveConnection = Connection;
	RecordSet.UpdateBatch();
	RecordSet.Close();
	RecordSet = Неопределено;

	Cmd=Новый COMОбъект("ADODB.Command");
	Cmd.ActiveConnection = Connection;
	Cmd.CommandText = "create index ItemId_ind
	|on #ArtImport (ItemId);
	|select DISTINCT 
	|	M.MerExternalItemId AS MerExternalItemIdSpecification,
	|	M.MerExternalItemId,
	|	(CASE
	|	WHEN M.NAMEALIASID = '' AND NAMEALIASTABLE.NAMEALIASID IS NOT NULL THEN NAMEALIASTABLE.NAMEALIASID
	|	WHEN M.NAMEALIASID = '' AND NAMEALIASTABLE.NAMEALIASID IS NULL THEN M.MEREXTERNALITEMID
	|	ELSE M.NAMEALIASID
	|	END) AS NAMEALIASID,
	|	(CASE WHEN MERINVENTTABLEFEATURE.MERPRODUCTIONID IS NULL OR MERINVENTTABLEFEATURE.MERPRODUCTIONID = '' THEN M.Name ELSE MERINVENTTABLEFEATURE.MERPRODUCTIONID END) as NAME,
	|	M.NameAliasLogist,
	|	M.ITEMRANGEROOT AS TMId,
	|	M.ITEMRANGEROOTNAME AS TMName,
	|	CASE WHEN INVENTGTDSETTLEMENT_MRC.GTD IS NULL OR INVENTGTDSETTLEMENT_MRC.GTD = '' THEN
	|		CASE WHEN MERINVENTTABLEFEATURE.MerInventGTD IS NULL OR MERINVENTTABLEFEATURE.MerInventGTD = '' THEN ExtLogist.merInventGTD + '/' + CAST(M.LINENUMGTD AS varchar)
	|		WHEN MERINVENTTABLEFEATURE.MerInventGTDFull = '' THEN MERINVENTTABLEFEATURE.MerInventGTD + (CASE WHEN charindex('/', RIGHT(MERINVENTTABLEFEATURE.MerInventGTD, 4)) > 0 THEN '' ELSE '/1' END) ELSE MERINVENTTABLEFEATURE.MerInventGTDFull END
	|		ELSE INVENTGTDSETTLEMENT_MRC.GTD
	|	END AS GTD,
	|	CR.NAME AS COUNTRY,
	|	CR.COUNTRYNUMID_MRC,
	|	CASE
	|		WHEN M.CountryId IS NOT NULL AND M.CountryId != '' THEN M.CountryId
	|		WHEN inventItemGroup.CountryId IS NOT NULL AND inventItemGroup.CountryId != '' THEN inventItemGroup.CountryId
	|		ELSE inventItemRange.CountryId
	|	END AS CountryId
	|from
	|	#ArtImport AS ArtImport
	|inner join dbo.MEREXTERNALLOGISTICLINESP50195 as M on ArtImport.ItemId = M.MEREXTERNALITEMID
	|inner join dbo.MEREXTERNALLOGISTICLINE as ML on ArtImport.ItemId = ML.MEREXTERNALITEMIDSPECIFICATION
	|inner join MEREXTERNALLOGISTICTABLE AS ExtLogist on (M.MEREXTERNALLOGISTICID = ExtLogist.MEREXTERNALLOGISTICID)
	|LEFT JOIN
	|	dbo.INVENTGTDSETTLEMENT_MRC AS INVENTGTDSETTLEMENT_MRC
	|	ON ML.RECID = INVENTGTDSETTLEMENT_MRC.LOGLINEREFRECID
	|LEFT JOIN
	|	dbo.MERINVENTTABLEFEATURE AS MERINVENTTABLEFEATURE
	|	ON INVENTGTDSETTLEMENT_MRC.ItemId = MERINVENTTABLEFEATURE.ITEMID
	|LEFT JOIN
	|	dbo.inventItemRange AS inventItemGroup
	|	ON M.ITEMRANGEID = inventItemGroup.RANGEID
	|LEFT JOIN
	|	dbo.inventItemRange AS inventItemRange
	|	ON M.ITEMRANGEROOT = inventItemRange.RANGEID
	|LEFT JOIN
	|	(SELECT
	|		ML.MERINVENTGTD,
	|		ML.NAMEALIASID,
	|		MAX(ML.COUNTRYID) AS COUNTRYID
	|	FROM
	|		(SELECT
	|			MT.MERINVENTGTD,
	|			ML.NAMEALIASID,
	|			MAX(ML.COUNTRYID) AS COUNTRYID
	|		FROM dbo.MEREXTERNALLOGISTICTABLE AS MT
	|		INNER JOIN
	|			dbo.MEREXTERNALLOGISTICLINE AS ML ON MT.MEREXTERNALLOGISTICID = ML.MEREXTERNALLOGISTICID
	|		GROUP BY
	|			MT.MERINVENTGTD,
	|			ML.NAMEALIASID
	|		UNION
	|		SELECT
	|			MT.INVENTGTD,
	|			MT.NAMEALIASID,
	|			MAX(MT.COUNTRYOFORIGINID) AS COUNTRYID
	|		FROM dbo.MEROPENORDERLINE AS MT
	|		GROUP BY
	|			MT.INVENTGTD,
	|			MT.NAMEALIASID) AS ML
	|	GROUP BY
	|		ML.MERINVENTGTD,
	|		ML.NAMEALIASID
	|	) AS MGTD
	|	ON (SUBSTRING(INVENTGTDSETTLEMENT_MRC.GTD,1,23) = MGTD.MERINVENTGTD OR
	|	MERINVENTTABLEFEATURE.MerInventGTD = MGTD.MERINVENTGTD)
	|	AND MERINVENTTABLEFEATURE.NAMEALIASID = MGTD.NAMEALIASID
	|left outer join MERNAMEALIASTABLE AS NAMEALIASTABLE on M.NameAliasLogist = NAMEALIASTABLE.NAMEALIAS AND
	|(M.ITEMRANGEROOT = NAMEALIASTABLE.ITEMRANGEROOT) AND
	|((NAMEALIASTABLE.NAME LIKE '%' + M.Name + '%')
	|	OR (M.Name LIKE '%' + NAMEALIASTABLE.NAME + '%')
	|	OR (M.Name LIKE '%ремень%' AND NAMEALIASTABLE.NAME LIKE '%ремешок%'))
	|LEFT OUTER JOIN
	|	dbo.ADDRESSCOUNTRYREGION AS CR
	|	ON CASE
	|		WHEN M.CountryId IS NOT NULL AND M.CountryId != '' THEN M.CountryId
	|		WHEN MGTD.CountryId IS NOT NULL AND MGTD.CountryId != '' THEN MGTD.CountryId
	|		WHEN inventItemGroup.CountryId IS NOT NULL AND inventItemGroup.CountryId != '' THEN inventItemGroup.CountryId
	|		ELSE inventItemRange.CountryId
	|	END = CR.COUNTRYREGIONID";
	Cmd.CommandTimeout = 0;		//120;
	Cmd.CommandType = adCmdText;
	
	rst = Новый COMОбъект("ADODB.RecordSet");
	rst = Cmd.Execute();
	Cmd.CommandText = "DROP TABLE #ArtImport";
	Cmd.Execute();
	Пока rst.EOF() = Ложь Цикл
		СтрокаДанных = ТабДанных.Добавить();
		Для Каждого Колонка Из ТабДанных.Колонки Цикл
			СтрокаДанных[Колонка.Имя] = rst.Fields(Колонка.Имя).Value;
		КонецЦикла;
		rst.MoveNext();
	КонецЦикла;
	ТабДанных.Индексы.Добавить("MEREXTERNALITEMIDSPECIFICATION");
	ТабДанных.Индексы.Добавить("NAMEALIASID");
	Возврат ТабДанных;
КонецФункции	

Функция ПолучитьXDTOНоменклатуры(XMLСхема, ТабАртикулов, ВыгружаемыеОбъекты, Параметры = Неопределено)
	Перем ТоварСсылка, КодТовара, АльтКодТовара, Наименование, НаименованиеПолное, Артикул, АльтАртикул, ТипНоменклатуры, ВидНоменклатуры, СсылкаГруппы, КодГруппы, НаименованиеГруппы;
	XDTO_Номенклатура = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип(XMLСхема, "Справочник.Номенклатура"));
	XDTO_Номенклатура.КлючевыеСвойства = ОбъектXDTOПоИмениСвойства(XDTO_Номенклатура, "КлючевыеСвойства");
	
	ВыгружатьОбъект = Истина;
	СписатьКоличество = 0;
	Если ТипЗнч(Параметры) = Тип("Структура") Тогда
		Если Параметры.Свойство("СписатьКоличество", СписатьКоличество) = Ложь Тогда
			СписатьКоличество = 0;
		КонецЕсли;
		Параметры.Свойство("ТоварСсылка", ТоварСсылка);
		Параметры.Свойство("КодТовара", КодТовара);
		Если Параметры.Свойство("АльтКодТовара", АльтКодТовара) = Ложь Тогда
			СписатьКоличество = 0;
		КонецЕсли;
		Параметры.Свойство("Наименование", Наименование);
		Параметры.Свойство("НаименованиеПолное", НаименованиеПолное);
		Параметры.Свойство("Артикул", Артикул);
		Параметры.Свойство("АльтАртикул", АльтАртикул);
		Параметры.Свойство("ТипНоменклатуры", ТипНоменклатуры);
		Параметры.Свойство("ВидНоменклатуры", ВидНоменклатуры);
		Параметры.Свойство("СсылкаГруппы", СсылкаГруппы);
		Параметры.Свойство("КодГруппы", КодГруппы);
		Параметры.Свойство("НаименованиеГруппы", НаименованиеГруппы);
		Если Параметры.Свойство("ВыгружатьОбъект", ВыгружатьОбъект) = Ложь Тогда
			ВыгружатьОбъект = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПолеКодаОстатков = "КодАртикула";
	Если СписатьКоличество > 0 Тогда
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(Новый Структура(ПолеКодаОстатков, КодТовара));
		Для Каждого СтрокаОстатка Из СтрокиОстатков Цикл
			Если СтрокаОстатка.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			Кол = Мин(СтрокаОстатка.Количество, СписатьКоличество);
			СтрокаОстатка.Количество = СтрокаОстатка.Количество - Кол;
			СписатьКоличество = СписатьКоличество - Кол;
			ВыгружатьОбъект = Ложь;
			Если СписатьКоличество = 0 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли СписатьКоличество < 0 Тогда
		СтрокиОстатков = ТаблицаОстатков.НайтиСтроки(Новый Структура(ПолеКодаОстатков, КодТовара));
		Если СтрокиОстатков.Количество() > 0 Тогда
			СтрокаОстатка = СтрокиОстатков[0];
		Иначе
			СтрокаОстатка = ТаблицаОстатков.Добавить();
			СтрокаОстатка[ПолеКодаОстатков] = КодТовара;
		КонецЕсли;
		СтрокаОстатка.Количество = СтрокаОстатка.Количество - СписатьКоличество;
		СписатьКоличество = 0;
	КонецЕсли;
	Если СписатьКоличество > 0 Тогда
		КодТовара = АльтКодТовара;
		Артикул = АльтАртикул;// + ", " + Артикул;
		СписатьКоличество = 0;
	КонецЕсли;
	
	Если ТабАртикулов <> Неопределено Тогда
		Если КодТовараВMerExternalItemId Тогда
			СтрокаНом = ТабАртикулов.НайтиСтроки(Новый Структура("MEREXTERNALITEMIDSPECIFICATION", СокрЛП(КодТовара)));
		Иначе
			СтрокаНом = ТабАртикулов.НайтиСтроки(Новый Структура("MEREXTERNALITEMID", СокрЛП(КодТовара)));
		КонецЕсли;
		Если СтрокаНом.Количество() > 0 Тогда
			Если ТипВыгрузкиТовара = 0 Тогда
				КодАртикула = СтрокаНом[0].NAMEALIASID;
			ИначеЕсли ТипВыгрузкиТовара = 1 Тогда
				КодАртикула = СтрокаНом[0].MerExternalItemId;
			ИначеЕсли ТипВыгрузкиТовара = 2 Тогда
				КодАртикула = СтрокаНом[0].ItemId;
			КонецЕсли;
		Иначе
			КодАртикула = СокрЛП(КодТовара);
		КонецЕсли;
	Иначе
		КодАртикула = СокрЛП(КодТовара);
	КонецЕсли;
	
	ТоварНеНайден = Ложь;
	//Если ЗначениеЗаполнено(ТоварСсылка) Тогда
	//	СсылкаТовара = КонвертироватьСсылкуВXDTO(ТоварСсылка);
	//Иначе
	//	Если ВыгружатьОбъект Тогда
			СсылкаТовара = ХэшMD5Простой(КодАртикула);
			ТоварНеНайден = Истина;
	//	Иначе
	//		ЗапросНоменклатуры = Новый Запрос("ВЫБРАТЬ
	//		|	Номенклатура.Ссылка
	//		|ИЗ
	//		|	Справочник.Номенклатура КАК Номенклатура
	//		|ГДЕ
	//		|	Номенклатура.Код = &Код
	//		|	И Номенклатура.ЭтоГруппа = Ложь");
	//		ЗапросНоменклатуры.УстановитьПараметр("Код", КодАртикула);
	//		ВыборкаНоменклатуры = ЗапросНоменклатуры.Выполнить().Выбрать();
	//		Если ВыборкаНоменклатуры.Следующий() Тогда
	//			СсылкаТовара = КонвертироватьСсылкуВXDTO(ВыборкаНоменклатуры.Ссылка);
	//		Иначе
	//			СсылкаТовара = ХэшMD5Простой(КодАртикула);
	//			ТоварНеНайден = Истина;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЕсли;
	
	XDTO_Номенклатура.КлючевыеСвойства.Ссылка = СсылкаТовара;
	XDTO_Номенклатура.КлючевыеСвойства.НаименованиеПолное = НаименованиеПолное;
	XDTO_Номенклатура.КлючевыеСвойства.КодВПрограмме = КодАртикула;
	XDTO_Номенклатура.КлючевыеСвойства.Артикул = Артикул;
	XDTO_Номенклатура.КлючевыеСвойства.Наименование = Наименование;
	XDTO_Номенклатура.ТипНоменклатуры = ТипНоменклатуры;
	//Если ЗначениеЗаполнено(Описание) Тогда
	//	XDTO_Номенклатура.Описание = Описание;
	//Иначе
		XDTO_Номенклатура.Описание = Строка(ВидНоменклатуры);
	//КонецЕсли;
	ВыгрузитьКлючЕдиницыИзмерения(XDTO_Номенклатура, "шт");
	ГруппаНеНайдена = Ложь;
	Если ЗначениеЗаполнено(КодГруппы) Тогда
		XDTO_Номенклатура.Группа = ОбъектXDTOПоИмениСвойства(XDTO_Номенклатура, "Группа");
		Если ЗначениеЗаполнено(СсылкаГруппы) Тогда
			XDTO_Номенклатура.Группа.Ссылка = КонвертироватьСсылкуВXDTO(СсылкаГруппы);
		Иначе
			//Если ВыгружатьОбъект Тогда
				ГруппаНеНайдена = Истина;
			//Иначе
			//	ЗапросНоменклатуры = Новый Запрос("ВЫБРАТЬ
			//	|	Номенклатура.Ссылка
			//	|ИЗ
			//	|	Справочник.Номенклатура КАК Номенклатура
			//	|ГДЕ
			//	|	Номенклатура.Наименование = &Наименование
			//	|	И Номенклатура.ЭтоГруппа = Истина");
			//	ЗапросНоменклатуры.УстановитьПараметр("Наименование", НаименованиеГруппы);
			//	ВыборкаНоменклатуры = ЗапросНоменклатуры.Выполнить().Выбрать();
			//	Если ВыборкаНоменклатуры.Следующий() Тогда
			//		СсылкаТовара = КонвертироватьСсылкуВXDTO(ВыборкаНоменклатуры.Ссылка);
			//		XDTO_Номенклатура.Группа.Ссылка = СсылкаТовара;
			//	Иначе
			//		ГруппаНеНайдена = Истина;
			//	КонецЕсли;
			//КонецЕсли;
		КонецЕсли;
		XDTO_Номенклатура.Группа.Наименование = НаименованиеГруппы;
		XDTO_Номенклатура.Группа.КодВПрограмме = КодГруппы;
		Если ГруппаНеНайдена И ВыгружатьОбъект Тогда
			ВыгружаемыеОбъекты.Вставить("Товар_" + XDTO_Номенклатура.Группа.КодВПрограмме, XDTO_Номенклатура.Группа);
		КонецЕсли;
	КонецЕсли;
	Если ТоварНеНайден И ВыгружатьОбъект Тогда
		ВыгружаемыеОбъекты.Вставить("Товар_" + XDTO_Номенклатура.КлючевыеСвойства.КодВПрограмме, XDTO_Номенклатура);
	КонецЕсли;
	Если Параметры.Свойство("СписатьКоличество") Тогда
		Параметры.Вставить("СписанноеКоличество", Параметры.СписатьКоличество - СписатьКоличество);
		Параметры.СписатьКоличество = СписатьКоличество;
	КонецЕсли;
	Возврат XDTO_Номенклатура;
КонецФункции

// Преобразует ссылку на объект текущей информационной базы в строковое представление УИД.
// Если в регистре ПубличныеИдентификаторыСинхронизируемыхОбъектов есть такая ссылка, возвращается УИД из регистра.
// В противном случае возвращается УИД переданной ссылки.
// 
// Параметры:
//  СсылкаНаОбъект - ссылка на объект информационной базы, для которого необходимо получить
//                   уникальный идентификатор объекта XDTO.
//
// Возвращаемое значение:
//  Строка - Уникальный идентификатор объекта.
Функция КонвертироватьСсылкуВXDTO(ЗначениеСсылки)
	
	// Определение публичной ссылки через ссылку на объект.
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Идентификатор 
		|ИЗ РегистрСведений.ПубличныеИдентификаторыСинхронизируемыхОбъектов
		|ГДЕ Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ЗначениеСсылки);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат СокрЛП(Выборка.Идентификатор);
	Иначе
		// Получение УИД текущей ссылки.
		Возврат СокрЛП(ЗначениеСсылки.УникальныйИдентификатор());
	КонецЕсли;
	
КонецФункции

//Функция поиска слагаемых под нужную сумму используя динамическое программирование
//Автор MCH (Михаил Ч.) - июнь 2013

//сумма ищется по целочисленным слагаемым
//в основу взят алгоритм описанный здесь
//http://forum.sources.ru/index.php?showtopic=204375
//Если сумма существует, то она будет найдена

//на входе:
//arr() - одномерный массив с исходными данными
//sm - искомая сумма
//ds - погрешность поиска

//на выходе одномерный массив с результатом, либо значение достигнутой точности
Function LongSumEl(arr, sm, ds = 0)

    Перем i, j, k, n, l, sm1;
	out = Новый Массив;
	l = 0;
    
    n = sm + ds;
    sm1 = sm - ds;
    
	Если n > 80000000 Или n < 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	0 КАК Х
	|ПОМЕСТИТЬ Регистр1
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Младшие.Х + 2 * Старшие.Х КАК Х
	|ПОМЕСТИТЬ Регистр2
	|ИЗ
	|	Регистр1 КАК Младшие,
	|	Регистр1 КАК Старшие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Младшие.Х + 4 * Старшие.Х КАК Х
	|ПОМЕСТИТЬ Регистр4
	|ИЗ
	|	Регистр2 КАК Младшие,
	|	Регистр2 КАК Старшие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Младшие.Х + 16 * Старшие.Х КАК Х
	|ПОМЕСТИТЬ Регистр8
	|ИЗ
	|	Регистр4 КАК Младшие,
	|	Регистр4 КАК Старшие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Младшие.Х + 256 * Старшие.Х КАК Х
	|ПОМЕСТИТЬ Регистр16
	|ИЗ
	|	Регистр8 КАК Младшие,
	|	Регистр8 КАК Старшие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	-1 КАК Х
	|//ПОМЕСТИТЬ Регистр32
	|ИЗ
	|	Регистр16 КАК Младшие,
	|	Регистр8 КАК Старшие
	|ГДЕ
	|	Младшие.Х + 65536 * Старшие.Х < &Количество");
	Запрос.УстановитьПараметр("Количество", n + 1);
	a = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Х");
    a[0] = 0;
	Для i = 0 По arr.ВГраница() - 1 Цикл
		j = n - arr[i];
		Пока j >= 0 Цикл
			//Step -1
            Если a[j] >= 0 Тогда
                k = j + arr[i];
				Если a[k] = -1 Тогда
					a[k] = j;
				КонецЕсли;
                Если k >= sm1 Тогда
                    Пока Истина Цикл
                        l = l + 1;
						Пока out.ВГраница() < l - 1 Цикл
                        	out.Добавить(Неопределено);
						КонецЦикла;
                        out[l-1] = k - a[k];
                        k = a[k];
						Если k = 0 Тогда
							Прервать;
						КонецЕсли;
                    КонецЦикла;
                    Возврат out;
                КонецЕсли;
			КонецЕсли;
			j = j - 1;
		КонецЦикла;
	КонецЦикла;
	i = sm;
	Пока i > 0 Цикл
		Если a[i - 1] >= 0 Тогда
			Прервать;
		КонецЕсли;
		i = i - 1;
    КонецЦикла;
	Возврат sm - i;
EndFunction

Процедура SHBruteSum(nMain, vlAnswer, Etal)
	//TR - текущий разряд
	//VG - верхняя граница массива
	//Sum - сумма текущей комбинации
	//n - счётчик "конструктора"
	//SC, SR - начальные столбец и строка
	//ZMax - текущее кол-во элементов
	vlAnswer = Новый Массив;

	MMain = Новый Массив;
	MMain.Добавить(Неопределено);
	Для Каждого Элемент Из nMain Цикл
		MMain.Добавить(Элемент);
	КонецЦикла;
	VG = MMain.ВГраница(); //определяем размерность
	MSch = Новый Массив(VG + 1); //"конструктор" комбинаций (лучше определить по мин. набору)
	TR = 1; //начнём со штучек
	ZMax = 1;
	Sum = 0;
	nMain = Новый Массив;

	Пока TR < VG Цикл //пока не дойдём до самой большой комбинации
		Если MSch[TR] = VG - TR + 1 Тогда //не достигла ли предела текущая значность?
			MSch[TR] = ?(MSch[TR + 1] = Неопределено, 0, MSch[TR + 1]) + 2; //забегая на шаг вперёд, выставляем текущую
			Для zn = 1 По TR - 1 Цикл //предзаполнение комбинации в новой размерности
				MSch[TR - zn] = ?(MSch[TR] = Неопределено, 0, MSch[TR]) + zn;
			КонецЦикла;
			TR = TR + 1; //переходим к следующей значности
			Если TR > ZMax тогда
				ZMax = TR; //и запоминаем
			КонецЕсли;
		Иначе
			TR = 1; //снова перемещаемся на краешек
		КонецЕсли;

		MSch[TR] = ?(MSch[TR] = Неопределено, 0, MSch[TR]) + 1; //щёлк :)

		Для n = 1 По ZMax Цикл //сумма
		    Sum = Sum + MMain[?(MSch[n] = Неопределено, 0, MSch[n])]
		КонецЦикла;
		Если Sum = Etal Тогда //совпадает ли сумма с эталоном?
		    //Перечень в кв. скобках
			Для n = 1 По ZMax Цикл
				vlAnswer.Добавить(MMain[?(MSch[n] = Неопределено, 0, MSch[n])]);
			КонецЦикла;
			Для n = ZMax По VG Цикл
				Если MSch[n] <> Неопределено Тогда
					nMain.Добавить(MMain[MSch[n]]);
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
		Sum = 0; //очищаем переменные
	КонецЦикла;
	// "Готово!", 64, "Великий ШпецКомбинатор"
КонецПроцедуры

procedure Choice(vlPara, vlAnswer, Sum)
    Count = vlPara.Count();
    if Count > 0 then
        maxRest = 0;
        oldDifference = Sum;
        for x = 0 to Count - 1 do
            Value = vlPara.Get(x);
            Difference = Sum - Value;
            if Difference > 0 then
                if oldDifference > Difference then
                    oldDifference = Difference;
                    maxRest = Value;
                endif;
            elsif Difference = 0 then
                maxRest = Value;
                break;
            endif;
        enddo;
        if maxRest = 0 then
            x = vlAnswer.Count();
            if x > 0 then
                vlAnswer.Delete(x - 1);
            endif;
            x = vlPara.Count();
            Value = vlPara.Get(x - 1);
            vlAnswer.Add(Value);
        else
            x = vlPara.Find(maxRest);
            vlPara.Delete(x);
            vlAnswer.Add(maxRest);
            Rest = Sum - maxRest;
            if Rest > 0 then
                Choice(vlPara, vlAnswer, Rest);
            endif;
        endif;
    endif;
endprocedure

Version = "1.7";
Message_ExchangePlan = "СинхронизацияДанныхЧерезУниверсальныйФормат";
Message_To = "БП";
Message_From = "AX";
ReceivedNo = 3;

adDate = 7;
adBoolean = 11;
adCmdText = 1;
adParamInput = 1;
adUseServer = 2;
adUseClient = 3;
adOpenKeyset = 1;
adOpenStatic = 3;
adOpenForwardOnly = 0;
adLockOptimistic = 3;
adLockBatchOptimistic = 4;
adLockReadOnly = 1;
adCmdTable = 2;
adChar = 129;
adBSTR = 8;
adWChar = 130;

ВалютаРуб = Новый Структура;
ВалютаРуб.Вставить("Ссылка", "f237793e-3d84-11df-96f8-000c6ea69372");
ВалютаРуб.Вставить("Код", "643");
ВалютаРуб.Вставить("Наименование", "руб.");

РозничныйПокупатель = Новый Структура;
РозничныйПокупатель.Вставить("Ссылка", "575cc236-5167-11e1-a558-001457883758");
РозничныйПокупатель.Вставить("Наименование", "Розничный покупатель");
РозничныйПокупатель.Вставить("НаименованиеПолное", "Розничный покупатель");
РозничныйПокупатель.Вставить("ИНН", "");
РозничныйПокупатель.Вставить("КПП", "");
РозничныйПокупатель.Вставить("ЮридическоеФизическоеЛицо", "ФизическоеЛицо");

СтатьяДДС_РозничнаяВыручка = Новый Структура;
СтатьяДДС_РозничнаяВыручка.Вставить("Ссылка", "eb183bb0-ec64-11e6-b898-0cc47a310d0a");
СтатьяДДС_РозничнаяВыручка.Вставить("КодВПрограмме", "00-000002");
СтатьяДДС_РозничнаяВыручка.Вставить("Наименование", "Розничная выручка");

БанкЭквайрер = Новый Структура;
БанкЭквайрер.Вставить("Ссылка", ХэшMD5Простой("6829000290"));
БанкЭквайрер.Вставить("Наименование", "Банк ""СЕРВИС РЕЗЕРВ"" (АО)");
БанкЭквайрер.Вставить("НаименованиеПолное", "Банк ""СЕРВИС РЕЗЕРВ"" (АО)");
БанкЭквайрер.Вставить("ИНН", "6829000290");
БанкЭквайрер.Вставить("КПП", "772501001");
БанкЭквайрер.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");

Контрагент_Таможня1 = Новый Структура;
Контрагент_Таможня1.Вставить("Ссылка", "575cc236-5167-11e1-a558-001485883758");
Контрагент_Таможня1.Вставить("Наименование", "МОСКОВСКАЯ ОБЛАСТНАЯ ТАМОЖНЯ (Таможенный пост № 10130000, 10130170, 10130120)");
Контрагент_Таможня1.Вставить("НаименованиеПолное", "Межрегиональное операционное УФК (ФТС России) МОТ");
Контрагент_Таможня1.Вставить("ИНН", "7730176610");
Контрагент_Таможня1.Вставить("КПП", "773001001");
Контрагент_Таможня1.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");

Контрагент_Таможня = Новый Структура;
Контрагент_Таможня.Вставить("Ссылка", "4993b015-509b-11e1-a558-001485883758");
Контрагент_Таможня.Вставить("Наименование", "ЦЕНТРАЛЬНАЯ АКЦИЗНАЯ ТАМОЖНЯ");
Контрагент_Таможня.Вставить("НаименованиеПолное", "Межрегиональное операционное УФК (ФТС России) ЦАТ");
Контрагент_Таможня.Вставить("ИНН", "7730176610");
Контрагент_Таможня.Вставить("КПП", "773001001");
Контрагент_Таможня.Вставить("ЮридическоеФизическоеЛицо", "ЮридическоеЛицо");

СтранаРоссия = Новый Структура;
СтранаРоссия.Вставить("Ссылка", "0649eb54-3f56-11e5-a4b8-902b34810e4a");
СтранаРоссия.Вставить("Код", "643");
СтранаРоссия.Вставить("Наименование", "РОССИЯ");

ТипыЧековПродаж = Новый Соответствие;
ТипыЧековВозвратов = Новый Соответствие;
ТипыЧековПродаж.Вставить(0, "продажа");
ТипыЧековВозвратов.Вставить(1, "возврат");
ТипыЧековПродаж.Вставить(2, "резерв");
ТипыЧековВозвратов.Вставить(3, "возврат резерва");
ТипыЧековПродаж.Вставить(8, "доп. резерв");
ТипыЧековПродаж.Вставить(6, "предоплата заказа");
ТипыЧековВозвратов.Вставить(7, "возврат предоплаты заказа");
ТипыЧековПродаж.Вставить(9, "продажа (вариант 2");
ТипыЧековПродаж.Вставить(10, "слип");
ТипыЧековПродаж.Вставить(14, "погашение долга");
ТипыЧековПродаж.Вставить(20, "продажа ремонта");
ТипыЧековВозвратов.Вставить(21, "возврат продажи ремонта");
ТипыЧековПродаж.Вставить(30, "оплата дистрибуции");
ТипыЧековВозвратов.Вставить(31, "возврат оплаты дистрибуции");

ТипыЧековУслуг = Новый Соответствие;
ТипыЧековУслуг.Вставить(20, "продажа ремонта");
ТипыЧековУслуг.Вставить(21, "возврат продажи ремонта");
ТипыЧековУслуг.Вставить(30, "оплата дистрибуции");
ТипыЧековУслуг.Вставить(31, "возврат оплаты дистрибуции");

ТипыЧековПредоплат = Новый Соответствие;
ТипыЧековПредоплат.Вставить(2, "резерв");
ТипыЧековПредоплат.Вставить(3, "возврат резерва");
ТипыЧековПредоплат.Вставить(8, "доп. резерв");
ТипыЧековПредоплат.Вставить(6, "предоплата заказа");
ТипыЧековПредоплат.Вставить(7, "возврат предоплаты заказа");
ТипыЧековПредоплат.Вставить(14, "погашение долга");

Если ТекущийРежимЗапуска() = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
	//ОсновнаяФорма = ЭтотОбъект.ПолучитьФорму("ФормаМ");
	//ОсновнаяФорма.Открыть();
//Иначе
//	ЭтотОбъект.Метаданные().ОсновнаяФорма = ЭтотОбъект.Метаданные().Формы[0];
КонецЕсли;
//ТипВыгрузкиТовара = 0; //Выгрузка в кодах "АРТ0034389" NameAliasId
//ТипВыгрузкиТовара = 1; //Выгрузка в кодах "ТОВ0061839" MerExternalItemId
//ТипВыгрузкиТовара = 2; //Выгрузка в кодах "1020788" ItemId
